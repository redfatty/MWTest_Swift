/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: account.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum Bbproto_ELevelType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///普通用户开放给所有用户
  case user // = 0

  ///VIP为在平台内受欢迎的普通用户，并且有意向利用平台获得收益者
  case vip // = 1

  ///VIP+为名人明星，职业队员，游戏公司重要任务，俱乐部以及协会
  case vipp // = 2

  ///VO仅为电子竞技俱乐部或者公司级别
  case vo // = 3

  ///游客
  case tourist // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .user
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .user
    case 1: self = .vip
    case 2: self = .vipp
    case 3: self = .vo
    case 4: self = .tourist
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .user: return 0
    case .vip: return 1
    case .vipp: return 2
    case .vo: return 3
    case .tourist: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Bbproto_ERightId: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///微博展示
  case weiboShowLeftCatalog // = 0

  ///顶部下拉
  case weiboShowTopDropdown // = 1

  ///头像
  case weiboShowIcon // = 2

  ///评论
  case weiboShowComment // = 3

  ///收藏
  case weiboShowCollect // = 4

  ///更多
  case weiboShowMore // = 5

  ///查看详情
  case weiboShowViewDetails // = 6

  ///微博评论
  case weiboCommentText // = 7

  ///语音评论
  case weiboCommentAudio // = 8

  ///微博发布
  case weiboPostText // = 9

  ///图片贴
  case weiboPostImage // = 10

  ///视频贴
  case weiboPostVideo // = 11

  ///语音贴
  case weiboPostAudio // = 12

  ///个人档案
  case personalRecordExternalLinks // = 13

  ///个人图标
  case personalRecordIcon // = 14

  ///社区 
  case personalRecordCommunity // = 15

  ///视频贴分类页
  case personalRecordVideoClassifyPage // = 16

  ///语音贴分类页
  case personalRecordAudioClassifyPage // = 17

  ///好友系统
  case friendSystemRecommend // = 18

  ///搜索
  case friendSystemSearch // = 19

  ///好友申请
  case friendSystemFriendApplyFor // = 20

  ///通迅录
  case friendSystemAddressBook // = 21

  ///好友
  case friendSystemFriend // = 22

  ///我的申请
  case friendSystemMyApplyFor // = 23

  ///其它
  case realName // = 24
  case UNRECOGNIZED(Int)

  init() {
    self = .weiboShowLeftCatalog
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .weiboShowLeftCatalog
    case 1: self = .weiboShowTopDropdown
    case 2: self = .weiboShowIcon
    case 3: self = .weiboShowComment
    case 4: self = .weiboShowCollect
    case 5: self = .weiboShowMore
    case 6: self = .weiboShowViewDetails
    case 7: self = .weiboCommentText
    case 8: self = .weiboCommentAudio
    case 9: self = .weiboPostText
    case 10: self = .weiboPostImage
    case 11: self = .weiboPostVideo
    case 12: self = .weiboPostAudio
    case 13: self = .personalRecordExternalLinks
    case 14: self = .personalRecordIcon
    case 15: self = .personalRecordCommunity
    case 16: self = .personalRecordVideoClassifyPage
    case 17: self = .personalRecordAudioClassifyPage
    case 18: self = .friendSystemRecommend
    case 19: self = .friendSystemSearch
    case 20: self = .friendSystemFriendApplyFor
    case 21: self = .friendSystemAddressBook
    case 22: self = .friendSystemFriend
    case 23: self = .friendSystemMyApplyFor
    case 24: self = .realName
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .weiboShowLeftCatalog: return 0
    case .weiboShowTopDropdown: return 1
    case .weiboShowIcon: return 2
    case .weiboShowComment: return 3
    case .weiboShowCollect: return 4
    case .weiboShowMore: return 5
    case .weiboShowViewDetails: return 6
    case .weiboCommentText: return 7
    case .weiboCommentAudio: return 8
    case .weiboPostText: return 9
    case .weiboPostImage: return 10
    case .weiboPostVideo: return 11
    case .weiboPostAudio: return 12
    case .personalRecordExternalLinks: return 13
    case .personalRecordIcon: return 14
    case .personalRecordCommunity: return 15
    case .personalRecordVideoClassifyPage: return 16
    case .personalRecordAudioClassifyPage: return 17
    case .friendSystemRecommend: return 18
    case .friendSystemSearch: return 19
    case .friendSystemFriendApplyFor: return 20
    case .friendSystemAddressBook: return 21
    case .friendSystemFriend: return 22
    case .friendSystemMyApplyFor: return 23
    case .realName: return 24
    case .UNRECOGNIZED(let i): return i
    }
  }

}

///超链接类型
enum Bbproto_ELinkType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///淘宝网
  case taobao // = 0

  ///京东
  case jd // = 1

  ///YY
  case yy // = 2

  ///虎牙
  case huya // = 3

  ///斗鱼
  case douyu // = 4

  ///熊猫TV
  case panda // = 5

  ///战旗
  case zhanqi // = 6

  ///全民TV
  case quanmin // = 7

  ///新浪微博
  case weibo // = 8

  ///QQ空间
  case qzone // = 9

  ///EDG
  case edg // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .taobao
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .taobao
    case 1: self = .jd
    case 2: self = .yy
    case 3: self = .huya
    case 4: self = .douyu
    case 5: self = .panda
    case 6: self = .zhanqi
    case 7: self = .quanmin
    case 8: self = .weibo
    case 9: self = .qzone
    case 10: self = .edg
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .taobao: return 0
    case .jd: return 1
    case .yy: return 2
    case .huya: return 3
    case .douyu: return 4
    case .panda: return 5
    case .zhanqi: return 6
    case .quanmin: return 7
    case .weibo: return 8
    case .qzone: return 9
    case .edg: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Bbproto_EAccountVoTab: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 主页
  case tabHome // = 0

  /// 队员
  case tabMember // = 1

  /// 动态
  case tabBbnews // = 2

  /// 资讯
  case tabNewsFeed // = 3

  /// 商店
  case tabStore // = 4

  /// 链接
  case tabLink // = 5

  /// 视频
  case tabVideo // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .tabHome
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tabHome
    case 1: self = .tabMember
    case 2: self = .tabBbnews
    case 3: self = .tabNewsFeed
    case 4: self = .tabStore
    case 5: self = .tabLink
    case 6: self = .tabVideo
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .tabHome: return 0
    case .tabMember: return 1
    case .tabBbnews: return 2
    case .tabNewsFeed: return 3
    case .tabStore: return 4
    case .tabLink: return 5
    case .tabVideo: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Bbproto_PUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserList"

  ///PUser列表，最多100个
  var list: [Bbproto_PUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLiveInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLiveInfo"

  /// 网站
  var website: String = String()

  /// 直播网址
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.website)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLiveInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLiveInfoList"

  var list: [Bbproto_PLiveInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户信息
struct Bbproto_PUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUser"

  /// 服务端标志用户的唯一id
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 自有手机号码注册时输入的密码      //这个可以移除
  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  /// 用户名，唯一
  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  /// 昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  /// 头像地址
  var headImgURL: String {
    get {return _storage._headImgURL}
    set {_uniqueStorage()._headImgURL = newValue}
  }

  /// 真实姓名
  var realname: String {
    get {return _storage._realname}
    set {_uniqueStorage()._realname = newValue}
  }

  /// 性别，0就是女，其余的是男；人妖暂时不考虑
  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  /// 邮箱地址
  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  /// 生日，格式1985-01-01
  var birthday: String {
    get {return _storage._birthday}
    set {_uniqueStorage()._birthday = newValue}
  }

  /// 手机号     //这个可以移除
  var cellphone: String {
    get {return _storage._cellphone}
    set {_uniqueStorage()._cellphone = newValue}
  }

  /// 时区       //客户端没用到
  var timeZone: Int32 {
    get {return _storage._timeZone}
    set {_uniqueStorage()._timeZone = newValue}
  }

  /// 语言       //客户端没用到
  var locale: String {
    get {return _storage._locale}
    set {_uniqueStorage()._locale = newValue}
  }

  /// 会员级别
  var membershipLevel: Int32 {
    get {return _storage._membershipLevel}
    set {_uniqueStorage()._membershipLevel = newValue}
  }

  /// 最后更新时间TUser结构，用户/系统修改
  var lastUpdateTime: Int64 {
    get {return _storage._lastUpdateTime}
    set {_uniqueStorage()._lastUpdateTime = newValue}
  }

  /// 用户最后登陆时间
  var lastLoginTime: Int64 {
    get {return _storage._lastLoginTime}
    set {_uniqueStorage()._lastLoginTime = newValue}
  }

  /// 个人简介
  var userResume: String {
    get {return _storage._userResume}
    set {_uniqueStorage()._userResume = newValue}
  }

  /// 链接1      //这个可以移除
  var link1: String {
    get {return _storage._link1}
    set {_uniqueStorage()._link1 = newValue}
  }

  /// 链接2      //这个可以移除
  var link2: String {
    get {return _storage._link2}
    set {_uniqueStorage()._link2 = newValue}
  }

  /// 链接3      //这个可以移除
  var link3: String {
    get {return _storage._link3}
    set {_uniqueStorage()._link3 = newValue}
  }

  /// 聊天系统分配的id
  var chatID: Int64 {
    get {return _storage._chatID}
    set {_uniqueStorage()._chatID = newValue}
  }

  /// 会员等级信息
  var levelInfo: Bbproto_PLevelInfo {
    get {return _storage._levelInfo ?? Bbproto_PLevelInfo()}
    set {_uniqueStorage()._levelInfo = newValue}
  }
  /// Returns true if `levelInfo` has been explicitly set.
  var hasLevelInfo: Bool {return _storage._levelInfo != nil}
  /// Clears the value of `levelInfo`. Subsequent reads from it will return its default value.
  mutating func clearLevelInfo() {_storage._levelInfo = nil}

  /// 帐户是否被禁用
  var disable: Bool {
    get {return _storage._disable}
    set {_uniqueStorage()._disable = newValue}
  }

  /// 该帐户是否是机器人
  var isAi: Bool {
    get {return _storage._isAi}
    set {_uniqueStorage()._isAi = newValue}
  }

  /// 是否登录时强制要修改密码
  var forceChangePwd: Bool {
    get {return _storage._forceChangePwd}
    set {_uniqueStorage()._forceChangePwd = newValue}
  }

  /// 地区代码
  var areaCode: String {
    get {return _storage._areaCode}
    set {_uniqueStorage()._areaCode = newValue}
  }

  /// 地区名称
  var areaName: String {
    get {return _storage._areaName}
    set {_uniqueStorage()._areaName = newValue}
  }

  /// 直播提醒开关
  var liveRemind: Bool {
    get {return _storage._liveRemind}
    set {_uniqueStorage()._liveRemind = newValue}
  }

  /// 直播提醒信息
  var liveInfo: Bbproto_PLiveInfoList {
    get {return _storage._liveInfo ?? Bbproto_PLiveInfoList()}
    set {_uniqueStorage()._liveInfo = newValue}
  }
  /// Returns true if `liveInfo` has been explicitly set.
  var hasLiveInfo: Bool {return _storage._liveInfo != nil}
  /// Clears the value of `liveInfo`. Subsequent reads from it will return its default value.
  mutating func clearLiveInfo() {_storage._liveInfo = nil}

  /// 背景缩略图
  var thumbBackImage: String {
    get {return _storage._thumbBackImage}
    set {_uniqueStorage()._thumbBackImage = newValue}
  }

  /// 背景大图
  var bigBackImage: String {
    get {return _storage._bigBackImage}
    set {_uniqueStorage()._bigBackImage = newValue}
  }

  /// 是否关注
  var isFollowing: Bool {
    get {return _storage._isFollowing}
    set {_uniqueStorage()._isFollowing = newValue}
  }

  /// 注册时间
  var registerTime: Int64 {
    get {return _storage._registerTime}
    set {_uniqueStorage()._registerTime = newValue}
  }

  /// 第三方链接列表
  var linkList: Bbproto_PLinkInfoList {
    get {return _storage._linkList ?? Bbproto_PLinkInfoList()}
    set {_uniqueStorage()._linkList = newValue}
  }
  /// Returns true if `linkList` has been explicitly set.
  var hasLinkList: Bool {return _storage._linkList != nil}
  /// Clears the value of `linkList`. Subsequent reads from it will return its default value.
  mutating func clearLinkList() {_storage._linkList = nil}

  /// 实名认证状态(0:未认证,1:审核中,2:审核未通过,3:已认证)
  var authStatus: Int32 {
    get {return _storage._authStatus}
    set {_uniqueStorage()._authStatus = newValue}
  }

  /// 账户状态，1：封号，unix时间戳：冻结账户截至时间，0：正常
  var state: Int64 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 6: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 7: try decoder.decodeSingularStringField(value: &_storage._password)
        case 8: try decoder.decodeSingularStringField(value: &_storage._username)
        case 9: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 10: try decoder.decodeSingularStringField(value: &_storage._headImgURL)
        case 11: try decoder.decodeSingularStringField(value: &_storage._realname)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._gender)
        case 13: try decoder.decodeSingularStringField(value: &_storage._email)
        case 14: try decoder.decodeSingularStringField(value: &_storage._birthday)
        case 15: try decoder.decodeSingularStringField(value: &_storage._cellphone)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        case 17: try decoder.decodeSingularStringField(value: &_storage._locale)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._membershipLevel)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._lastUpdateTime)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._lastLoginTime)
        case 21: try decoder.decodeSingularStringField(value: &_storage._userResume)
        case 22: try decoder.decodeSingularStringField(value: &_storage._link1)
        case 23: try decoder.decodeSingularStringField(value: &_storage._link2)
        case 24: try decoder.decodeSingularStringField(value: &_storage._link3)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._chatID)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._levelInfo)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._disable)
        case 28: try decoder.decodeSingularBoolField(value: &_storage._isAi)
        case 29: try decoder.decodeSingularBoolField(value: &_storage._forceChangePwd)
        case 30: try decoder.decodeSingularStringField(value: &_storage._areaCode)
        case 31: try decoder.decodeSingularStringField(value: &_storage._areaName)
        case 32: try decoder.decodeSingularBoolField(value: &_storage._liveRemind)
        case 33: try decoder.decodeSingularMessageField(value: &_storage._liveInfo)
        case 34: try decoder.decodeSingularStringField(value: &_storage._thumbBackImage)
        case 35: try decoder.decodeSingularStringField(value: &_storage._bigBackImage)
        case 36: try decoder.decodeSingularBoolField(value: &_storage._isFollowing)
        case 37: try decoder.decodeSingularInt64Field(value: &_storage._registerTime)
        case 38: try decoder.decodeSingularMessageField(value: &_storage._linkList)
        case 39: try decoder.decodeSingularInt32Field(value: &_storage._authStatus)
        case 40: try decoder.decodeSingularInt64Field(value: &_storage._state)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 6)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 7)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 8)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 9)
      }
      if !_storage._headImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImgURL, fieldNumber: 10)
      }
      if !_storage._realname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._realname, fieldNumber: 11)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 12)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 13)
      }
      if !_storage._birthday.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthday, fieldNumber: 14)
      }
      if !_storage._cellphone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cellphone, fieldNumber: 15)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 16)
      }
      if !_storage._locale.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locale, fieldNumber: 17)
      }
      if _storage._membershipLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membershipLevel, fieldNumber: 18)
      }
      if _storage._lastUpdateTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdateTime, fieldNumber: 19)
      }
      if _storage._lastLoginTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastLoginTime, fieldNumber: 20)
      }
      if !_storage._userResume.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userResume, fieldNumber: 21)
      }
      if !_storage._link1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link1, fieldNumber: 22)
      }
      if !_storage._link2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link2, fieldNumber: 23)
      }
      if !_storage._link3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._link3, fieldNumber: 24)
      }
      if _storage._chatID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._chatID, fieldNumber: 25)
      }
      if let v = _storage._levelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if _storage._disable != false {
        try visitor.visitSingularBoolField(value: _storage._disable, fieldNumber: 27)
      }
      if _storage._isAi != false {
        try visitor.visitSingularBoolField(value: _storage._isAi, fieldNumber: 28)
      }
      if _storage._forceChangePwd != false {
        try visitor.visitSingularBoolField(value: _storage._forceChangePwd, fieldNumber: 29)
      }
      if !_storage._areaCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._areaCode, fieldNumber: 30)
      }
      if !_storage._areaName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._areaName, fieldNumber: 31)
      }
      if _storage._liveRemind != false {
        try visitor.visitSingularBoolField(value: _storage._liveRemind, fieldNumber: 32)
      }
      if let v = _storage._liveInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if !_storage._thumbBackImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thumbBackImage, fieldNumber: 34)
      }
      if !_storage._bigBackImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bigBackImage, fieldNumber: 35)
      }
      if _storage._isFollowing != false {
        try visitor.visitSingularBoolField(value: _storage._isFollowing, fieldNumber: 36)
      }
      if _storage._registerTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._registerTime, fieldNumber: 37)
      }
      if let v = _storage._linkList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if _storage._authStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._authStatus, fieldNumber: 39)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt64Field(value: _storage._state, fieldNumber: 40)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PUserListEx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserListEx"

  ///PUser列表，最多100个
  var list: [Bbproto_PUserEx] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 扩展用户信息
struct Bbproto_PUserEx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserEx"

  /// 服务端标志用户的唯一id
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 项目名称
  var project: String {
    get {return _storage._project}
    set {_uniqueStorage()._project = newValue}
  }

  /// 用户名，唯一
  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  /// 自有手机号码注册时输入的密码      //这个可以移除，转移到Login
  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  /// 昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  /// 真实姓名
  var realname: String {
    get {return _storage._realname}
    set {_uniqueStorage()._realname = newValue}
  }

  /// 性别，0就是女，其余的是男；人妖暂时不考虑
  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  /// 生日，格式19850101
  var birthday: String {
    get {return _storage._birthday}
    set {_uniqueStorage()._birthday = newValue}
  }

  /// 邮箱地址
  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  /// 手机号
  var cellphone: String {
    get {return _storage._cellphone}
    set {_uniqueStorage()._cellphone = newValue}
  }

  /// 时区
  var timeZone: Int32 {
    get {return _storage._timeZone}
    set {_uniqueStorage()._timeZone = newValue}
  }

  /// 头像地址
  var headImgURL: String {
    get {return _storage._headImgURL}
    set {_uniqueStorage()._headImgURL = newValue}
  }

  /// 语言
  var locale: String {
    get {return _storage._locale}
    set {_uniqueStorage()._locale = newValue}
  }

  /// 简介
  var userResume: String {
    get {return _storage._userResume}
    set {_uniqueStorage()._userResume = newValue}
  }

  /// 最后更新时间TUser结构，用户/系统修改
  var lastUpdateTime: Int64 {
    get {return _storage._lastUpdateTime}
    set {_uniqueStorage()._lastUpdateTime = newValue}
  }

  /// 用户最后登陆时间
  var lastLoginTime: Int64 {
    get {return _storage._lastLoginTime}
    set {_uniqueStorage()._lastLoginTime = newValue}
  }

  /// 用户数据
  var userData: Dictionary<String,String> {
    get {return _storage._userData}
    set {_uniqueStorage()._userData = newValue}
  }

  /// 注册时间
  var registerTime: Int64 {
    get {return _storage._registerTime}
    set {_uniqueStorage()._registerTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 6: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 7: try decoder.decodeSingularStringField(value: &_storage._project)
        case 8: try decoder.decodeSingularStringField(value: &_storage._username)
        case 9: try decoder.decodeSingularStringField(value: &_storage._password)
        case 10: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 11: try decoder.decodeSingularStringField(value: &_storage._realname)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._gender)
        case 13: try decoder.decodeSingularStringField(value: &_storage._birthday)
        case 14: try decoder.decodeSingularStringField(value: &_storage._email)
        case 15: try decoder.decodeSingularStringField(value: &_storage._cellphone)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._timeZone)
        case 17: try decoder.decodeSingularStringField(value: &_storage._headImgURL)
        case 18: try decoder.decodeSingularStringField(value: &_storage._locale)
        case 19: try decoder.decodeSingularStringField(value: &_storage._userResume)
        case 20: try decoder.decodeSingularInt64Field(value: &_storage._lastUpdateTime)
        case 21: try decoder.decodeSingularInt64Field(value: &_storage._lastLoginTime)
        case 22: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._userData)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._registerTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 6)
      }
      if !_storage._project.isEmpty {
        try visitor.visitSingularStringField(value: _storage._project, fieldNumber: 7)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 8)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 9)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 10)
      }
      if !_storage._realname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._realname, fieldNumber: 11)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 12)
      }
      if !_storage._birthday.isEmpty {
        try visitor.visitSingularStringField(value: _storage._birthday, fieldNumber: 13)
      }
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 14)
      }
      if !_storage._cellphone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cellphone, fieldNumber: 15)
      }
      if _storage._timeZone != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeZone, fieldNumber: 16)
      }
      if !_storage._headImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImgURL, fieldNumber: 17)
      }
      if !_storage._locale.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locale, fieldNumber: 18)
      }
      if !_storage._userResume.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userResume, fieldNumber: 19)
      }
      if _storage._lastUpdateTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdateTime, fieldNumber: 20)
      }
      if _storage._lastLoginTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastLoginTime, fieldNumber: 21)
      }
      if !_storage._userData.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._userData, fieldNumber: 22)
      }
      if _storage._registerTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._registerTime, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用户基础信息
struct Bbproto_PUserBase: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserBase"

  /// 用户等级
  var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  /// 服务端标志用户的唯一id
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 用户名，唯一
  var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  /// 昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  /// 真实姓名
  var realName: String {
    get {return _storage._realName}
    set {_uniqueStorage()._realName = newValue}
  }

  /// 头像地址
  var headImgURL: String {
    get {return _storage._headImgURL}
    set {_uniqueStorage()._headImgURL = newValue}
  }

  /// 简介
  var userResume: String {
    get {return _storage._userResume}
    set {_uniqueStorage()._userResume = newValue}
  }

  /// 语言
  var language: String {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  /// 是否水军， true表示水军
  var isAi: Bool {
    get {return _storage._isAi}
    set {_uniqueStorage()._isAi = newValue}
  }

  /// 性别，0就是女，其余的是男；人妖暂时不考虑
  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  /// 账户状态，1：封号，unix时间戳：冻结账户截至时间，0：正常
  var state: Int64 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// 用户在社区的基础信息，只有在社区相关api会填充
  var community: Bbproto_PUserBaseCommunity {
    get {return _storage._community ?? Bbproto_PUserBaseCommunity()}
    set {_uniqueStorage()._community = newValue}
  }
  /// Returns true if `community` has been explicitly set.
  var hasCommunity: Bool {return _storage._community != nil}
  /// Clears the value of `community`. Subsequent reads from it will return its default value.
  mutating func clearCommunity() {_storage._community = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._level)
        case 6: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 7: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 9: try decoder.decodeSingularStringField(value: &_storage._realName)
        case 10: try decoder.decodeSingularStringField(value: &_storage._headImgURL)
        case 11: try decoder.decodeSingularStringField(value: &_storage._userResume)
        case 12: try decoder.decodeSingularStringField(value: &_storage._language)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._isAi)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._gender)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._state)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._community)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 6)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 7)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 8)
      }
      if !_storage._realName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._realName, fieldNumber: 9)
      }
      if !_storage._headImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImgURL, fieldNumber: 10)
      }
      if !_storage._userResume.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userResume, fieldNumber: 11)
      }
      if !_storage._language.isEmpty {
        try visitor.visitSingularStringField(value: _storage._language, fieldNumber: 12)
      }
      if _storage._isAi != false {
        try visitor.visitSingularBoolField(value: _storage._isAi, fieldNumber: 13)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 14)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt64Field(value: _storage._state, fieldNumber: 15)
      }
      if let v = _storage._community {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用户基础信息列表
struct Bbproto_PUserBaseList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserBaseList"

  ///PUserBase列表，最多100个
  var list: [Bbproto_PUserBase] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户社区的基础信息
struct Bbproto_PUserBaseCommunity: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserBaseCommunity"

  /// 用户加入社区的时间
  var followTime: Int64 = 0

  /// 用户被加入黑名单的时间
  var blacklistTime: Int64 = 0

  /// 用户被禁用时间
  var forbidBegTime: Int64 = 0

  /// 用户被禁用的到期时间
  var forbidEndTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.followTime)
      case 2: try decoder.decodeSingularInt64Field(value: &self.blacklistTime)
      case 3: try decoder.decodeSingularInt64Field(value: &self.forbidBegTime)
      case 4: try decoder.decodeSingularInt64Field(value: &self.forbidEndTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.followTime != 0 {
      try visitor.visitSingularInt64Field(value: self.followTime, fieldNumber: 1)
    }
    if self.blacklistTime != 0 {
      try visitor.visitSingularInt64Field(value: self.blacklistTime, fieldNumber: 2)
    }
    if self.forbidBegTime != 0 {
      try visitor.visitSingularInt64Field(value: self.forbidBegTime, fieldNumber: 3)
    }
    if self.forbidEndTime != 0 {
      try visitor.visitSingularInt64Field(value: self.forbidEndTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PPhoneMap: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPhoneMap"

  ///手机号：uuid
  var list: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAccount: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccount"

  ///手机
  var cellphone: Bool = false

  ///微信
  var wechat: Bool = false

  ///微博
  var weibo: Bool = false

  ///脸书
  var facebook: Bool = false

  ///谷歌
  var google: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularBoolField(value: &self.cellphone)
      case 3: try decoder.decodeSingularBoolField(value: &self.wechat)
      case 4: try decoder.decodeSingularBoolField(value: &self.weibo)
      case 5: try decoder.decodeSingularBoolField(value: &self.facebook)
      case 6: try decoder.decodeSingularBoolField(value: &self.google)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cellphone != false {
      try visitor.visitSingularBoolField(value: self.cellphone, fieldNumber: 2)
    }
    if self.wechat != false {
      try visitor.visitSingularBoolField(value: self.wechat, fieldNumber: 3)
    }
    if self.weibo != false {
      try visitor.visitSingularBoolField(value: self.weibo, fieldNumber: 4)
    }
    if self.facebook != false {
      try visitor.visitSingularBoolField(value: self.facebook, fieldNumber: 5)
    }
    if self.google != false {
      try visitor.visitSingularBoolField(value: self.google, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///会员等级信息
struct Bbproto_PLevelInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLevelInfo"

  ///会员等级类型
  var levelType: Int32 = 0

  ///会员等级权限列表
  var mapRight: Dictionary<String,Bool> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.levelType)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: &self.mapRight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.levelType != 0 {
      try visitor.visitSingularInt32Field(value: self.levelType, fieldNumber: 1)
    }
    if !self.mapRight.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufBool>.self, value: self.mapRight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///会员等级扩展
struct Bbproto_PLevelInfoEx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLevelInfoEx"

  ///用户ID
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///会员等级信息
  var levelInfo: Bbproto_PLevelInfo {
    get {return _storage._levelInfo ?? Bbproto_PLevelInfo()}
    set {_uniqueStorage()._levelInfo = newValue}
  }
  /// Returns true if `levelInfo` has been explicitly set.
  var hasLevelInfo: Bool {return _storage._levelInfo != nil}
  /// Clears the value of `levelInfo`. Subsequent reads from it will return its default value.
  mutating func clearLevelInfo() {_storage._levelInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._levelInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if let v = _storage._levelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///批量会员等级信息
struct Bbproto_PLevelInfos: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLevelInfos"

  ///成功的PUuidLevelInfo信息列表
  var list: [Bbproto_PLevelInfoEx] = []

  ///失败的uuid列表
  var failUuid: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeRepeatedStringField(value: &self.failUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.failUuid.isEmpty {
      try visitor.visitRepeatedStringField(value: self.failUuid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///第三方直播提醒开关
struct Bbproto_PLiveRemind: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLiveRemind"

  var offOn: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.offOn)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offOn != false {
      try visitor.visitSingularBoolField(value: self.offOn, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 基础信息
struct Bbproto_PAccountInitInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountInitInfo"

  ///实名认证状态(0:未认证,1:审核中,2:审核未通过,3:已认证)
  var authStatus: Int32 = 0

  ///手机号码
  var cellphone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.authStatus)
      case 2: try decoder.decodeSingularStringField(value: &self.cellphone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.authStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.authStatus, fieldNumber: 1)
    }
    if !self.cellphone.isEmpty {
      try visitor.visitSingularStringField(value: self.cellphone, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 背景图片信息
struct Bbproto_PBackImage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBackImage"

  ///背景图片objectkey
  var objectKey: String = String()

  ///图片URL
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.objectKey)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.objectKey.isEmpty {
      try visitor.visitSingularStringField(value: self.objectKey, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 背景缩略图列表
struct Bbproto_PBackThumbImageList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBackThumbImageList"

  var list: [Bbproto_PBackImage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 实名认证信息
struct Bbproto_PReadNameAuthInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReadNameAuthInfo"

  ///用户ID
  var uuid: String = String()

  ///实名认证状态(0:未认证,1:审核中,2:审核未通过,3:已认证)
  var authStatus: Int32 = 0

  ///真实姓名
  var readName: String = String()

  ///出生年月日
  var birthday: String = String()

  ///身份证号码
  var idCardNo: String = String()

  ///身份证照片
  var idCardImg: String = String()

  ///认证时间
  var authTime: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.authStatus)
      case 3: try decoder.decodeSingularStringField(value: &self.readName)
      case 4: try decoder.decodeSingularStringField(value: &self.birthday)
      case 5: try decoder.decodeSingularStringField(value: &self.idCardNo)
      case 6: try decoder.decodeSingularStringField(value: &self.idCardImg)
      case 7: try decoder.decodeSingularInt32Field(value: &self.authTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.authStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.authStatus, fieldNumber: 2)
    }
    if !self.readName.isEmpty {
      try visitor.visitSingularStringField(value: self.readName, fieldNumber: 3)
    }
    if !self.birthday.isEmpty {
      try visitor.visitSingularStringField(value: self.birthday, fieldNumber: 4)
    }
    if !self.idCardNo.isEmpty {
      try visitor.visitSingularStringField(value: self.idCardNo, fieldNumber: 5)
    }
    if !self.idCardImg.isEmpty {
      try visitor.visitSingularStringField(value: self.idCardImg, fieldNumber: 6)
    }
    if self.authTime != 0 {
      try visitor.visitSingularInt32Field(value: self.authTime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 实名认证信息列表
struct Bbproto_PReadNameAuthInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReadNameAuthInfoList"

  var list: [Bbproto_PReadNameAuthInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 实名认证信息数量
struct Bbproto_PReadNameAuthInfoCount: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReadNameAuthInfoCount"

  var count: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 隐私信息
struct Bbproto_PPrivacyInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPrivacyInfo"

  ///我的粉丝(不让他(她)看我的贴子)
  var myFans: Bool = false

  ///我关注的人(不看他(她)的贴子)
  var myAttention: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.myFans)
      case 2: try decoder.decodeSingularBoolField(value: &self.myAttention)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.myFans != false {
      try visitor.visitSingularBoolField(value: self.myFans, fieldNumber: 1)
    }
    if self.myAttention != false {
      try visitor.visitSingularBoolField(value: self.myAttention, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 语言信息
struct Bbproto_PLanguageInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLanguageInfo"

  ///语言
  var language: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.language)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 超链接信息
struct Bbproto_PLinkInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLinkInfo"

  ///ELinkType类型
  var type: Int32 = 0

  ///超链接地址
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 超链接信息列表
struct Bbproto_PLinkInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLinkInfoList"

  var list: [Bbproto_PLinkInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 显示贴子的个人档案信息
struct Bbproto_PAccountNewsPersonInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountNewsPersonInfo"

  ///朋友个数
  var friendCnt: Int32 {
    get {return _storage._friendCnt}
    set {_uniqueStorage()._friendCnt = newValue}
  }

  ///follow人数
  var followCnt: Int32 {
    get {return _storage._followCnt}
    set {_uniqueStorage()._followCnt = newValue}
  }

  ///fans个数
  var fansCnt: Int32 {
    get {return _storage._fansCnt}
    set {_uniqueStorage()._fansCnt = newValue}
  }

  ///发表的文字帖个数
  var textCnt: Int32 {
    get {return _storage._textCnt}
    set {_uniqueStorage()._textCnt = newValue}
  }

  var imageCnt: Int32 {
    get {return _storage._imageCnt}
    set {_uniqueStorage()._imageCnt = newValue}
  }

  var audioCnt: Int32 {
    get {return _storage._audioCnt}
    set {_uniqueStorage()._audioCnt = newValue}
  }

  var videoCnt: Int32 {
    get {return _storage._videoCnt}
    set {_uniqueStorage()._videoCnt = newValue}
  }

  var communityID: String {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  var user: Bbproto_PUser {
    get {return _storage._user ?? Bbproto_PUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  ///两用户间的关系、0:无关系，1,：是粉丝，2：已关注，3：相互关注
  var followship: Int32 {
    get {return _storage._followship}
    set {_uniqueStorage()._followship = newValue}
  }

  ///是否是好友，是：true
  var friend: Bool {
    get {return _storage._friend}
    set {_uniqueStorage()._friend = newValue}
  }

  ///超链接列表
  var linkInfos: Bbproto_PLinkInfoList {
    get {return _storage._linkInfos ?? Bbproto_PLinkInfoList()}
    set {_uniqueStorage()._linkInfos = newValue}
  }
  /// Returns true if `linkInfos` has been explicitly set.
  var hasLinkInfos: Bool {return _storage._linkInfos != nil}
  /// Clears the value of `linkInfos`. Subsequent reads from it will return its default value.
  mutating func clearLinkInfos() {_storage._linkInfos = nil}

  ///如果是VIP+，这里会携带所属vo的基础信息
  var supervisor: Bbproto_PUserBase {
    get {return _storage._supervisor ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._supervisor = newValue}
  }
  /// Returns true if `supervisor` has been explicitly set.
  var hasSupervisor: Bool {return _storage._supervisor != nil}
  /// Clears the value of `supervisor`. Subsequent reads from it will return its default value.
  mutating func clearSupervisor() {_storage._supervisor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._friendCnt)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._followCnt)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._fansCnt)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._textCnt)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._imageCnt)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._audioCnt)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._videoCnt)
        case 8: try decoder.decodeSingularStringField(value: &_storage._communityID)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._followship)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._friend)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._linkInfos)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._supervisor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._friendCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._friendCnt, fieldNumber: 1)
      }
      if _storage._followCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followCnt, fieldNumber: 2)
      }
      if _storage._fansCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fansCnt, fieldNumber: 3)
      }
      if _storage._textCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textCnt, fieldNumber: 4)
      }
      if _storage._imageCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._imageCnt, fieldNumber: 5)
      }
      if _storage._audioCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._audioCnt, fieldNumber: 6)
      }
      if _storage._videoCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._videoCnt, fieldNumber: 7)
      }
      if !_storage._communityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityID, fieldNumber: 8)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._followship != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followship, fieldNumber: 10)
      }
      if _storage._friend != false {
        try visitor.visitSingularBoolField(value: _storage._friend, fieldNumber: 11)
      }
      if let v = _storage._linkInfos {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._supervisor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 显示聊天的个人档案信息
struct Bbproto_PAccountChatPersonInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountChatPersonInfo"

  ///社区ID
  var communityID: String {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  ///社区名称
  var communityName: String {
    get {return _storage._communityName}
    set {_uniqueStorage()._communityName = newValue}
  }

  ///社区图片
  var communityIcon: String {
    get {return _storage._communityIcon}
    set {_uniqueStorage()._communityIcon = newValue}
  }

  ///社区介绍
  var introduce: String {
    get {return _storage._introduce}
    set {_uniqueStorage()._introduce = newValue}
  }

  ///用户信息
  var user: Bbproto_PUser {
    get {return _storage._user ?? Bbproto_PUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._communityID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._communityName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._communityIcon)
        case 4: try decoder.decodeSingularStringField(value: &_storage._introduce)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._communityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityID, fieldNumber: 1)
      }
      if !_storage._communityName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityName, fieldNumber: 2)
      }
      if !_storage._communityIcon.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityIcon, fieldNumber: 3)
      }
      if !_storage._introduce.isEmpty {
        try visitor.visitSingularStringField(value: _storage._introduce, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// VIP+所属标签
struct Bbproto_PAccountVoMemberTag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoMemberTag"

  /// 标签ID
  var tagID: Int32 = 0

  /// 名称
  var name: String = String()

  /// 显示图片（VO队员列表显示）
  var image: String = String()

  /// 标签分类
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tagID)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.image)
      case 4: try decoder.decodeSingularStringField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tagID != 0 {
      try visitor.visitSingularInt32Field(value: self.tagID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 游戏列表
struct Bbproto_PAccountVoMemberTagList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoMemberTagList"

  /// 列表
  var list: [Bbproto_PAccountVoMemberTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// VIP+与VO相关信息
struct Bbproto_PAccountVoMember: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoMember"

  /// 用户ID
  var uuid: String = String()

  /// 显示名称（姓名）
  var dispname: String = String()

  /// 职位
  var position: String = String()

  /// 形象照
  var portrait: String = String()

  /// 标签
  var tags: [Bbproto_PAccountVoMemberTag] = []

  /// 背景图
  var background: String = String()

  /// 生日
  var birthday: String = String()

  /// 出生地
  var birthplace: String = String()

  /// 简介
  var introduction: String = String()

  /// 加入时间（只读）
  var joinTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.dispname)
      case 3: try decoder.decodeSingularStringField(value: &self.position)
      case 4: try decoder.decodeSingularStringField(value: &self.portrait)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 6: try decoder.decodeSingularStringField(value: &self.background)
      case 7: try decoder.decodeSingularStringField(value: &self.birthday)
      case 8: try decoder.decodeSingularStringField(value: &self.birthplace)
      case 9: try decoder.decodeSingularStringField(value: &self.introduction)
      case 10: try decoder.decodeSingularInt64Field(value: &self.joinTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.dispname.isEmpty {
      try visitor.visitSingularStringField(value: self.dispname, fieldNumber: 2)
    }
    if !self.position.isEmpty {
      try visitor.visitSingularStringField(value: self.position, fieldNumber: 3)
    }
    if !self.portrait.isEmpty {
      try visitor.visitSingularStringField(value: self.portrait, fieldNumber: 4)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 5)
    }
    if !self.background.isEmpty {
      try visitor.visitSingularStringField(value: self.background, fieldNumber: 6)
    }
    if !self.birthday.isEmpty {
      try visitor.visitSingularStringField(value: self.birthday, fieldNumber: 7)
    }
    if !self.birthplace.isEmpty {
      try visitor.visitSingularStringField(value: self.birthplace, fieldNumber: 8)
    }
    if !self.introduction.isEmpty {
      try visitor.visitSingularStringField(value: self.introduction, fieldNumber: 9)
    }
    if self.joinTime != 0 {
      try visitor.visitSingularInt64Field(value: self.joinTime, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// VO成员列表
struct Bbproto_PAccountVoMemberList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoMemberList"

  /// 列表
  var list: [Bbproto_PAccountVoMember] = []

  /// uuid:PUserBase
  var bases: Dictionary<String,Bbproto_PUserBase> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bbproto_PUserBase>.self, value: &self.bases)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.bases.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bbproto_PUserBase>.self, value: self.bases, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// VO基础信息
struct Bbproto_PAccountVoBase: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoBase"

  /// 粉丝数
  var fans: Int32 {
    get {return _storage._fans}
    set {_uniqueStorage()._fans = newValue}
  }

  /// 用户基础信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 社区ID
  var communityID: String {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  /// 与当前用户的关系：0:无关系，1,：是粉丝，2：已关注，3：相互关注
  var relationship: Int32 {
    get {return _storage._relationship}
    set {_uniqueStorage()._relationship = newValue}
  }

  /// 背景大图
  var bigBackImage: String {
    get {return _storage._bigBackImage}
    set {_uniqueStorage()._bigBackImage = newValue}
  }

  /// 背景缩略图
  var thumbBackImage: String {
    get {return _storage._thumbBackImage}
    set {_uniqueStorage()._thumbBackImage = newValue}
  }

  /// 关注数
  var followers: Int32 {
    get {return _storage._followers}
    set {_uniqueStorage()._followers = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._fans)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularStringField(value: &_storage._communityID)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._relationship)
        case 5: try decoder.decodeSingularStringField(value: &_storage._bigBackImage)
        case 6: try decoder.decodeSingularStringField(value: &_storage._thumbBackImage)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._followers)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._fans != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fans, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._communityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityID, fieldNumber: 3)
      }
      if _storage._relationship != 0 {
        try visitor.visitSingularInt32Field(value: _storage._relationship, fieldNumber: 4)
      }
      if !_storage._bigBackImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bigBackImage, fieldNumber: 5)
      }
      if !_storage._thumbBackImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thumbBackImage, fieldNumber: 6)
      }
      if _storage._followers != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followers, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用户基础信息包含VO信息
struct Bbproto_PUserSupervisor: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserSupervisor"

  /// 用户
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 所属VO
  var supervisor: Bbproto_PUserBase {
    get {return _storage._supervisor ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._supervisor = newValue}
  }
  /// Returns true if `supervisor` has been explicitly set.
  var hasSupervisor: Bool {return _storage._supervisor != nil}
  /// Clears the value of `supervisor`. Subsequent reads from it will return its default value.
  mutating func clearSupervisor() {_storage._supervisor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._supervisor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._supervisor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// PUserSupervisor列表
struct Bbproto_PUserSupervisorList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserSupervisorList"

  /// 列表
  var list: [Bbproto_PUserSupervisor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 权限列表
struct Bbproto_PLevelInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLevelInfoList"

  var list: [Bbproto_PLevelInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// VIP+主页信息
struct Bbproto_PAccountVoMemberBase: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoMemberBase"

  /// VIP+信息
  var user: Bbproto_PAccountVoMember {
    get {return _storage._user ?? Bbproto_PAccountVoMember()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// VO
  var supervisor: Bbproto_PUserBase {
    get {return _storage._supervisor ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._supervisor = newValue}
  }
  /// Returns true if `supervisor` has been explicitly set.
  var hasSupervisor: Bool {return _storage._supervisor != nil}
  /// Clears the value of `supervisor`. Subsequent reads from it will return its default value.
  mutating func clearSupervisor() {_storage._supervisor = nil}

  /// 基础信息
  var ubase: Bbproto_PUserBase {
    get {return _storage._ubase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._ubase = newValue}
  }
  /// Returns true if `ubase` has been explicitly set.
  var hasUbase: Bool {return _storage._ubase != nil}
  /// Clears the value of `ubase`. Subsequent reads from it will return its default value.
  mutating func clearUbase() {_storage._ubase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._supervisor)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._ubase)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._supervisor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._ubase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// VO标签栏
struct Bbproto_PAccountVoTabs: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountVoTabs"

  /// 根据类型判断是否存在tabs中
  /// 如果存在则显示，否则不显示
  var tabs: Dictionary<Int32,Bool> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: &self.tabs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tabs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: self.tabs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_ELevelType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "User"),
    1: .same(proto: "Vip"),
    2: .same(proto: "Vipp"),
    3: .same(proto: "Vo"),
    4: .same(proto: "Tourist"),
  ]
}

extension Bbproto_ERightId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "weibo_show_left_catalog"),
    1: .same(proto: "weibo_show_top_dropdown"),
    2: .same(proto: "weibo_show_icon"),
    3: .same(proto: "weibo_show_comment"),
    4: .same(proto: "weibo_show_collect"),
    5: .same(proto: "weibo_show_more"),
    6: .same(proto: "weibo_show_view_details"),
    7: .same(proto: "weibo_comment_text"),
    8: .same(proto: "weibo_comment_audio"),
    9: .same(proto: "weibo_post_text"),
    10: .same(proto: "weibo_post_image"),
    11: .same(proto: "weibo_post_video"),
    12: .same(proto: "weibo_post_audio"),
    13: .same(proto: "personal_record_external_links"),
    14: .same(proto: "personal_record_icon"),
    15: .same(proto: "personal_record_community"),
    16: .same(proto: "personal_record_video_classify_page"),
    17: .same(proto: "personal_record_audio_classify_page"),
    18: .same(proto: "friend_system_recommend"),
    19: .same(proto: "friend_system_search"),
    20: .same(proto: "friend_system_friend_apply_for"),
    21: .same(proto: "friend_system_address_book"),
    22: .same(proto: "friend_system_friend"),
    23: .same(proto: "friend_system_my_apply_for"),
    24: .same(proto: "real_name"),
  ]
}

extension Bbproto_ELinkType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "taobao"),
    1: .same(proto: "jd"),
    2: .same(proto: "yy"),
    3: .same(proto: "huya"),
    4: .same(proto: "douyu"),
    5: .same(proto: "panda"),
    6: .same(proto: "zhanqi"),
    7: .same(proto: "quanmin"),
    8: .same(proto: "weibo"),
    9: .same(proto: "qzone"),
    10: .same(proto: "edg"),
  ]
}

extension Bbproto_EAccountVoTab: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TabHome"),
    1: .same(proto: "TabMember"),
    2: .same(proto: "TabBBNews"),
    3: .same(proto: "TabNewsFeed"),
    4: .same(proto: "TabStore"),
    5: .same(proto: "TabLink"),
    6: .same(proto: "TabVideo"),
  ]
}

extension Bbproto_PUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLiveInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "website"),
    2: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLiveInfo) -> Bool {
    if self.website != other.website {return false}
    if self.url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLiveInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLiveInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "uuid"),
    7: .same(proto: "password"),
    8: .same(proto: "username"),
    9: .same(proto: "nickname"),
    10: .same(proto: "headImgURL"),
    11: .same(proto: "realname"),
    12: .same(proto: "gender"),
    13: .same(proto: "email"),
    14: .same(proto: "birthday"),
    15: .same(proto: "cellphone"),
    16: .same(proto: "timeZone"),
    17: .same(proto: "locale"),
    18: .same(proto: "membershipLevel"),
    19: .same(proto: "lastUpdateTime"),
    20: .same(proto: "lastLoginTime"),
    21: .same(proto: "userResume"),
    22: .same(proto: "link1"),
    23: .same(proto: "link2"),
    24: .same(proto: "link3"),
    25: .same(proto: "chatId"),
    26: .same(proto: "levelInfo"),
    27: .same(proto: "disable"),
    28: .same(proto: "isAI"),
    29: .same(proto: "forceChangePwd"),
    30: .same(proto: "areaCode"),
    31: .same(proto: "areaName"),
    32: .same(proto: "liveRemind"),
    33: .same(proto: "liveInfo"),
    34: .same(proto: "thumbBackImage"),
    35: .same(proto: "bigBackImage"),
    36: .same(proto: "isFollowing"),
    37: .same(proto: "registerTime"),
    38: .same(proto: "linkList"),
    39: .same(proto: "authStatus"),
    40: .same(proto: "state"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _password: String = String()
    var _username: String = String()
    var _nickname: String = String()
    var _headImgURL: String = String()
    var _realname: String = String()
    var _gender: Int32 = 0
    var _email: String = String()
    var _birthday: String = String()
    var _cellphone: String = String()
    var _timeZone: Int32 = 0
    var _locale: String = String()
    var _membershipLevel: Int32 = 0
    var _lastUpdateTime: Int64 = 0
    var _lastLoginTime: Int64 = 0
    var _userResume: String = String()
    var _link1: String = String()
    var _link2: String = String()
    var _link3: String = String()
    var _chatID: Int64 = 0
    var _levelInfo: Bbproto_PLevelInfo? = nil
    var _disable: Bool = false
    var _isAi: Bool = false
    var _forceChangePwd: Bool = false
    var _areaCode: String = String()
    var _areaName: String = String()
    var _liveRemind: Bool = false
    var _liveInfo: Bbproto_PLiveInfoList? = nil
    var _thumbBackImage: String = String()
    var _bigBackImage: String = String()
    var _isFollowing: Bool = false
    var _registerTime: Int64 = 0
    var _linkList: Bbproto_PLinkInfoList? = nil
    var _authStatus: Int32 = 0
    var _state: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _password = source._password
      _username = source._username
      _nickname = source._nickname
      _headImgURL = source._headImgURL
      _realname = source._realname
      _gender = source._gender
      _email = source._email
      _birthday = source._birthday
      _cellphone = source._cellphone
      _timeZone = source._timeZone
      _locale = source._locale
      _membershipLevel = source._membershipLevel
      _lastUpdateTime = source._lastUpdateTime
      _lastLoginTime = source._lastLoginTime
      _userResume = source._userResume
      _link1 = source._link1
      _link2 = source._link2
      _link3 = source._link3
      _chatID = source._chatID
      _levelInfo = source._levelInfo
      _disable = source._disable
      _isAi = source._isAi
      _forceChangePwd = source._forceChangePwd
      _areaCode = source._areaCode
      _areaName = source._areaName
      _liveRemind = source._liveRemind
      _liveInfo = source._liveInfo
      _thumbBackImage = source._thumbBackImage
      _bigBackImage = source._bigBackImage
      _isFollowing = source._isFollowing
      _registerTime = source._registerTime
      _linkList = source._linkList
      _authStatus = source._authStatus
      _state = source._state
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._username != other_storage._username {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._headImgURL != other_storage._headImgURL {return false}
        if _storage._realname != other_storage._realname {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._birthday != other_storage._birthday {return false}
        if _storage._cellphone != other_storage._cellphone {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._locale != other_storage._locale {return false}
        if _storage._membershipLevel != other_storage._membershipLevel {return false}
        if _storage._lastUpdateTime != other_storage._lastUpdateTime {return false}
        if _storage._lastLoginTime != other_storage._lastLoginTime {return false}
        if _storage._userResume != other_storage._userResume {return false}
        if _storage._link1 != other_storage._link1 {return false}
        if _storage._link2 != other_storage._link2 {return false}
        if _storage._link3 != other_storage._link3 {return false}
        if _storage._chatID != other_storage._chatID {return false}
        if _storage._levelInfo != other_storage._levelInfo {return false}
        if _storage._disable != other_storage._disable {return false}
        if _storage._isAi != other_storage._isAi {return false}
        if _storage._forceChangePwd != other_storage._forceChangePwd {return false}
        if _storage._areaCode != other_storage._areaCode {return false}
        if _storage._areaName != other_storage._areaName {return false}
        if _storage._liveRemind != other_storage._liveRemind {return false}
        if _storage._liveInfo != other_storage._liveInfo {return false}
        if _storage._thumbBackImage != other_storage._thumbBackImage {return false}
        if _storage._bigBackImage != other_storage._bigBackImage {return false}
        if _storage._isFollowing != other_storage._isFollowing {return false}
        if _storage._registerTime != other_storage._registerTime {return false}
        if _storage._linkList != other_storage._linkList {return false}
        if _storage._authStatus != other_storage._authStatus {return false}
        if _storage._state != other_storage._state {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserListEx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserListEx) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserEx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "uuid"),
    7: .same(proto: "project"),
    8: .same(proto: "username"),
    9: .same(proto: "password"),
    10: .same(proto: "nickname"),
    11: .same(proto: "realname"),
    12: .same(proto: "gender"),
    13: .same(proto: "birthday"),
    14: .same(proto: "email"),
    15: .same(proto: "cellphone"),
    16: .same(proto: "timeZone"),
    17: .same(proto: "headImgURL"),
    18: .same(proto: "locale"),
    19: .same(proto: "userResume"),
    20: .same(proto: "lastUpdateTime"),
    21: .same(proto: "lastLoginTime"),
    22: .same(proto: "userData"),
    23: .same(proto: "registerTime"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _project: String = String()
    var _username: String = String()
    var _password: String = String()
    var _nickname: String = String()
    var _realname: String = String()
    var _gender: Int32 = 0
    var _birthday: String = String()
    var _email: String = String()
    var _cellphone: String = String()
    var _timeZone: Int32 = 0
    var _headImgURL: String = String()
    var _locale: String = String()
    var _userResume: String = String()
    var _lastUpdateTime: Int64 = 0
    var _lastLoginTime: Int64 = 0
    var _userData: Dictionary<String,String> = [:]
    var _registerTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _project = source._project
      _username = source._username
      _password = source._password
      _nickname = source._nickname
      _realname = source._realname
      _gender = source._gender
      _birthday = source._birthday
      _email = source._email
      _cellphone = source._cellphone
      _timeZone = source._timeZone
      _headImgURL = source._headImgURL
      _locale = source._locale
      _userResume = source._userResume
      _lastUpdateTime = source._lastUpdateTime
      _lastLoginTime = source._lastLoginTime
      _userData = source._userData
      _registerTime = source._registerTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserEx) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._project != other_storage._project {return false}
        if _storage._username != other_storage._username {return false}
        if _storage._password != other_storage._password {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._realname != other_storage._realname {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._birthday != other_storage._birthday {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._cellphone != other_storage._cellphone {return false}
        if _storage._timeZone != other_storage._timeZone {return false}
        if _storage._headImgURL != other_storage._headImgURL {return false}
        if _storage._locale != other_storage._locale {return false}
        if _storage._userResume != other_storage._userResume {return false}
        if _storage._lastUpdateTime != other_storage._lastUpdateTime {return false}
        if _storage._lastLoginTime != other_storage._lastLoginTime {return false}
        if _storage._userData != other_storage._userData {return false}
        if _storage._registerTime != other_storage._registerTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Level"),
    6: .same(proto: "UUID"),
    7: .same(proto: "UserName"),
    8: .same(proto: "Nickname"),
    9: .same(proto: "RealName"),
    10: .same(proto: "HeadImgURL"),
    11: .same(proto: "UserResume"),
    12: .same(proto: "Language"),
    13: .same(proto: "IsAI"),
    14: .same(proto: "Gender"),
    15: .same(proto: "State"),
    30: .same(proto: "Community"),
  ]

  fileprivate class _StorageClass {
    var _level: Int32 = 0
    var _uuid: String = String()
    var _userName: String = String()
    var _nickname: String = String()
    var _realName: String = String()
    var _headImgURL: String = String()
    var _userResume: String = String()
    var _language: String = String()
    var _isAi: Bool = false
    var _gender: Int32 = 0
    var _state: Int64 = 0
    var _community: Bbproto_PUserBaseCommunity? = nil

    init() {}

    init(copying source: _StorageClass) {
      _level = source._level
      _uuid = source._uuid
      _userName = source._userName
      _nickname = source._nickname
      _realName = source._realName
      _headImgURL = source._headImgURL
      _userResume = source._userResume
      _language = source._language
      _isAi = source._isAi
      _gender = source._gender
      _state = source._state
      _community = source._community
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserBase) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._level != other_storage._level {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._userName != other_storage._userName {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._realName != other_storage._realName {return false}
        if _storage._headImgURL != other_storage._headImgURL {return false}
        if _storage._userResume != other_storage._userResume {return false}
        if _storage._language != other_storage._language {return false}
        if _storage._isAi != other_storage._isAi {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._community != other_storage._community {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserBaseList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserBaseList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserBaseCommunity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FollowTime"),
    2: .same(proto: "BlacklistTime"),
    3: .same(proto: "ForbidBegTime"),
    4: .same(proto: "ForbidEndTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserBaseCommunity) -> Bool {
    if self.followTime != other.followTime {return false}
    if self.blacklistTime != other.blacklistTime {return false}
    if self.forbidBegTime != other.forbidBegTime {return false}
    if self.forbidEndTime != other.forbidEndTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPhoneMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPhoneMap) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "cellphone"),
    3: .same(proto: "wechat"),
    4: .same(proto: "weibo"),
    5: .same(proto: "facebook"),
    6: .same(proto: "google"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccount) -> Bool {
    if self.cellphone != other.cellphone {return false}
    if self.wechat != other.wechat {return false}
    if self.weibo != other.weibo {return false}
    if self.facebook != other.facebook {return false}
    if self.google != other.google {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLevelInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "levelType"),
    2: .same(proto: "mapRight"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLevelInfo) -> Bool {
    if self.levelType != other.levelType {return false}
    if self.mapRight != other.mapRight {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLevelInfoEx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "levelInfo"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _levelInfo: Bbproto_PLevelInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _levelInfo = source._levelInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PLevelInfoEx) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._levelInfo != other_storage._levelInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLevelInfos: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "failUuid"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLevelInfos) -> Bool {
    if self.list != other.list {return false}
    if self.failUuid != other.failUuid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLiveRemind: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offOn"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLiveRemind) -> Bool {
    if self.offOn != other.offOn {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountInitInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authStatus"),
    2: .same(proto: "cellphone"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountInitInfo) -> Bool {
    if self.authStatus != other.authStatus {return false}
    if self.cellphone != other.cellphone {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBackImage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "objectKey"),
    2: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBackImage) -> Bool {
    if self.objectKey != other.objectKey {return false}
    if self.url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBackThumbImageList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBackThumbImageList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReadNameAuthInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "authStatus"),
    3: .same(proto: "readName"),
    4: .same(proto: "birthday"),
    5: .same(proto: "idCardNo"),
    6: .same(proto: "idCardImg"),
    7: .same(proto: "authTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReadNameAuthInfo) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.authStatus != other.authStatus {return false}
    if self.readName != other.readName {return false}
    if self.birthday != other.birthday {return false}
    if self.idCardNo != other.idCardNo {return false}
    if self.idCardImg != other.idCardImg {return false}
    if self.authTime != other.authTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReadNameAuthInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReadNameAuthInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReadNameAuthInfoCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReadNameAuthInfoCount) -> Bool {
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPrivacyInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "myFans"),
    2: .same(proto: "myAttention"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPrivacyInfo) -> Bool {
    if self.myFans != other.myFans {return false}
    if self.myAttention != other.myAttention {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLanguageInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLanguageInfo) -> Bool {
    if self.language != other.language {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLinkInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLinkInfo) -> Bool {
    if self.type != other.type {return false}
    if self.url != other.url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLinkInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLinkInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountNewsPersonInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friendCnt"),
    2: .same(proto: "followCnt"),
    3: .same(proto: "fansCnt"),
    4: .same(proto: "textCnt"),
    5: .same(proto: "imageCnt"),
    6: .same(proto: "audioCnt"),
    7: .same(proto: "videoCnt"),
    8: .same(proto: "CommunityID"),
    9: .same(proto: "user"),
    10: .same(proto: "followship"),
    11: .same(proto: "friend"),
    12: .same(proto: "linkInfos"),
    13: .same(proto: "supervisor"),
  ]

  fileprivate class _StorageClass {
    var _friendCnt: Int32 = 0
    var _followCnt: Int32 = 0
    var _fansCnt: Int32 = 0
    var _textCnt: Int32 = 0
    var _imageCnt: Int32 = 0
    var _audioCnt: Int32 = 0
    var _videoCnt: Int32 = 0
    var _communityID: String = String()
    var _user: Bbproto_PUser? = nil
    var _followship: Int32 = 0
    var _friend: Bool = false
    var _linkInfos: Bbproto_PLinkInfoList? = nil
    var _supervisor: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _friendCnt = source._friendCnt
      _followCnt = source._followCnt
      _fansCnt = source._fansCnt
      _textCnt = source._textCnt
      _imageCnt = source._imageCnt
      _audioCnt = source._audioCnt
      _videoCnt = source._videoCnt
      _communityID = source._communityID
      _user = source._user
      _followship = source._followship
      _friend = source._friend
      _linkInfos = source._linkInfos
      _supervisor = source._supervisor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountNewsPersonInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._friendCnt != other_storage._friendCnt {return false}
        if _storage._followCnt != other_storage._followCnt {return false}
        if _storage._fansCnt != other_storage._fansCnt {return false}
        if _storage._textCnt != other_storage._textCnt {return false}
        if _storage._imageCnt != other_storage._imageCnt {return false}
        if _storage._audioCnt != other_storage._audioCnt {return false}
        if _storage._videoCnt != other_storage._videoCnt {return false}
        if _storage._communityID != other_storage._communityID {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._followship != other_storage._followship {return false}
        if _storage._friend != other_storage._friend {return false}
        if _storage._linkInfos != other_storage._linkInfos {return false}
        if _storage._supervisor != other_storage._supervisor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountChatPersonInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "communityId"),
    2: .same(proto: "communityName"),
    3: .same(proto: "communityIcon"),
    4: .same(proto: "Introduce"),
    5: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _communityID: String = String()
    var _communityName: String = String()
    var _communityIcon: String = String()
    var _introduce: String = String()
    var _user: Bbproto_PUser? = nil

    init() {}

    init(copying source: _StorageClass) {
      _communityID = source._communityID
      _communityName = source._communityName
      _communityIcon = source._communityIcon
      _introduce = source._introduce
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountChatPersonInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._communityID != other_storage._communityID {return false}
        if _storage._communityName != other_storage._communityName {return false}
        if _storage._communityIcon != other_storage._communityIcon {return false}
        if _storage._introduce != other_storage._introduce {return false}
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoMemberTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tagID"),
    2: .same(proto: "name"),
    3: .same(proto: "image"),
    4: .same(proto: "type"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoMemberTag) -> Bool {
    if self.tagID != other.tagID {return false}
    if self.name != other.name {return false}
    if self.image != other.image {return false}
    if self.type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoMemberTagList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoMemberTagList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoMember: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "dispname"),
    3: .same(proto: "position"),
    4: .same(proto: "portrait"),
    5: .same(proto: "tags"),
    6: .same(proto: "background"),
    7: .same(proto: "birthday"),
    8: .same(proto: "birthplace"),
    9: .same(proto: "introduction"),
    10: .same(proto: "joinTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoMember) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.dispname != other.dispname {return false}
    if self.position != other.position {return false}
    if self.portrait != other.portrait {return false}
    if self.tags != other.tags {return false}
    if self.background != other.background {return false}
    if self.birthday != other.birthday {return false}
    if self.birthplace != other.birthplace {return false}
    if self.introduction != other.introduction {return false}
    if self.joinTime != other.joinTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoMemberList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "bases"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoMemberList) -> Bool {
    if self.list != other.list {return false}
    if self.bases != other.bases {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fans"),
    2: .same(proto: "user"),
    3: .same(proto: "communityID"),
    4: .same(proto: "relationship"),
    5: .same(proto: "bigBackImage"),
    6: .same(proto: "thumbBackImage"),
    7: .same(proto: "followers"),
  ]

  fileprivate class _StorageClass {
    var _fans: Int32 = 0
    var _user: Bbproto_PUserBase? = nil
    var _communityID: String = String()
    var _relationship: Int32 = 0
    var _bigBackImage: String = String()
    var _thumbBackImage: String = String()
    var _followers: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _fans = source._fans
      _user = source._user
      _communityID = source._communityID
      _relationship = source._relationship
      _bigBackImage = source._bigBackImage
      _thumbBackImage = source._thumbBackImage
      _followers = source._followers
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoBase) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._fans != other_storage._fans {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._communityID != other_storage._communityID {return false}
        if _storage._relationship != other_storage._relationship {return false}
        if _storage._bigBackImage != other_storage._bigBackImage {return false}
        if _storage._thumbBackImage != other_storage._thumbBackImage {return false}
        if _storage._followers != other_storage._followers {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserSupervisor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "supervisor"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _supervisor: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _supervisor = source._supervisor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserSupervisor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._supervisor != other_storage._supervisor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserSupervisorList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserSupervisorList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLevelInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLevelInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoMemberBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "supervisor"),
    3: .same(proto: "ubase"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PAccountVoMember? = nil
    var _supervisor: Bbproto_PUserBase? = nil
    var _ubase: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _supervisor = source._supervisor
      _ubase = source._ubase
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoMemberBase) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._supervisor != other_storage._supervisor {return false}
        if _storage._ubase != other_storage._ubase {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountVoTabs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tabs"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountVoTabs) -> Bool {
    if self.tabs != other.tabs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

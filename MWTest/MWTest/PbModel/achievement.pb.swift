/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: achievement.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PAchievementTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementTypes"

  ///总成就点数
  var totalPoints: Int32 = 0

  ///已获得成就点数
  var gainPoints: Int32 = 0

  var data: [Bbproto_PAchievementType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.totalPoints)
      case 2: try decoder.decodeSingularInt32Field(value: &self.gainPoints)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPoints, fieldNumber: 1)
    }
    if self.gainPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.gainPoints, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementType"

  ///成就大类型ID
  var id: Int32 = 0

  ///成就大类型名称
  var title: String = String()

  ///此类别总成就点数
  var totalPoints: Int32 = 0

  ///此类别已获得成就点数
  var gainPoints: Int32 = 0

  ///子成就
  var sub: [Bbproto_PAchievementSubType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.totalPoints)
      case 4: try decoder.decodeSingularInt32Field(value: &self.gainPoints)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.sub)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.totalPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPoints, fieldNumber: 3)
    }
    if self.gainPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.gainPoints, fieldNumber: 4)
    }
    if !self.sub.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sub, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementSubType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementSubType"

  /// 成就子类型ID
  var id: Int32 = 0

  ///成就标题
  var title: String = String()

  ///成就描述
  var desc: String = String()

  ///达成可获得的成就点
  var points: Int32 = 0

  ///完成进度
  var complete: Int32 = 0

  var total: Int32 = 0

  ///达成时间，unix时间戳，秒
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.desc)
      case 5: try decoder.decodeSingularInt32Field(value: &self.points)
      case 6: try decoder.decodeSingularInt32Field(value: &self.complete)
      case 7: try decoder.decodeSingularInt32Field(value: &self.total)
      case 8: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if self.points != 0 {
      try visitor.visitSingularInt32Field(value: self.points, fieldNumber: 5)
    }
    if self.complete != 0 {
      try visitor.visitSingularInt32Field(value: self.complete, fieldNumber: 6)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 7)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementPKTypes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementPKTypes"

  ///双方已获得成就点数
  var myPoints: Int32 = 0

  var hePoints: Int32 = 0

  ///he的头像昵称、游戏化等级信息
  var nickname: String = String()

  var icon: String = String()

  var level: Int32 = 0

  var data: [Bbproto_PAchievementPKType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.myPoints)
      case 2: try decoder.decodeSingularInt32Field(value: &self.hePoints)
      case 3: try decoder.decodeSingularStringField(value: &self.nickname)
      case 4: try decoder.decodeSingularStringField(value: &self.icon)
      case 5: try decoder.decodeSingularInt32Field(value: &self.level)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.myPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.myPoints, fieldNumber: 1)
    }
    if self.hePoints != 0 {
      try visitor.visitSingularInt32Field(value: self.hePoints, fieldNumber: 2)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementPKType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementPKType"

  ///成就大类型ID
  var id: Int32 = 0

  ///成就大类型名称
  var title: String = String()

  ///双方已获得成就点数
  var myPoints: Int32 = 0

  var hePoints: Int32 = 0

  ///子成就
  var sub: [Bbproto_PAchievementPKSubType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.myPoints)
      case 4: try decoder.decodeSingularInt32Field(value: &self.hePoints)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.sub)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.myPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.myPoints, fieldNumber: 3)
    }
    if self.hePoints != 0 {
      try visitor.visitSingularInt32Field(value: self.hePoints, fieldNumber: 4)
    }
    if !self.sub.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sub, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementPKSubType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementPKSubType"

  ///成就子类型ID
  var id: Int32 = 0

  ///成就标题
  var title: String = String()

  ///双方已获得成就点数
  var myPoints: Int32 = 0

  var hePoints: Int32 = 0

  ///达成时间，unix时间戳，秒
  var myTime: Int64 = 0

  var heTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.myPoints)
      case 4: try decoder.decodeSingularInt32Field(value: &self.hePoints)
      case 5: try decoder.decodeSingularInt64Field(value: &self.myTime)
      case 6: try decoder.decodeSingularInt64Field(value: &self.heTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.myPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.myPoints, fieldNumber: 3)
    }
    if self.hePoints != 0 {
      try visitor.visitSingularInt32Field(value: self.hePoints, fieldNumber: 4)
    }
    if self.myTime != 0 {
      try visitor.visitSingularInt64Field(value: self.myTime, fieldNumber: 5)
    }
    if self.heTime != 0 {
      try visitor.visitSingularInt64Field(value: self.heTime, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementFriends: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementFriends"

  var data: [Bbproto_PAchievementFriend] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAchievementFriend: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAchievementFriend"

  ///UUID
  var uuid: String = String()

  ///好友昵称
  var name: String = String()

  ///好友头像URL
  var icon: String = String()

  ///用户等级
  var level: Int32 = 0

  ///好友成就点数
  var points: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.icon)
      case 4: try decoder.decodeSingularInt32Field(value: &self.level)
      case 5: try decoder.decodeSingularInt32Field(value: &self.points)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 3)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 4)
    }
    if self.points != 0 {
      try visitor.visitSingularInt32Field(value: self.points, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PAchievementTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalPoints"),
    2: .same(proto: "gainPoints"),
    3: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementTypes) -> Bool {
    if self.totalPoints != other.totalPoints {return false}
    if self.gainPoints != other.gainPoints {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "totalPoints"),
    4: .same(proto: "gainPoints"),
    5: .same(proto: "sub"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementType) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.totalPoints != other.totalPoints {return false}
    if self.gainPoints != other.gainPoints {return false}
    if self.sub != other.sub {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementSubType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "desc"),
    5: .same(proto: "points"),
    6: .same(proto: "complete"),
    7: .same(proto: "total"),
    8: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementSubType) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.desc != other.desc {return false}
    if self.points != other.points {return false}
    if self.complete != other.complete {return false}
    if self.total != other.total {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementPKTypes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "myPoints"),
    2: .same(proto: "hePoints"),
    3: .same(proto: "nickname"),
    4: .same(proto: "icon"),
    5: .same(proto: "level"),
    6: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementPKTypes) -> Bool {
    if self.myPoints != other.myPoints {return false}
    if self.hePoints != other.hePoints {return false}
    if self.nickname != other.nickname {return false}
    if self.icon != other.icon {return false}
    if self.level != other.level {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementPKType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "myPoints"),
    4: .same(proto: "hePoints"),
    5: .same(proto: "sub"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementPKType) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.myPoints != other.myPoints {return false}
    if self.hePoints != other.hePoints {return false}
    if self.sub != other.sub {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementPKSubType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "myPoints"),
    4: .same(proto: "hePoints"),
    5: .same(proto: "myTime"),
    6: .same(proto: "heTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementPKSubType) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.myPoints != other.myPoints {return false}
    if self.hePoints != other.hePoints {return false}
    if self.myTime != other.myTime {return false}
    if self.heTime != other.heTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementFriends: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementFriends) -> Bool {
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAchievementFriend: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .same(proto: "icon"),
    4: .same(proto: "level"),
    5: .same(proto: "points"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAchievementFriend) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.name != other.name {return false}
    if self.icon != other.icon {return false}
    if self.level != other.level {return false}
    if self.points != other.points {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

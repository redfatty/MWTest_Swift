/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: chat.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PWkToken: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PWkToken"

  /// 百川应用AppSecret
  var appAccessToken: String = String()

  /// 应用domain（已废弃）
  var domain: String = String()

  /// 百川应用appKey
  var appKey: String = String()

  /// 用户openId（已废弃）
  var openID: Int64 = 0

  /// 随机数（已废弃）
  var nonce: String = String()

  /// 时间戳（已废弃）
  var timestamp: Int64 = 0

  /// 登录百川密码
  var signature: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appAccessToken)
      case 2: try decoder.decodeSingularStringField(value: &self.domain)
      case 3: try decoder.decodeSingularStringField(value: &self.appKey)
      case 4: try decoder.decodeSingularInt64Field(value: &self.openID)
      case 5: try decoder.decodeSingularStringField(value: &self.nonce)
      case 6: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 7: try decoder.decodeSingularStringField(value: &self.signature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appAccessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.appAccessToken, fieldNumber: 1)
    }
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 2)
    }
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 3)
    }
    if self.openID != 0 {
      try visitor.visitSingularInt64Field(value: self.openID, fieldNumber: 4)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularStringField(value: self.nonce, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PConversation: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PConversation"

  /// 会话ID
  var conversationID: String = String()

  /// 会话创建者（已废弃）
  var openID: Int64 = 0

  /// 会话类型（已废弃）
  var type: Int32 = 0

  /// 会话图标url地址（已废弃）
  var icon: String = String()

  /// 会话名称
  var title: String = String()

  /// 会话tag：0-可以聊天，1-不能聊天（已不是好友关系）（已废弃）
  var tag: Int64 = 0

  /// 群成员数（已废弃）
  var memberLimit: Int32 = 0

  /// 0非大群，1大群  （已废弃）
  var superGroup: Int32 = 0

  /// 父会话id，默认0（已废弃）
  var parentID: String = String()

  /// 是否 父会话，0-否，默认；1-是父会话（已废弃）
  var nodeType: Int32 = 0

  /// 会话的成员列表openId（已废弃）
  var members: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.conversationID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.openID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.icon)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularInt64Field(value: &self.tag)
      case 7: try decoder.decodeSingularInt32Field(value: &self.memberLimit)
      case 8: try decoder.decodeSingularInt32Field(value: &self.superGroup)
      case 9: try decoder.decodeSingularStringField(value: &self.parentID)
      case 10: try decoder.decodeSingularInt32Field(value: &self.nodeType)
      case 11: try decoder.decodeRepeatedInt64Field(value: &self.members)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conversationID.isEmpty {
      try visitor.visitSingularStringField(value: self.conversationID, fieldNumber: 1)
    }
    if self.openID != 0 {
      try visitor.visitSingularInt64Field(value: self.openID, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if self.tag != 0 {
      try visitor.visitSingularInt64Field(value: self.tag, fieldNumber: 6)
    }
    if self.memberLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.memberLimit, fieldNumber: 7)
    }
    if self.superGroup != 0 {
      try visitor.visitSingularInt32Field(value: self.superGroup, fieldNumber: 8)
    }
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 9)
    }
    if self.nodeType != 0 {
      try visitor.visitSingularInt32Field(value: self.nodeType, fieldNumber: 10)
    }
    if !self.members.isEmpty {
      try visitor.visitPackedInt64Field(value: self.members, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PJoinRoom: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PJoinRoom"

  /// 状态吗
  var code: Int64 = 0

  /// 旧的聊天室ID
  var oldRoomID: String = String()

  /// 旧的聊天室名称
  var oldRoomName: String = String()

  /// 新的聊天室ID
  var newRoomID: String = String()

  /// 新的聊天室名称
  var newRoomName: String = String()

  /// 前面排队人数
  var queueSize: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.oldRoomID)
      case 3: try decoder.decodeSingularStringField(value: &self.oldRoomName)
      case 4: try decoder.decodeSingularStringField(value: &self.newRoomID)
      case 5: try decoder.decodeSingularStringField(value: &self.newRoomName)
      case 6: try decoder.decodeSingularInt32Field(value: &self.queueSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt64Field(value: self.code, fieldNumber: 1)
    }
    if !self.oldRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.oldRoomID, fieldNumber: 2)
    }
    if !self.oldRoomName.isEmpty {
      try visitor.visitSingularStringField(value: self.oldRoomName, fieldNumber: 3)
    }
    if !self.newRoomID.isEmpty {
      try visitor.visitSingularStringField(value: self.newRoomID, fieldNumber: 4)
    }
    if !self.newRoomName.isEmpty {
      try visitor.visitSingularStringField(value: self.newRoomName, fieldNumber: 5)
    }
    if self.queueSize != 0 {
      try visitor.visitSingularInt32Field(value: self.queueSize, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCommunity: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunity"

  /// 超级管理员uuid
  var ownerUuid: String = String()

  /// 社区ID
  var communityID: String = String()

  /// 社区名称
  var communityName: String = String()

  /// 社区头像url
  var communityIcon: String = String()

  /// 普通管理员uuid
  var uuids: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerUuid)
      case 2: try decoder.decodeSingularStringField(value: &self.communityID)
      case 3: try decoder.decodeSingularStringField(value: &self.communityName)
      case 4: try decoder.decodeSingularStringField(value: &self.communityIcon)
      case 5: try decoder.decodeRepeatedStringField(value: &self.uuids)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerUuid, fieldNumber: 1)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 2)
    }
    if !self.communityName.isEmpty {
      try visitor.visitSingularStringField(value: self.communityName, fieldNumber: 3)
    }
    if !self.communityIcon.isEmpty {
      try visitor.visitSingularStringField(value: self.communityIcon, fieldNumber: 4)
    }
    if !self.uuids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uuids, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PMemberList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMemberList"

  /// 成员数量
  var size: Int32 = 0

  /// 成员信息
  var list: [Bbproto_PMember] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.size)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PMember: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMember"

  /// 成员信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 0表示不是好友，1表示是好友
  var isFriend: Int32 {
    get {return _storage._isFriend}
    set {_uniqueStorage()._isFriend = newValue}
  }

  /// 0表示未关注，1表示已关注
  var isFollow: Int32 {
    get {return _storage._isFollow}
    set {_uniqueStorage()._isFollow = newValue}
  }

  /// 0表示成员，1表示是管理员，2表示是超级管理员
  var isManager: Int32 {
    get {return _storage._isManager}
    set {_uniqueStorage()._isManager = newValue}
  }

  /// 游戏化等级
  var gameLevel: Int32 {
    get {return _storage._gameLevel}
    set {_uniqueStorage()._gameLevel = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._isFriend)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._isFollow)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._isManager)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._gameLevel)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._isFriend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isFriend, fieldNumber: 2)
      }
      if _storage._isFollow != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isFollow, fieldNumber: 3)
      }
      if _storage._isManager != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isManager, fieldNumber: 4)
      }
      if _storage._gameLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gameLevel, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PEachMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PEachMsg"

  ///指定消息接收的成员uuid列表,成员之间用逗号(,)隔开。
  var receiverUuid: String = String()

  var alertContent: String = String()

  var info: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.receiverUuid)
      case 2: try decoder.decodeSingularStringField(value: &self.alertContent)
      case 3: try decoder.decodeSingularStringField(value: &self.info)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.receiverUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverUuid, fieldNumber: 1)
    }
    if !self.alertContent.isEmpty {
      try visitor.visitSingularStringField(value: self.alertContent, fieldNumber: 2)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PMoreMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMoreMsg"

  /// 推送消息的标题。
  var title: String = String()

  /// 推送消息的msgid，该字段是阿里悟空中要用，尚未知其含义，先随便填充一个值1000。
  var msgid: String = String()

  /// 推送消息的描述。
  var description_p: String = String()

  /// 成员信息
  var list: [Bbproto_PEachMsg] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.msgid)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.msgid.isEmpty {
      try visitor.visitSingularStringField(value: self.msgid, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PMemberServList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMemberServList"

  /// 成员数量
  var size: Int32 = 0

  /// 成员信息
  var member: [Bbproto_PMemberServ] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.size)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.member)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 1)
    }
    if !self.member.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.member, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PMemberServ: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMemberServ"

  /// 成员信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 第几位
  var spot: Int32 {
    get {return _storage._spot}
    set {_uniqueStorage()._spot = newValue}
  }

  /// 加入时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 0表示成员，1表示是管理员，2表示是超级管理员
  var isManager: Int32 {
    get {return _storage._isManager}
    set {_uniqueStorage()._isManager = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._spot)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._isManager)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._spot != 0 {
        try visitor.visitSingularInt32Field(value: _storage._spot, fieldNumber: 2)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 3)
      }
      if _storage._isManager != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isManager, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PRole: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRole"

  /// 角色:0表示成员，1表示是管理员，2表示是超级管理员
  var role: Int32 = 0

  /// 社区ID
  var communityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.role)
      case 2: try decoder.decodeSingularStringField(value: &self.communityID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.role != 0 {
      try visitor.visitSingularInt32Field(value: self.role, fieldNumber: 1)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFriendRemark: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFriendRemark"

  /// 好友的uuid
  var uuid: String = String()

  /// 好友名称的备注
  var remark: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.remark)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFriendRemarkList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFriendRemarkList"

  /// 好友名称备注列表
  var friends: [Bbproto_PFriendRemark] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.friends)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.friends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.friends, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PWkToken: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appAccessToken"),
    2: .same(proto: "domain"),
    3: .same(proto: "appKey"),
    4: .same(proto: "openId"),
    5: .same(proto: "nonce"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "signature"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PWkToken) -> Bool {
    if self.appAccessToken != other.appAccessToken {return false}
    if self.domain != other.domain {return false}
    if self.appKey != other.appKey {return false}
    if self.openID != other.openID {return false}
    if self.nonce != other.nonce {return false}
    if self.timestamp != other.timestamp {return false}
    if self.signature != other.signature {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PConversation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "conversationId"),
    2: .same(proto: "openId"),
    3: .same(proto: "type"),
    4: .same(proto: "icon"),
    5: .same(proto: "title"),
    6: .same(proto: "tag"),
    7: .same(proto: "memberLimit"),
    8: .same(proto: "superGroup"),
    9: .same(proto: "parentId"),
    10: .same(proto: "nodeType"),
    11: .same(proto: "members"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PConversation) -> Bool {
    if self.conversationID != other.conversationID {return false}
    if self.openID != other.openID {return false}
    if self.type != other.type {return false}
    if self.icon != other.icon {return false}
    if self.title != other.title {return false}
    if self.tag != other.tag {return false}
    if self.memberLimit != other.memberLimit {return false}
    if self.superGroup != other.superGroup {return false}
    if self.parentID != other.parentID {return false}
    if self.nodeType != other.nodeType {return false}
    if self.members != other.members {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PJoinRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "oldRoomId"),
    3: .same(proto: "oldRoomName"),
    4: .same(proto: "newRoomId"),
    5: .same(proto: "newRoomName"),
    6: .same(proto: "queueSize"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PJoinRoom) -> Bool {
    if self.code != other.code {return false}
    if self.oldRoomID != other.oldRoomID {return false}
    if self.oldRoomName != other.oldRoomName {return false}
    if self.newRoomID != other.newRoomID {return false}
    if self.newRoomName != other.newRoomName {return false}
    if self.queueSize != other.queueSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ownerUuid"),
    2: .same(proto: "communityId"),
    3: .same(proto: "communityName"),
    4: .same(proto: "communityIcon"),
    5: .same(proto: "uuids"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunity) -> Bool {
    if self.ownerUuid != other.ownerUuid {return false}
    if self.communityID != other.communityID {return false}
    if self.communityName != other.communityName {return false}
    if self.communityIcon != other.communityIcon {return false}
    if self.uuids != other.uuids {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMemberList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMemberList) -> Bool {
    if self.size != other.size {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMember: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "IsFriend"),
    3: .same(proto: "IsFollow"),
    4: .same(proto: "IsManager"),
    5: .same(proto: "gameLevel"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _isFriend: Int32 = 0
    var _isFollow: Int32 = 0
    var _isManager: Int32 = 0
    var _gameLevel: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _isFriend = source._isFriend
      _isFollow = source._isFollow
      _isManager = source._isManager
      _gameLevel = source._gameLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PMember) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._isFriend != other_storage._isFriend {return false}
        if _storage._isFollow != other_storage._isFollow {return false}
        if _storage._isManager != other_storage._isManager {return false}
        if _storage._gameLevel != other_storage._gameLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PEachMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "receiverUUID"),
    2: .same(proto: "alertContent"),
    3: .same(proto: "info"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PEachMsg) -> Bool {
    if self.receiverUuid != other.receiverUuid {return false}
    if self.alertContent != other.alertContent {return false}
    if self.info != other.info {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMoreMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "msgid"),
    3: .same(proto: "description"),
    4: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMoreMsg) -> Bool {
    if self.title != other.title {return false}
    if self.msgid != other.msgid {return false}
    if self.description_p != other.description_p {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMemberServList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .same(proto: "member"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMemberServList) -> Bool {
    if self.size != other.size {return false}
    if self.member != other.member {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMemberServ: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "spot"),
    3: .same(proto: "time"),
    4: .same(proto: "isManager"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _spot: Int32 = 0
    var _time: Int64 = 0
    var _isManager: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _spot = source._spot
      _time = source._time
      _isManager = source._isManager
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PMemberServ) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._spot != other_storage._spot {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._isManager != other_storage._isManager {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRole: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .same(proto: "communityId"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRole) -> Bool {
    if self.role != other.role {return false}
    if self.communityID != other.communityID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFriendRemark: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "remark"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFriendRemark) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.remark != other.remark {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFriendRemarkList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friends"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFriendRemarkList) -> Bool {
    if self.friends != other.friends {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

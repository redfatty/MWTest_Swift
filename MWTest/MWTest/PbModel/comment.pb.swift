/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comment.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 单条评论结构详细信息
struct Bbproto_PComment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PComment"

  ///评论ID
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///评论者ID
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///评论者昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  ///评论者头像
  var headImgURL: String {
    get {return _storage._headImgURL}
    set {_uniqueStorage()._headImgURL = newValue}
  }

  ///@用户ID
  var atUuid: String {
    get {return _storage._atUuid}
    set {_uniqueStorage()._atUuid = newValue}
  }

  ///@用户昵称
  var atNickname: String {
    get {return _storage._atNickname}
    set {_uniqueStorage()._atNickname = newValue}
  }

  ///保留7用于扩展
  var isShield: Bool {
    get {return _storage._isShield}
    set {_uniqueStorage()._isShield = newValue}
  }

  ///请求者是否赞过或踩过，1:赞过,-1:踩过，否则为0
  var vote: Int32 {
    get {return _storage._vote}
    set {_uniqueStorage()._vote = newValue}
  }

  ///下一级子评论数
  var children: Int32 {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  ///赞数
  var upvotes: Int32 {
    get {return _storage._upvotes}
    set {_uniqueStorage()._upvotes = newValue}
  }

  ///踩数
  var downvotes: Int32 {
    get {return _storage._downvotes}
    set {_uniqueStorage()._downvotes = newValue}
  }

  ///评论创建时间
  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  ///评论文本内容
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音信息
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 4: try decoder.decodeSingularStringField(value: &_storage._headImgURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._atUuid)
        case 6: try decoder.decodeSingularStringField(value: &_storage._atNickname)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._isShield)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._vote)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._children)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._upvotes)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._downvotes)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._text)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._audio)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 3)
      }
      if !_storage._headImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImgURL, fieldNumber: 4)
      }
      if !_storage._atUuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._atUuid, fieldNumber: 5)
      }
      if !_storage._atNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._atNickname, fieldNumber: 6)
      }
      if _storage._isShield != false {
        try visitor.visitSingularBoolField(value: _storage._isShield, fieldNumber: 8)
      }
      if _storage._vote != 0 {
        try visitor.visitSingularInt32Field(value: _storage._vote, fieldNumber: 9)
      }
      if _storage._children != 0 {
        try visitor.visitSingularInt32Field(value: _storage._children, fieldNumber: 10)
      }
      if _storage._upvotes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._upvotes, fieldNumber: 11)
      }
      if _storage._downvotes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._downvotes, fieldNumber: 12)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 13)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 14)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 单条评论结构详细信息(包含评论者等级)
struct Bbproto_PCommentExt: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommentExt"

  ///评论ID
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///评论者ID
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///评论者昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  ///评论者头像
  var headImgURL: String {
    get {return _storage._headImgURL}
    set {_uniqueStorage()._headImgURL = newValue}
  }

  ///@用户ID
  var atUuid: String {
    get {return _storage._atUuid}
    set {_uniqueStorage()._atUuid = newValue}
  }

  ///@用户昵称
  var atNickname: String {
    get {return _storage._atNickname}
    set {_uniqueStorage()._atNickname = newValue}
  }

  ///评论者等级
  var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  ///该评论是否被屏蔽
  var isShield: Bool {
    get {return _storage._isShield}
    set {_uniqueStorage()._isShield = newValue}
  }

  ///请求者是否赞过或踩过，1:赞过,-1:踩过，否则为0
  var vote: Int32 {
    get {return _storage._vote}
    set {_uniqueStorage()._vote = newValue}
  }

  ///下一级子评论数
  var children: Int32 {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  ///赞数
  var upvotes: Int32 {
    get {return _storage._upvotes}
    set {_uniqueStorage()._upvotes = newValue}
  }

  ///踩数
  var downvotes: Int32 {
    get {return _storage._downvotes}
    set {_uniqueStorage()._downvotes = newValue}
  }

  ///评论创建时间
  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  ///评论文本内容
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音信息
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  ///下一级的一条评论
  var subComment: Bbproto_PComment {
    get {return _storage._subComment ?? Bbproto_PComment()}
    set {_uniqueStorage()._subComment = newValue}
  }
  /// Returns true if `subComment` has been explicitly set.
  var hasSubComment: Bool {return _storage._subComment != nil}
  /// Clears the value of `subComment`. Subsequent reads from it will return its default value.
  mutating func clearSubComment() {_storage._subComment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 4: try decoder.decodeSingularStringField(value: &_storage._headImgURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._atUuid)
        case 6: try decoder.decodeSingularStringField(value: &_storage._atNickname)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._level)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._isShield)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._vote)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._children)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._upvotes)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._downvotes)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 14: try decoder.decodeSingularStringField(value: &_storage._text)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._audio)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._subComment)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 3)
      }
      if !_storage._headImgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImgURL, fieldNumber: 4)
      }
      if !_storage._atUuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._atUuid, fieldNumber: 5)
      }
      if !_storage._atNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._atNickname, fieldNumber: 6)
      }
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 7)
      }
      if _storage._isShield != false {
        try visitor.visitSingularBoolField(value: _storage._isShield, fieldNumber: 8)
      }
      if _storage._vote != 0 {
        try visitor.visitSingularInt32Field(value: _storage._vote, fieldNumber: 9)
      }
      if _storage._children != 0 {
        try visitor.visitSingularInt32Field(value: _storage._children, fieldNumber: 10)
      }
      if _storage._upvotes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._upvotes, fieldNumber: 11)
      }
      if _storage._downvotes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._downvotes, fieldNumber: 12)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 13)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 14)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._subComment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 某个用户等级的评论列表
struct Bbproto_PCommentLevel: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommentLevel"

  ///等级
  var level: Int32 = 0

  ///评论数
  var count: Int32 = 0

  ///交互数（@次数）
  var interactions: Int32 = 0

  ///评论内容
  var comments: [Bbproto_PComment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.level)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      case 3: try decoder.decodeSingularInt32Field(value: &self.interactions)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.comments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.interactions != 0 {
      try visitor.visitSingularInt32Field(value: self.interactions, fieldNumber: 3)
    }
    if !self.comments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.comments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCommentList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommentList"

  var comments: [Bbproto_PCommentLevel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.comments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.comments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.comments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 评论列表
struct Bbproto_PCommentExtList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommentExtList"

  var comments: [Bbproto_PCommentExt] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.comments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.comments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.comments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 客户端发给服务端的评论结构
struct Bbproto_PClientComment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PClientComment"

  ///发表评论的用户ID
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///二级评论中@的用户ID.一级评论可不填
  var atUuid: String {
    get {return _storage._atUuid}
    set {_uniqueStorage()._atUuid = newValue}
  }

  ///评论文本内容
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音信息
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularStringField(value: &_storage._atUuid)
        case 3: try decoder.decodeSingularStringField(value: &_storage._text)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._audio)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if !_storage._atUuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._atUuid, fieldNumber: 2)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 3)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 客户端发给服务端的评论结构
struct Bbproto_PClientCommentList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PClientCommentList"

  ///评论的帖子ID
  var postID: String = String()

  ///一级评论填帖子ID, 二级评论填目标评论的ID
  var parentID: String = String()

  var list: [Bbproto_PClientComment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.postID)
      case 2: try decoder.decodeSingularStringField(value: &self.parentID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 2)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 批量判断评论是否被用户点赞过
struct Bbproto_PBetchCommentVoteExist: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBetchCommentVoteExist"

  ///评论ID
  var id: String = String()

  ///是否被赞、踩过. 0:没赞没踩; 1:赞过; 2:踩过
  var hasVote_p: [Int32] = []

  ///被赞次数
  var upVoteCnt: Int32 = 0

  ///被踩次数
  var downVoteCnt: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeRepeatedInt32Field(value: &self.hasVote_p)
      case 3: try decoder.decodeSingularInt32Field(value: &self.upVoteCnt)
      case 4: try decoder.decodeSingularInt32Field(value: &self.downVoteCnt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.hasVote_p.isEmpty {
      try visitor.visitPackedInt32Field(value: self.hasVote_p, fieldNumber: 2)
    }
    if self.upVoteCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.upVoteCnt, fieldNumber: 3)
    }
    if self.downVoteCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.downVoteCnt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量赞踩评论
struct Bbproto_PBetchCommentVote: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBetchCommentVote"

  ///操作类型:0:赞, 1:踩, 2:取消赞, 3:取消踩
  var voteType: Int32 = 0

  ///评论ID
  var cid: String = String()

  ///点赞的uuid列表
  var uuidList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.voteType)
      case 2: try decoder.decodeSingularStringField(value: &self.cid)
      case 3: try decoder.decodeRepeatedStringField(value: &self.uuidList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.voteType != 0 {
      try visitor.visitSingularInt32Field(value: self.voteType, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.uuidList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uuidList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PVoteUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVoteUser"

  ///赞或踩的用户信息
  var uuid: String = String()

  var nickname: String = String()

  var headImgURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.nickname)
      case 3: try decoder.decodeSingularStringField(value: &self.headImgURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 2)
    }
    if !self.headImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.headImgURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PVoteUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVoteUserList"

  var user: [Bbproto_PVoteUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.user.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.user, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PInt32Array: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInt32Array"

  var array: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.array)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.array.isEmpty {
      try visitor.visitPackedInt32Field(value: self.array, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCommentBool: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommentBool"

  /// 是否开启评论/回复
  var isEnable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isEnable)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isEnable != false {
      try visitor.visitSingularBoolField(value: self.isEnable, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PComment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "nickname"),
    4: .same(proto: "headImgUrl"),
    5: .same(proto: "atUuid"),
    6: .same(proto: "atNickname"),
    8: .same(proto: "isShield"),
    9: .same(proto: "vote"),
    10: .same(proto: "children"),
    11: .same(proto: "upvotes"),
    12: .same(proto: "downvotes"),
    13: .same(proto: "createTime"),
    14: .same(proto: "text"),
    15: .same(proto: "audio"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _uuid: String = String()
    var _nickname: String = String()
    var _headImgURL: String = String()
    var _atUuid: String = String()
    var _atNickname: String = String()
    var _isShield: Bool = false
    var _vote: Int32 = 0
    var _children: Int32 = 0
    var _upvotes: Int32 = 0
    var _downvotes: Int32 = 0
    var _createTime: Int64 = 0
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _nickname = source._nickname
      _headImgURL = source._headImgURL
      _atUuid = source._atUuid
      _atNickname = source._atNickname
      _isShield = source._isShield
      _vote = source._vote
      _children = source._children
      _upvotes = source._upvotes
      _downvotes = source._downvotes
      _createTime = source._createTime
      _text = source._text
      _audio = source._audio
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PComment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._headImgURL != other_storage._headImgURL {return false}
        if _storage._atUuid != other_storage._atUuid {return false}
        if _storage._atNickname != other_storage._atNickname {return false}
        if _storage._isShield != other_storage._isShield {return false}
        if _storage._vote != other_storage._vote {return false}
        if _storage._children != other_storage._children {return false}
        if _storage._upvotes != other_storage._upvotes {return false}
        if _storage._downvotes != other_storage._downvotes {return false}
        if _storage._createTime != other_storage._createTime {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommentExt: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "nickname"),
    4: .same(proto: "headImgUrl"),
    5: .same(proto: "atUuid"),
    6: .same(proto: "atNickname"),
    7: .same(proto: "level"),
    8: .same(proto: "isShield"),
    9: .same(proto: "vote"),
    10: .same(proto: "children"),
    11: .same(proto: "upvotes"),
    12: .same(proto: "downvotes"),
    13: .same(proto: "createTime"),
    14: .same(proto: "text"),
    15: .same(proto: "audio"),
    16: .same(proto: "subComment"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _uuid: String = String()
    var _nickname: String = String()
    var _headImgURL: String = String()
    var _atUuid: String = String()
    var _atNickname: String = String()
    var _level: Int32 = 0
    var _isShield: Bool = false
    var _vote: Int32 = 0
    var _children: Int32 = 0
    var _upvotes: Int32 = 0
    var _downvotes: Int32 = 0
    var _createTime: Int64 = 0
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil
    var _subComment: Bbproto_PComment? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _nickname = source._nickname
      _headImgURL = source._headImgURL
      _atUuid = source._atUuid
      _atNickname = source._atNickname
      _level = source._level
      _isShield = source._isShield
      _vote = source._vote
      _children = source._children
      _upvotes = source._upvotes
      _downvotes = source._downvotes
      _createTime = source._createTime
      _text = source._text
      _audio = source._audio
      _subComment = source._subComment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommentExt) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._headImgURL != other_storage._headImgURL {return false}
        if _storage._atUuid != other_storage._atUuid {return false}
        if _storage._atNickname != other_storage._atNickname {return false}
        if _storage._level != other_storage._level {return false}
        if _storage._isShield != other_storage._isShield {return false}
        if _storage._vote != other_storage._vote {return false}
        if _storage._children != other_storage._children {return false}
        if _storage._upvotes != other_storage._upvotes {return false}
        if _storage._downvotes != other_storage._downvotes {return false}
        if _storage._createTime != other_storage._createTime {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        if _storage._subComment != other_storage._subComment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommentLevel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "count"),
    3: .same(proto: "interactions"),
    4: .same(proto: "comments"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommentLevel) -> Bool {
    if self.level != other.level {return false}
    if self.count != other.count {return false}
    if self.interactions != other.interactions {return false}
    if self.comments != other.comments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommentList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "comments"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommentList) -> Bool {
    if self.comments != other.comments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommentExtList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "comments"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommentExtList) -> Bool {
    if self.comments != other.comments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PClientComment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "atUuid"),
    3: .same(proto: "text"),
    4: .same(proto: "audio"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _atUuid: String = String()
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil

    init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _atUuid = source._atUuid
      _text = source._text
      _audio = source._audio
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PClientComment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._atUuid != other_storage._atUuid {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PClientCommentList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postId"),
    2: .same(proto: "parentId"),
    3: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PClientCommentList) -> Bool {
    if self.postID != other.postID {return false}
    if self.parentID != other.parentID {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBetchCommentVoteExist: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "hasVote"),
    3: .same(proto: "upVoteCnt"),
    4: .same(proto: "DownVoteCnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBetchCommentVoteExist) -> Bool {
    if self.id != other.id {return false}
    if self.hasVote_p != other.hasVote_p {return false}
    if self.upVoteCnt != other.upVoteCnt {return false}
    if self.downVoteCnt != other.downVoteCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBetchCommentVote: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "voteType"),
    2: .same(proto: "cid"),
    3: .same(proto: "uuidList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBetchCommentVote) -> Bool {
    if self.voteType != other.voteType {return false}
    if self.cid != other.cid {return false}
    if self.uuidList != other.uuidList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVoteUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "nickname"),
    3: .same(proto: "headImgUrl"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVoteUser) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.nickname != other.nickname {return false}
    if self.headImgURL != other.headImgURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVoteUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVoteUserList) -> Bool {
    if self.user != other.user {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInt32Array: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "array"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInt32Array) -> Bool {
    if self.array != other.array {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommentBool: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isEnable"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommentBool) -> Bool {
    if self.isEnable != other.isEnable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

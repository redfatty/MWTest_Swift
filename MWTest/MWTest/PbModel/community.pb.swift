/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: community.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 帖子默认标签id
enum Bbproto_ECommunityPostLabel: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 全部
  case epostLabelAll // = 0

  /// 资讯
  case epostLabelNews // = 1

  /// 精华
  case epostLabelFeatured // = 2

  /// 电竞女神	
  case epostLabelGoddess // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .epostLabelAll
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .epostLabelAll
    case 1: self = .epostLabelNews
    case 2: self = .epostLabelFeatured
    case 3: self = .epostLabelGoddess
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .epostLabelAll: return 0
    case .epostLabelNews: return 1
    case .epostLabelFeatured: return 2
    case .epostLabelGoddess: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 社区的id信息，用于批量操作
struct Bbproto_PCommunityID: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityID"

  /// 社区的全局唯一id，能用于检索社区信息
  var id: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitRepeatedStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区基础信息
struct Bbproto_PCommunityBase: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityBase"

  /// 社区创建时间
  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  /// 社区的全局唯一id，能用于检索社区信息
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 社区名字
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 社区头像地址
  var headImg: String {
    get {return _storage._headImg}
    set {_uniqueStorage()._headImg = newValue}
  }

  /// 社区创建者uuid
  var owner: String {
    get {return _storage._owner}
    set {_uniqueStorage()._owner = newValue}
  }

  /// 社区状态；0社区开启状态；1社区关闭状态；
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 用户与社区的关系，-1无关系，0为拥有者，1为管理者，2为已关注
  var membership: Int32 {
    get {return _storage._membership}
    set {_uniqueStorage()._membership = newValue}
  }

  /// 节选社区介绍的第一段文字返回给客户端
  var strIntroduce: String {
    get {return _storage._strIntroduce}
    set {_uniqueStorage()._strIntroduce = newValue}
  }

  /// 社区分类列表
  var sortList: Bbproto_PCommunitySortList {
    get {return _storage._sortList ?? Bbproto_PCommunitySortList()}
    set {_uniqueStorage()._sortList = newValue}
  }
  /// Returns true if `sortList` has been explicitly set.
  var hasSortList: Bool {return _storage._sortList != nil}
  /// Clears the value of `sortList`. Subsequent reads from it will return its default value.
  mutating func clearSortList() {_storage._sortList = nil}

  /// 社区管理员的uuid，多个以,分割
  var manager: String {
    get {return _storage._manager}
    set {_uniqueStorage()._manager = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._headImg)
        case 5: try decoder.decodeSingularStringField(value: &_storage._owner)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._membership)
        case 8: try decoder.decodeSingularStringField(value: &_storage._strIntroduce)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._sortList)
        case 10: try decoder.decodeSingularStringField(value: &_storage._manager)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._headImg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._headImg, fieldNumber: 4)
      }
      if !_storage._owner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._owner, fieldNumber: 5)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 6)
      }
      if _storage._membership != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membership, fieldNumber: 7)
      }
      if !_storage._strIntroduce.isEmpty {
        try visitor.visitSingularStringField(value: _storage._strIntroduce, fieldNumber: 8)
      }
      if let v = _storage._sortList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._manager.isEmpty {
        try visitor.visitSingularStringField(value: _storage._manager, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区基础信息列表
struct Bbproto_PCommunityBaseList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityBaseList"

  /// 我关注的社区
  var list: [Bbproto_PCommunityBase] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区资源信息
struct Bbproto_PCommunityResource: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityResource"

  /// 资源类型，txt(文字)，img(图片)，audio(音频)，video(第三方视频)，link(url)
  var type: String = String()

  /// 资源名称，(img,audio)要上传oss的资源，填充objectkey；如果是txt，存文字
  var name: String = String()

  /// 资源地址，(img,audio)oss访问地址，或者(video,link)存储的数据
  var url: String = String()

  /// 资源大小，暂时只存储语音长度，单位是ms
  var size: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      case 5: try decoder.decodeSingularStringField(value: &self.size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    if !self.size.isEmpty {
      try visitor.visitSingularStringField(value: self.size, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区资源信息列表
struct Bbproto_PCommunityResourceList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityResourceList"

  var resource: [Bbproto_PCommunityResource] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.resource)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resource.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// ---社区信件
/// 发布的论坛信件
struct Bbproto_PCommunityMailUpload: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityMailUpload"

  /// 信件正文
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 信件是否被查看
  var isView: Bool {
    get {return _storage._isView}
    set {_uniqueStorage()._isView = newValue}
  }

  /// 信件正文引用到的资源信息
  var resourcesList: Bbproto_PCommunityResourceList {
    get {return _storage._resourcesList ?? Bbproto_PCommunityResourceList()}
    set {_uniqueStorage()._resourcesList = newValue}
  }
  /// Returns true if `resourcesList` has been explicitly set.
  var hasResourcesList: Bool {return _storage._resourcesList != nil}
  /// Clears the value of `resourcesList`. Subsequent reads from it will return its default value.
  mutating func clearResourcesList() {_storage._resourcesList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._content)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isView)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._resourcesList)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 2)
      }
      if _storage._isView != false {
        try visitor.visitSingularBoolField(value: _storage._isView, fieldNumber: 3)
      }
      if let v = _storage._resourcesList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 论坛信件信息
struct Bbproto_PCommunityMailInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityMailInfo"

  /// 信件id 
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 信件回复id
  var replyID: String {
    get {return _storage._replyID}
    set {_uniqueStorage()._replyID = newValue}
  }

  /// 发布信件的时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 信件是否已读标志位
  var isView: Bool {
    get {return _storage._isView}
    set {_uniqueStorage()._isView = newValue}
  }

  /// 信件正文
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 发信用户基础信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 信件引用到的资源信息
  var resourcesList: Bbproto_PCommunityResourceList {
    get {return _storage._resourcesList ?? Bbproto_PCommunityResourceList()}
    set {_uniqueStorage()._resourcesList = newValue}
  }
  /// Returns true if `resourcesList` has been explicitly set.
  var hasResourcesList: Bool {return _storage._resourcesList != nil}
  /// Clears the value of `resourcesList`. Subsequent reads from it will return its default value.
  mutating func clearResourcesList() {_storage._resourcesList = nil}

  /// 回复的信件
  var replyInfo: Bbproto_PCommunityMailInfo {
    get {return _storage._replyInfo ?? Bbproto_PCommunityMailInfo()}
    set {_uniqueStorage()._replyInfo = newValue}
  }
  /// Returns true if `replyInfo` has been explicitly set.
  var hasReplyInfo: Bool {return _storage._replyInfo != nil}
  /// Clears the value of `replyInfo`. Subsequent reads from it will return its default value.
  mutating func clearReplyInfo() {_storage._replyInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 3: try decoder.decodeSingularStringField(value: &_storage._replyID)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isView)
        case 6: try decoder.decodeSingularStringField(value: &_storage._content)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._resourcesList)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._replyInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._replyID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._replyID, fieldNumber: 3)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 4)
      }
      if _storage._isView != false {
        try visitor.visitSingularBoolField(value: _storage._isView, fieldNumber: 5)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 6)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._resourcesList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._replyInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 论坛信件列表
struct Bbproto_PCommunityMailList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityMailList"

  var unread: Int64 = 0

  var mailInfo: [Bbproto_PCommunityMailInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt64Field(value: &self.unread)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.mailInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unread != 0 {
      try visitor.visitSingularInt64Field(value: self.unread, fieldNumber: 2)
    }
    if !self.mailInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mailInfo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// ---社区设定
/// 社区成员信息
struct Bbproto_PCommunityMember: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityMember"

  /// 社区成员信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// A(你）关系码: 0: A --- B(A与B不是好友); 1: A --> B(A是B的单向好友); 2: A <-- B(B是A的单向好友); 3: A <-> B(A与B是好友)
  var isFriend: Int32 {
    get {return _storage._isFriend}
    set {_uniqueStorage()._isFriend = newValue}
  }

  /// 0表示未关注，1表示已关注
  var isFollow: Int32 {
    get {return _storage._isFollow}
    set {_uniqueStorage()._isFollow = newValue}
  }

  /// 0表示非管理员，1表示是管理员
  var isManager: Int32 {
    get {return _storage._isManager}
    set {_uniqueStorage()._isManager = newValue}
  }

  /// 用户是否top成员标志
  var isTop: Bool {
    get {return _storage._isTop}
    set {_uniqueStorage()._isTop = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._isFriend)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._isFollow)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._isManager)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isTop)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._isFriend != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isFriend, fieldNumber: 3)
      }
      if _storage._isFollow != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isFollow, fieldNumber: 4)
      }
      if _storage._isManager != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isManager, fieldNumber: 5)
      }
      if _storage._isTop != false {
        try visitor.visitSingularBoolField(value: _storage._isTop, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区成员信息列表
struct Bbproto_PCommunityMemberList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityMemberList"

  /// 社区成员总数，在第一次调用时返回
  var count: Int32 = 0

  /// 社区成员列表
  var list: [Bbproto_PCommunityMember] = []

  /// 下一次社区成员搜索的光标
  var cursor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.count)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 3: try decoder.decodeSingularStringField(value: &self.cursor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区好友信息
struct Bbproto_PCommunityFriend: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityFriend"

  /// 好友信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 0表示未邀请，1表示已邀请
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 0表示无关系，1是创建者，2是管理者，3是已关注社区
  var membership: Int32 {
    get {return _storage._membership}
    set {_uniqueStorage()._membership = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._membership)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 3)
      }
      if _storage._membership != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membership, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区好友信息列表
struct Bbproto_PCommunityFriendList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityFriendList"

  var list: [Bbproto_PCommunityFriend] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 标旗内容
struct Bbproto_PCommunityFlag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityFlag"

  /// 标旗的id
  var flagID: String = String()

  /// 标旗内容的类型，1是帖子，2是评论
  var flagType: Int32 = 0

  /// 被标旗次数
  var flagCount: Int32 = 0

  /// 标旗的时间
  var flagTime: Int64 = 0

  /// 帖子id
  var postID: String = String()

  /// 评论id
  var commentID: String = String()

  /// 帖子标题
  var title: String = String()

  /// 帖子正文或者评论正文
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.flagID)
      case 3: try decoder.decodeSingularInt32Field(value: &self.flagType)
      case 4: try decoder.decodeSingularInt32Field(value: &self.flagCount)
      case 5: try decoder.decodeSingularInt64Field(value: &self.flagTime)
      case 6: try decoder.decodeSingularStringField(value: &self.postID)
      case 7: try decoder.decodeSingularStringField(value: &self.commentID)
      case 9: try decoder.decodeSingularStringField(value: &self.title)
      case 10: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.flagID.isEmpty {
      try visitor.visitSingularStringField(value: self.flagID, fieldNumber: 2)
    }
    if self.flagType != 0 {
      try visitor.visitSingularInt32Field(value: self.flagType, fieldNumber: 3)
    }
    if self.flagCount != 0 {
      try visitor.visitSingularInt32Field(value: self.flagCount, fieldNumber: 4)
    }
    if self.flagTime != 0 {
      try visitor.visitSingularInt64Field(value: self.flagTime, fieldNumber: 5)
    }
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 6)
    }
    if !self.commentID.isEmpty {
      try visitor.visitSingularStringField(value: self.commentID, fieldNumber: 7)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 9)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 标旗内容列表
struct Bbproto_PCommunityFlagList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityFlagList"

  var list: [Bbproto_PCommunityFlag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 通知内容
struct Bbproto_PCommunityNotification: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityNotification"

  /// 通知是否已读的标志位
  var isView: Bool {
    get {return _storage._isView}
    set {_uniqueStorage()._isView = newValue}
  }

  /// 通知类型，0是帖子被评论，1是评论被引用，2是公告，3是私信
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 通知id
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 产生通知的时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 通知正文
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 不同类型的通知跳转需要的id, 帖子id，公告id，私信id
  var jumpID: String {
    get {return _storage._jumpID}
    set {_uniqueStorage()._jumpID = newValue}
  }

  /// 不同类型的通知跳转需要的id, 评论id（评论跳转需要帖子id+评论id）
  var jumpExID: String {
    get {return _storage._jumpExID}
    set {_uniqueStorage()._jumpExID = newValue}
  }

  /// type为0，1时传递的用户信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularBoolField(value: &_storage._isView)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 6: try decoder.decodeSingularStringField(value: &_storage._content)
        case 7: try decoder.decodeSingularStringField(value: &_storage._jumpID)
        case 8: try decoder.decodeSingularStringField(value: &_storage._jumpExID)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._isView != false {
        try visitor.visitSingularBoolField(value: _storage._isView, fieldNumber: 2)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 3)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 4)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 5)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 6)
      }
      if !_storage._jumpID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpID, fieldNumber: 7)
      }
      if !_storage._jumpExID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jumpExID, fieldNumber: 8)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 通知内容列表
struct Bbproto_PCommunityNotificationList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityNotificationList"

  var list: [Bbproto_PCommunityNotification] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 未读通知状态
struct Bbproto_PCommunityNotificationUnRead: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityNotificationUnRead"

  var unread: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt64Field(value: &self.unread)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unread != 0 {
      try visitor.visitSingularInt64Field(value: self.unread, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区用户信息
struct Bbproto_PInsideCommunityUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInsideCommunityUser"

  /// 用户基础信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 关注社区的时间
  var followTime: Int64 {
    get {return _storage._followTime}
    set {_uniqueStorage()._followTime = newValue}
  }

  /// 用户禁用到期时间
  var forbidTime: Int64 {
    get {return _storage._forbidTime}
    set {_uniqueStorage()._forbidTime = newValue}
  }

  /// 用户被踢出社区的时间
  var beBlacklistTime: Int64 {
    get {return _storage._beBlacklistTime}
    set {_uniqueStorage()._beBlacklistTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._followTime)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._forbidTime)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._beBlacklistTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._followTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followTime, fieldNumber: 3)
      }
      if _storage._forbidTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._forbidTime, fieldNumber: 4)
      }
      if _storage._beBlacklistTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._beBlacklistTime, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区用户列表信息
struct Bbproto_PInsideCommunityUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInsideCommunityUserList"

  var list: [Bbproto_PInsideCommunityUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区Banner资源信息
struct Bbproto_PCommunityBannerInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityBannerInfo"

  /// true为启用，false为禁止
  var enable: Bool {
    get {return _storage._enable}
    set {_uniqueStorage()._enable = newValue}
  }

  /// banner的自定义名字
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// banner的图片资源信息；Name为oss的objectkey，URL为服务端返回的访问地址
  var imgRes: Bbproto_PCommunityResource {
    get {return _storage._imgRes ?? Bbproto_PCommunityResource()}
    set {_uniqueStorage()._imgRes = newValue}
  }
  /// Returns true if `imgRes` has been explicitly set.
  var hasImgRes: Bool {return _storage._imgRes != nil}
  /// Clears the value of `imgRes`. Subsequent reads from it will return its default value.
  mutating func clearImgRes() {_storage._imgRes = nil}

  /// banner链接信息，无链接是为空；有链接时，Name填：链接描述信息；type可选的有：url、post；URL填对应的值：url->完整的链接地址字段、post->动态帖子id|资讯帖子id|公告id
  var linkRes: Bbproto_PCommunityResource {
    get {return _storage._linkRes ?? Bbproto_PCommunityResource()}
    set {_uniqueStorage()._linkRes = newValue}
  }
  /// Returns true if `linkRes` has been explicitly set.
  var hasLinkRes: Bool {return _storage._linkRes != nil}
  /// Clears the value of `linkRes`. Subsequent reads from it will return its default value.
  mutating func clearLinkRes() {_storage._linkRes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._enable)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._imgRes)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._linkRes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._enable != false {
        try visitor.visitSingularBoolField(value: _storage._enable, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._imgRes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._linkRes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区Banner资源信息列表
struct Bbproto_PCommunityBannerInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityBannerInfoList"

  /// banner图的顺序跟客户端编辑时顺序一致；开启的广告显示在前面，不开启的广告显示在后面
  var list: [Bbproto_PCommunityBannerInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户的自定义功能模块
struct Bbproto_PCommunityModules: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityModules"

  /// 类型id
  var id: Int32 = 0

  /// 自定义的模块名字
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户的自定义功能模块列表
struct Bbproto_PCommunityModulesList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityModulesList"

  var list: [Bbproto_PCommunityModules] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户的自定义论坛帖子标签
struct Bbproto_PCommunityForumTag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityForumTag"

  /// 标签id
  var id: Int32 = 0

  /// 自定义的标签名字
  var name: String = String()

  /// 是否禁用该标签 
  var disable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularBoolField(value: &self.disable)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.disable != false {
      try visitor.visitSingularBoolField(value: self.disable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户的自定义论坛帖子标签列表
struct Bbproto_PCommunityForumTagList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityForumTagList"

  var list: [Bbproto_PCommunityForumTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区成员的布局
struct Bbproto_PCommunityLayout: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityLayout"

  /// 布局方案id；1代表模板1（1.2版本），2代表模板2（1.6版本）
  var planID: Int32 {
    get {return _storage._planID}
    set {_uniqueStorage()._planID = newValue}
  }

  /// 方案的配色
  var color: String {
    get {return _storage._color}
    set {_uniqueStorage()._color = newValue}
  }

  /// 中间定义的功能模块列表
  var middleModulesID: Bbproto_PInt32List {
    get {return _storage._middleModulesID ?? Bbproto_PInt32List()}
    set {_uniqueStorage()._middleModulesID = newValue}
  }
  /// Returns true if `middleModulesID` has been explicitly set.
  var hasMiddleModulesID: Bool {return _storage._middleModulesID != nil}
  /// Clears the value of `middleModulesID`. Subsequent reads from it will return its default value.
  mutating func clearMiddleModulesID() {_storage._middleModulesID = nil}

  /// 底部定义的功能模块列表
  var bottomModulesID: Bbproto_PInt32List {
    get {return _storage._bottomModulesID ?? Bbproto_PInt32List()}
    set {_uniqueStorage()._bottomModulesID = newValue}
  }
  /// Returns true if `bottomModulesID` has been explicitly set.
  var hasBottomModulesID: Bool {return _storage._bottomModulesID != nil}
  /// Clears the value of `bottomModulesID`. Subsequent reads from it will return its default value.
  mutating func clearBottomModulesID() {_storage._bottomModulesID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._planID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._color)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._middleModulesID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._bottomModulesID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._planID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._planID, fieldNumber: 1)
      }
      if !_storage._color.isEmpty {
        try visitor.visitSingularStringField(value: _storage._color, fieldNumber: 2)
      }
      if let v = _storage._middleModulesID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._bottomModulesID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区信息 v1.2.x
struct Bbproto_PCommunityInfoV12: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityInfoV12"

  /// 社区基础信息
  var baseInfo: Bbproto_PCommunityBase {
    get {return _storage._baseInfo ?? Bbproto_PCommunityBase()}
    set {_uniqueStorage()._baseInfo = newValue}
  }
  /// Returns true if `baseInfo` has been explicitly set.
  var hasBaseInfo: Bool {return _storage._baseInfo != nil}
  /// Clears the value of `baseInfo`. Subsequent reads from it will return its default value.
  mutating func clearBaseInfo() {_storage._baseInfo = nil}

  /// 社区成员的布局
  var layout: Bbproto_PCommunityLayout {
    get {return _storage._layout ?? Bbproto_PCommunityLayout()}
    set {_uniqueStorage()._layout = newValue}
  }
  /// Returns true if `layout` has been explicitly set.
  var hasLayout: Bool {return _storage._layout != nil}
  /// Clears the value of `layout`. Subsequent reads from it will return its default value.
  mutating func clearLayout() {_storage._layout = nil}

  /// 监管后台设置的广告,如果没有设置或者广告为空，则该字段为空
  var advertisement: Bbproto_PCommunityBannerInfo {
    get {return _storage._advertisement ?? Bbproto_PCommunityBannerInfo()}
    set {_uniqueStorage()._advertisement = newValue}
  }
  /// Returns true if `advertisement` has been explicitly set.
  var hasAdvertisement: Bool {return _storage._advertisement != nil}
  /// Clears the value of `advertisement`. Subsequent reads from it will return its default value.
  mutating func clearAdvertisement() {_storage._advertisement = nil}

  /// banner列表,如果没有设置或者banner为空，则该字段为空
  var bannerList: Bbproto_PCommunityBannerInfoList {
    get {return _storage._bannerList ?? Bbproto_PCommunityBannerInfoList()}
    set {_uniqueStorage()._bannerList = newValue}
  }
  /// Returns true if `bannerList` has been explicitly set.
  var hasBannerList: Bool {return _storage._bannerList != nil}
  /// Clears the value of `bannerList`. Subsequent reads from it will return its default value.
  mutating func clearBannerList() {_storage._bannerList = nil}

  /// 论坛帖子的自定义标签类型列表；图集中需要使用这个标签
  var forumTagList: Bbproto_PCommunityForumTagList {
    get {return _storage._forumTagList ?? Bbproto_PCommunityForumTagList()}
    set {_uniqueStorage()._forumTagList = newValue}
  }
  /// Returns true if `forumTagList` has been explicitly set.
  var hasForumTagList: Bool {return _storage._forumTagList != nil}
  /// Clears the value of `forumTagList`. Subsequent reads from it will return its default value.
  mutating func clearForumTagList() {_storage._forumTagList = nil}

  /// 所有的功能模块列表
  var modulesList: Bbproto_PCommunityModulesList {
    get {return _storage._modulesList ?? Bbproto_PCommunityModulesList()}
    set {_uniqueStorage()._modulesList = newValue}
  }
  /// Returns true if `modulesList` has been explicitly set.
  var hasModulesList: Bool {return _storage._modulesList != nil}
  /// Clears the value of `modulesList`. Subsequent reads from it will return its default value.
  mutating func clearModulesList() {_storage._modulesList = nil}

  /// 社区介绍；图文混排,如果没有设置或者资源为空，则该字段为空
  var introduceRes: Bbproto_PCommunityResourceList {
    get {return _storage._introduceRes ?? Bbproto_PCommunityResourceList()}
    set {_uniqueStorage()._introduceRes = newValue}
  }
  /// Returns true if `introduceRes` has been explicitly set.
  var hasIntroduceRes: Bool {return _storage._introduceRes != nil}
  /// Clears the value of `introduceRes`. Subsequent reads from it will return its default value.
  mutating func clearIntroduceRes() {_storage._introduceRes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._layout)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._advertisement)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._bannerList)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._forumTagList)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._modulesList)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._introduceRes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._layout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._advertisement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._bannerList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._forumTagList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._modulesList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._introduceRes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// ‘社区首页’返回的信息 v1.2.x
struct Bbproto_PCommunityHomeV12: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityHomeV12"

  /// 社区状态，-1没有创建社区;0社区开启状态；1社区关闭状态；
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 用户与社区的关系，-1无关系，0为拥有者，1为管理者，2为已关注
  var membership: Int32 {
    get {return _storage._membership}
    set {_uniqueStorage()._membership = newValue}
  }

  /// 是否创建者(VO)任命的VIPP
  var isVomember: Bool {
    get {return _storage._isVomember}
    set {_uniqueStorage()._isVomember = newValue}
  }

  /// 社区成员数量
  var memberCount: Int32 {
    get {return _storage._memberCount}
    set {_uniqueStorage()._memberCount = newValue}
  }

  /// 社区管理员的uuid列表,多个管理员用','分割
  var managerList: String {
    get {return _storage._managerList}
    set {_uniqueStorage()._managerList = newValue}
  }

  /// 社区创建者的信息
  var owner: Bbproto_PUserBase {
    get {return _storage._owner ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {_storage._owner = nil}

  /// top成员列表；创建时不需要传
  var topUserList: Bbproto_PUserBaseList {
    get {return _storage._topUserList ?? Bbproto_PUserBaseList()}
    set {_uniqueStorage()._topUserList = newValue}
  }
  /// Returns true if `topUserList` has been explicitly set.
  var hasTopUserList: Bool {return _storage._topUserList != nil}
  /// Clears the value of `topUserList`. Subsequent reads from it will return its default value.
  mutating func clearTopUserList() {_storage._topUserList = nil}

  /// 社区信息
  var communityInfo: Bbproto_PCommunityInfoV12 {
    get {return _storage._communityInfo ?? Bbproto_PCommunityInfoV12()}
    set {_uniqueStorage()._communityInfo = newValue}
  }
  /// Returns true if `communityInfo` has been explicitly set.
  var hasCommunityInfo: Bool {return _storage._communityInfo != nil}
  /// Clears the value of `communityInfo`. Subsequent reads from it will return its default value.
  mutating func clearCommunityInfo() {_storage._communityInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._membership)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isVomember)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
        case 5: try decoder.decodeSingularStringField(value: &_storage._managerList)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._owner)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._topUserList)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._communityInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._membership != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membership, fieldNumber: 2)
      }
      if _storage._isVomember != false {
        try visitor.visitSingularBoolField(value: _storage._isVomember, fieldNumber: 3)
      }
      if _storage._memberCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._memberCount, fieldNumber: 4)
      }
      if !_storage._managerList.isEmpty {
        try visitor.visitSingularStringField(value: _storage._managerList, fieldNumber: 5)
      }
      if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._topUserList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._communityInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 图集里面图片的信息
struct Bbproto_PCommunityPhotoAlbum: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityPhotoAlbum"

  /// 图片的ID，用于索引下一张图片
  var id: Int64 = 0

  /// 服务端不返回该字段
  var time: Int64 = 0

  /// 图片的访问地址
  var url: String = String()

  /// 图片缩略图的访问地址
  var thumURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.time)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeSingularStringField(value: &self.thumURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if !self.thumURL.isEmpty {
      try visitor.visitSingularStringField(value: self.thumURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 图集里面图片的信息列表
struct Bbproto_PCommunityPhotoAlbumList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityPhotoAlbumList"

  /// 图集列表
  var list: [Bbproto_PCommunityPhotoAlbum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 按照日期排列的图集里面图片的信息列表
struct Bbproto_PCommunityPhotoAlbumDateList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityPhotoAlbumDateList"

  /// 日期的时间戳
  var dateTime: [Int64] = []

  /// 图集列表
  var list: [Bbproto_PCommunityPhotoAlbumList] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.dateTime)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dateTime.isEmpty {
      try visitor.visitPackedInt64Field(value: self.dateTime, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 声望用户信息 
struct Bbproto_PCommunityReputationUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityReputationUser"

  /// 用户基础信息 
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 声望值，/v1.2/community/ranking api中传递的offset值
  var reputationVal: Int32 {
    get {return _storage._reputationVal}
    set {_uniqueStorage()._reputationVal = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._reputationVal)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._reputationVal != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reputationVal, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 声望用户信息 
struct Bbproto_PCommunityRankingUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityRankingUser"

  /// 声望用户信息 
  var reputationUser: Bbproto_PCommunityReputationUser {
    get {return _storage._reputationUser ?? Bbproto_PCommunityReputationUser()}
    set {_uniqueStorage()._reputationUser = newValue}
  }
  /// Returns true if `reputationUser` has been explicitly set.
  var hasReputationUser: Bool {return _storage._reputationUser != nil}
  /// Clears the value of `reputationUser`. Subsequent reads from it will return its default value.
  mutating func clearReputationUser() {_storage._reputationUser = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._reputationUser)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._reputationUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 声望用户信息列表
struct Bbproto_PCommunityRankingUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityRankingUserList"

  /// 我在排行榜的位置，只在第一次获取排行榜时返回
  var myRanking: Int32 = 0

  /// 我在排行榜的分值，只在第一次获取排行榜时返回
  var myRankingVal: Int32 = 0

  /// 列表
  var list: [Bbproto_PCommunityRankingUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.myRanking)
      case 2: try decoder.decodeSingularInt32Field(value: &self.myRankingVal)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.myRanking != 0 {
      try visitor.visitSingularInt32Field(value: self.myRanking, fieldNumber: 1)
    }
    if self.myRankingVal != 0 {
      try visitor.visitSingularInt32Field(value: self.myRankingVal, fieldNumber: 2)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区布局的配置信息
struct Bbproto_PCommunityLayoutConfig: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityLayoutConfig"

  /// 可选的颜色方案
  var color: Bbproto_PStringList {
    get {return _storage._color ?? Bbproto_PStringList()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {_storage._color = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._color)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 声望排行榜的描述内容
struct Bbproto_PCommunityRankingReputationDescribe: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityRankingReputationDescribe"

  /// 备注
  var remark: String = String()

  /// 操作
  var title: [String] = []

  /// 周期
  var cycle: [String] = []

  /// 奖励次数
  var times: [Int32] = []

  /// 声望
  var val: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.remark)
      case 10: try decoder.decodeRepeatedStringField(value: &self.title)
      case 11: try decoder.decodeRepeatedStringField(value: &self.cycle)
      case 12: try decoder.decodeRepeatedInt32Field(value: &self.times)
      case 13: try decoder.decodeRepeatedInt32Field(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitRepeatedStringField(value: self.title, fieldNumber: 10)
    }
    if !self.cycle.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cycle, fieldNumber: 11)
    }
    if !self.times.isEmpty {
      try visitor.visitPackedInt32Field(value: self.times, fieldNumber: 12)
    }
    if !self.val.isEmpty {
      try visitor.visitPackedInt32Field(value: self.val, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 排行榜的描述内容
struct Bbproto_PCommunityRankingDescribe: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityRankingDescribe"

  /// 声望排行榜的描述内容
  var reputation: Bbproto_PCommunityRankingReputationDescribe {
    get {return _storage._reputation ?? Bbproto_PCommunityRankingReputationDescribe()}
    set {_uniqueStorage()._reputation = newValue}
  }
  /// Returns true if `reputation` has been explicitly set.
  var hasReputation: Bool {return _storage._reputation != nil}
  /// Clears the value of `reputation`. Subsequent reads from it will return its default value.
  mutating func clearReputation() {_storage._reputation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 3: try decoder.decodeSingularMessageField(value: &_storage._reputation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._reputation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// VO社区信息
struct Bbproto_PCommunityInfoVO: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityInfoVO"

  /// 社区状态，-1没有创建社区;0社区开启状态；1社区关闭状态；
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 社区成员数量
  var memberCount: Int32 {
    get {return _storage._memberCount}
    set {_uniqueStorage()._memberCount = newValue}
  }

  /// 社区动态帖子数量
  var forumPostCount: Int32 {
    get {return _storage._forumPostCount}
    set {_uniqueStorage()._forumPostCount = newValue}
  }

  /// 社区资讯帖子数量
  var newsPostCount: Int32 {
    get {return _storage._newsPostCount}
    set {_uniqueStorage()._newsPostCount = newValue}
  }

  /// 社区信息
  var home: Bbproto_PCommunityHomeV12 {
    get {return _storage._home ?? Bbproto_PCommunityHomeV12()}
    set {_uniqueStorage()._home = newValue}
  }
  /// Returns true if `home` has been explicitly set.
  var hasHome: Bool {return _storage._home != nil}
  /// Clears the value of `home`. Subsequent reads from it will return its default value.
  mutating func clearHome() {_storage._home = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._forumPostCount)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._newsPostCount)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._home)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 1)
      }
      if _storage._memberCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._memberCount, fieldNumber: 3)
      }
      if _storage._forumPostCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forumPostCount, fieldNumber: 4)
      }
      if _storage._newsPostCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newsPostCount, fieldNumber: 5)
      }
      if let v = _storage._home {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 我的‘社区首页’
struct Bbproto_PCommunityIndex: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityIndex"

  /// 社区成员数量
  var memberCount: Int32 {
    get {return _storage._memberCount}
    set {_uniqueStorage()._memberCount = newValue}
  }

  /// 社区动态帖子数量
  var forumPostCount: Int32 {
    get {return _storage._forumPostCount}
    set {_uniqueStorage()._forumPostCount = newValue}
  }

  /// 社区资讯帖子数量
  var newsPostCount: Int32 {
    get {return _storage._newsPostCount}
    set {_uniqueStorage()._newsPostCount = newValue}
  }

  /// 我创建/管理的社区首页
  var home: Bbproto_PCommunityHomeV12 {
    get {return _storage._home ?? Bbproto_PCommunityHomeV12()}
    set {_uniqueStorage()._home = newValue}
  }
  /// Returns true if `home` has been explicitly set.
  var hasHome: Bool {return _storage._home != nil}
  /// Clears the value of `home`. Subsequent reads from it will return its default value.
  mutating func clearHome() {_storage._home = nil}

  /// 我关注的社区，默认显示20条
  var follow: Bbproto_PCommunityBaseList {
    get {return _storage._follow ?? Bbproto_PCommunityBaseList()}
    set {_uniqueStorage()._follow = newValue}
  }
  /// Returns true if `follow` has been explicitly set.
  var hasFollow: Bool {return _storage._follow != nil}
  /// Clears the value of `follow`. Subsequent reads from it will return its default value.
  mutating func clearFollow() {_storage._follow = nil}

  /// 系统推荐的社区，默认显示20条
  var recommend: Bbproto_PCommunityBaseList {
    get {return _storage._recommend ?? Bbproto_PCommunityBaseList()}
    set {_uniqueStorage()._recommend = newValue}
  }
  /// Returns true if `recommend` has been explicitly set.
  var hasRecommend: Bool {return _storage._recommend != nil}
  /// Clears the value of `recommend`. Subsequent reads from it will return its default value.
  mutating func clearRecommend() {_storage._recommend = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._memberCount)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._forumPostCount)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._newsPostCount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._home)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._follow)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._recommend)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._memberCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._memberCount, fieldNumber: 1)
      }
      if _storage._forumPostCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._forumPostCount, fieldNumber: 2)
      }
      if _storage._newsPostCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newsPostCount, fieldNumber: 3)
      }
      if let v = _storage._home {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._follow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._recommend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区分类
struct Bbproto_PCommunitySort: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunitySort"

  /// 已设置为推荐的标志位，监管系统使用
  var recommend: Bool = false

  /// 分类ID
  var id: Int32 = 0

  /// 分类名称
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.recommend)
      case 2: try decoder.decodeSingularInt32Field(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recommend != false {
      try visitor.visitSingularBoolField(value: self.recommend, fieldNumber: 1)
    }
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区分类列表
struct Bbproto_PCommunitySortList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunitySortList"

  /// 社区ID，设置社区分类时填充；其它情况为空即可
  var id: String = String()

  /// 用户ID，修改资讯页面‘我的分类’时填充；其它情况为空即可
  var uuid: String = String()

  /// 首页精选栏固定显示分类，1.6版固定显示top
  var recommend: [Bbproto_PCommunitySort] = []

  /// 自定义分类
  var customize: [Bbproto_PCommunitySort] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.recommend)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.customize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.recommend.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recommend, fieldNumber: 3)
    }
    if !self.customize.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///=====================================
struct Bbproto_PCommunityManagerInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityManagerInfo"

  /// 联系人，必选
  var name: String = String()

  /// 联系电话，必选
  var phoneCode: String = String()

  /// 其他联系方式
  var other: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.phoneCode)
      case 3: try decoder.decodeSingularStringField(value: &self.other)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.phoneCode.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneCode, fieldNumber: 2)
    }
    if !self.other.isEmpty {
      try visitor.visitSingularStringField(value: self.other, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 社区管理员权限
/// 详细权限文档 http://confluence.blemobi.com/pages/viewpage.action?pageId=15764813
struct Bbproto_PCommunityManagerRight: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityManagerRight"

  /// 用户创建/管理的社区id，如果是普通用户，则社区id为空字符串 | 要赋予/修改管理员的社区id
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 用户与社区的关系， 0为创建者（拥有所有权限），1为管理者，
  var membership: Int32 {
    get {return _storage._membership}
    set {_uniqueStorage()._membership = newValue}
  }

  /// 获取权限时不用填充 | 要赋予/修改权限的用户id
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 发布身份；0代表以管理员自己身份发布；1代表以首次以创建者身份发布（需要app/粉丝弹窗提示）；2代表已确认使用创建者身份发布
  var publishStatus: Int32 {
    get {return _storage._publishStatus}
    set {_uniqueStorage()._publishStatus = newValue}
  }

  /// 设置管理员的时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 管理员资料，粉丝系统使用
  var info: Bbproto_PCommunityManagerInfo {
    get {return _storage._info ?? Bbproto_PCommunityManagerInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_storage._info = nil}

  /// 管理员的基础数据
  var base: Bbproto_PUserBase {
    get {return _storage._base ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return _storage._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {_storage._base = nil}

  /// 是否能以管理员权限发布内容 帖子/视频/评论等
  var publishAsOwner: Bool {
    get {return _storage._publishAsOwner}
    set {_uniqueStorage()._publishAsOwner = newValue}
  }

  /// 授权管理
  var admin: Bool {
    get {return _storage._admin}
    set {_uniqueStorage()._admin = newValue}
  }

  /// 社区帖子管理（动态、资讯、公告）
  var post: Bool {
    get {return _storage._post}
    set {_uniqueStorage()._post = newValue}
  }

  /// 社区装修
  var layout: Bool {
    get {return _storage._layout}
    set {_uniqueStorage()._layout = newValue}
  }

  /// 社区广告
  var banner: Bool {
    get {return _storage._banner}
    set {_uniqueStorage()._banner = newValue}
  }

  /// 原创录播
  var netdisk: Bool {
    get {return _storage._netdisk}
    set {_uniqueStorage()._netdisk = newValue}
  }

  /// 社区资料
  var information: Bool {
    get {return _storage._information}
    set {_uniqueStorage()._information = newValue}
  }

  /// 聊天室
  var chat: Bool {
    get {return _storage._chat}
    set {_uniqueStorage()._chat = newValue}
  }

  /// 数据管理（大数据、排行榜）
  var dataManagement: Bool {
    get {return _storage._dataManagement}
    set {_uniqueStorage()._dataManagement = newValue}
  }

  /// 举报管理
  var report: Bool {
    get {return _storage._report}
    set {_uniqueStorage()._report = newValue}
  }

  /// 意见反馈
  var feedback: Bool {
    get {return _storage._feedback}
    set {_uniqueStorage()._feedback = newValue}
  }

  /// 社区成员
  var member: Bool {
    get {return _storage._member}
    set {_uniqueStorage()._member = newValue}
  }

  /// 回收站
  var recyleBin: Bool {
    get {return _storage._recyleBin}
    set {_uniqueStorage()._recyleBin = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._membership)
        case 3: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._publishStatus)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._info)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._base)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._publishAsOwner)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._admin)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._post)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._layout)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._banner)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._netdisk)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._information)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._chat)
        case 18: try decoder.decodeSingularBoolField(value: &_storage._dataManagement)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._report)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._feedback)
        case 21: try decoder.decodeSingularBoolField(value: &_storage._member)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._recyleBin)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._membership != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membership, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 3)
      }
      if _storage._publishStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._publishStatus, fieldNumber: 4)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 5)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._publishAsOwner != false {
        try visitor.visitSingularBoolField(value: _storage._publishAsOwner, fieldNumber: 10)
      }
      if _storage._admin != false {
        try visitor.visitSingularBoolField(value: _storage._admin, fieldNumber: 11)
      }
      if _storage._post != false {
        try visitor.visitSingularBoolField(value: _storage._post, fieldNumber: 12)
      }
      if _storage._layout != false {
        try visitor.visitSingularBoolField(value: _storage._layout, fieldNumber: 13)
      }
      if _storage._banner != false {
        try visitor.visitSingularBoolField(value: _storage._banner, fieldNumber: 14)
      }
      if _storage._netdisk != false {
        try visitor.visitSingularBoolField(value: _storage._netdisk, fieldNumber: 15)
      }
      if _storage._information != false {
        try visitor.visitSingularBoolField(value: _storage._information, fieldNumber: 16)
      }
      if _storage._chat != false {
        try visitor.visitSingularBoolField(value: _storage._chat, fieldNumber: 17)
      }
      if _storage._dataManagement != false {
        try visitor.visitSingularBoolField(value: _storage._dataManagement, fieldNumber: 18)
      }
      if _storage._report != false {
        try visitor.visitSingularBoolField(value: _storage._report, fieldNumber: 19)
      }
      if _storage._feedback != false {
        try visitor.visitSingularBoolField(value: _storage._feedback, fieldNumber: 20)
      }
      if _storage._member != false {
        try visitor.visitSingularBoolField(value: _storage._member, fieldNumber: 21)
      }
      if _storage._recyleBin != false {
        try visitor.visitSingularBoolField(value: _storage._recyleBin, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PCommunityManagerRightList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCommunityManagerRightList"

  var list: [Bbproto_PCommunityManagerRight] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_ECommunityPostLabel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EPostLabelAll"),
    1: .same(proto: "EPostLabelNews"),
    2: .same(proto: "EPostLabelFeatured"),
    3: .same(proto: "EPostLabelGoddess"),
  ]
}

extension Bbproto_PCommunityID: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "ID"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityID) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CreateTime"),
    2: .same(proto: "ID"),
    3: .same(proto: "Name"),
    4: .same(proto: "HeadImg"),
    5: .same(proto: "Owner"),
    6: .same(proto: "Status"),
    7: .same(proto: "Membership"),
    8: .same(proto: "StrIntroduce"),
    9: .same(proto: "SortList"),
    10: .same(proto: "Manager"),
  ]

  fileprivate class _StorageClass {
    var _createTime: Int64 = 0
    var _id: String = String()
    var _name: String = String()
    var _headImg: String = String()
    var _owner: String = String()
    var _status: Int32 = 0
    var _membership: Int32 = 0
    var _strIntroduce: String = String()
    var _sortList: Bbproto_PCommunitySortList? = nil
    var _manager: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _createTime = source._createTime
      _id = source._id
      _name = source._name
      _headImg = source._headImg
      _owner = source._owner
      _status = source._status
      _membership = source._membership
      _strIntroduce = source._strIntroduce
      _sortList = source._sortList
      _manager = source._manager
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityBase) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._createTime != other_storage._createTime {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._headImg != other_storage._headImg {return false}
        if _storage._owner != other_storage._owner {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._membership != other_storage._membership {return false}
        if _storage._strIntroduce != other_storage._strIntroduce {return false}
        if _storage._sortList != other_storage._sortList {return false}
        if _storage._manager != other_storage._manager {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityBaseList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityBaseList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityResource: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Type"),
    3: .same(proto: "Name"),
    4: .same(proto: "URL"),
    5: .same(proto: "Size"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityResource) -> Bool {
    if self.type != other.type {return false}
    if self.name != other.name {return false}
    if self.url != other.url {return false}
    if self.size != other.size {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityResourceList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Resource"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityResourceList) -> Bool {
    if self.resource != other.resource {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityMailUpload: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Content"),
    3: .same(proto: "IsView"),
    10: .same(proto: "ResourcesList"),
  ]

  fileprivate class _StorageClass {
    var _content: String = String()
    var _isView: Bool = false
    var _resourcesList: Bbproto_PCommunityResourceList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _isView = source._isView
      _resourcesList = source._resourcesList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityMailUpload) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._content != other_storage._content {return false}
        if _storage._isView != other_storage._isView {return false}
        if _storage._resourcesList != other_storage._resourcesList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityMailInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "ID"),
    3: .same(proto: "ReplyID"),
    4: .same(proto: "Time"),
    5: .same(proto: "IsView"),
    6: .same(proto: "Content"),
    7: .same(proto: "User"),
    8: .same(proto: "ResourcesList"),
    9: .same(proto: "ReplyInfo"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _replyID: String = String()
    var _time: Int64 = 0
    var _isView: Bool = false
    var _content: String = String()
    var _user: Bbproto_PUserBase? = nil
    var _resourcesList: Bbproto_PCommunityResourceList? = nil
    var _replyInfo: Bbproto_PCommunityMailInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _replyID = source._replyID
      _time = source._time
      _isView = source._isView
      _content = source._content
      _user = source._user
      _resourcesList = source._resourcesList
      _replyInfo = source._replyInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityMailInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._replyID != other_storage._replyID {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._isView != other_storage._isView {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._resourcesList != other_storage._resourcesList {return false}
        if _storage._replyInfo != other_storage._replyInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityMailList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Unread"),
    3: .same(proto: "MailInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityMailList) -> Bool {
    if self.unread != other.unread {return false}
    if self.mailInfo != other.mailInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityMember: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "User"),
    3: .same(proto: "IsFriend"),
    4: .same(proto: "IsFollow"),
    5: .same(proto: "IsManager"),
    6: .same(proto: "IsTop"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _isFriend: Int32 = 0
    var _isFollow: Int32 = 0
    var _isManager: Int32 = 0
    var _isTop: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _isFriend = source._isFriend
      _isFollow = source._isFollow
      _isManager = source._isManager
      _isTop = source._isTop
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityMember) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._isFriend != other_storage._isFriend {return false}
        if _storage._isFollow != other_storage._isFollow {return false}
        if _storage._isManager != other_storage._isManager {return false}
        if _storage._isTop != other_storage._isTop {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityMemberList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Count"),
    2: .same(proto: "List"),
    3: .same(proto: "Cursor"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityMemberList) -> Bool {
    if self.count != other.count {return false}
    if self.list != other.list {return false}
    if self.cursor != other.cursor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityFriend: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "User"),
    3: .same(proto: "Status"),
    4: .same(proto: "Membership"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _status: Int32 = 0
    var _membership: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _status = source._status
      _membership = source._membership
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityFriend) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._membership != other_storage._membership {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityFriendList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityFriendList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityFlag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "FlagID"),
    3: .same(proto: "FlagType"),
    4: .same(proto: "FlagCount"),
    5: .same(proto: "FlagTime"),
    6: .same(proto: "PostID"),
    7: .same(proto: "CommentID"),
    9: .same(proto: "Title"),
    10: .same(proto: "Content"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityFlag) -> Bool {
    if self.flagID != other.flagID {return false}
    if self.flagType != other.flagType {return false}
    if self.flagCount != other.flagCount {return false}
    if self.flagTime != other.flagTime {return false}
    if self.postID != other.postID {return false}
    if self.commentID != other.commentID {return false}
    if self.title != other.title {return false}
    if self.content != other.content {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityFlagList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityFlagList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "IsView"),
    3: .same(proto: "Type"),
    4: .same(proto: "ID"),
    5: .same(proto: "Time"),
    6: .same(proto: "Content"),
    7: .same(proto: "JumpID"),
    8: .same(proto: "JumpExID"),
    9: .same(proto: "User"),
  ]

  fileprivate class _StorageClass {
    var _isView: Bool = false
    var _type: Int32 = 0
    var _id: Int64 = 0
    var _time: Int64 = 0
    var _content: String = String()
    var _jumpID: String = String()
    var _jumpExID: String = String()
    var _user: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _isView = source._isView
      _type = source._type
      _id = source._id
      _time = source._time
      _content = source._content
      _jumpID = source._jumpID
      _jumpExID = source._jumpExID
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityNotification) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._isView != other_storage._isView {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._jumpID != other_storage._jumpID {return false}
        if _storage._jumpExID != other_storage._jumpExID {return false}
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityNotificationList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityNotificationList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityNotificationUnRead: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Unread"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityNotificationUnRead) -> Bool {
    if self.unread != other.unread {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInsideCommunityUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "User"),
    3: .same(proto: "FollowTime"),
    4: .same(proto: "ForbidTime"),
    5: .same(proto: "BeBlacklistTime"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _followTime: Int64 = 0
    var _forbidTime: Int64 = 0
    var _beBlacklistTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _followTime = source._followTime
      _forbidTime = source._forbidTime
      _beBlacklistTime = source._beBlacklistTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PInsideCommunityUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._followTime != other_storage._followTime {return false}
        if _storage._forbidTime != other_storage._forbidTime {return false}
        if _storage._beBlacklistTime != other_storage._beBlacklistTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInsideCommunityUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInsideCommunityUserList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityBannerInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Enable"),
    2: .same(proto: "Name"),
    3: .same(proto: "ImgRes"),
    4: .same(proto: "LinkRes"),
  ]

  fileprivate class _StorageClass {
    var _enable: Bool = false
    var _name: String = String()
    var _imgRes: Bbproto_PCommunityResource? = nil
    var _linkRes: Bbproto_PCommunityResource? = nil

    init() {}

    init(copying source: _StorageClass) {
      _enable = source._enable
      _name = source._name
      _imgRes = source._imgRes
      _linkRes = source._linkRes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityBannerInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._enable != other_storage._enable {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._imgRes != other_storage._imgRes {return false}
        if _storage._linkRes != other_storage._linkRes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityBannerInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityBannerInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityModules: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "Name"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityModules) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityModulesList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityModulesList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityForumTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    3: .same(proto: "Name"),
    4: .same(proto: "Disable"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityForumTag) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.disable != other.disable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityForumTagList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityForumTagList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityLayout: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PlanID"),
    2: .same(proto: "Color"),
    4: .same(proto: "MiddleModulesID"),
    5: .same(proto: "BottomModulesID"),
  ]

  fileprivate class _StorageClass {
    var _planID: Int32 = 0
    var _color: String = String()
    var _middleModulesID: Bbproto_PInt32List? = nil
    var _bottomModulesID: Bbproto_PInt32List? = nil

    init() {}

    init(copying source: _StorageClass) {
      _planID = source._planID
      _color = source._color
      _middleModulesID = source._middleModulesID
      _bottomModulesID = source._bottomModulesID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityLayout) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._planID != other_storage._planID {return false}
        if _storage._color != other_storage._color {return false}
        if _storage._middleModulesID != other_storage._middleModulesID {return false}
        if _storage._bottomModulesID != other_storage._bottomModulesID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityInfoV12: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BaseInfo"),
    2: .same(proto: "Layout"),
    3: .same(proto: "Advertisement"),
    4: .same(proto: "BannerList"),
    5: .same(proto: "ForumTagList"),
    6: .same(proto: "ModulesList"),
    7: .same(proto: "IntroduceRes"),
  ]

  fileprivate class _StorageClass {
    var _baseInfo: Bbproto_PCommunityBase? = nil
    var _layout: Bbproto_PCommunityLayout? = nil
    var _advertisement: Bbproto_PCommunityBannerInfo? = nil
    var _bannerList: Bbproto_PCommunityBannerInfoList? = nil
    var _forumTagList: Bbproto_PCommunityForumTagList? = nil
    var _modulesList: Bbproto_PCommunityModulesList? = nil
    var _introduceRes: Bbproto_PCommunityResourceList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _baseInfo = source._baseInfo
      _layout = source._layout
      _advertisement = source._advertisement
      _bannerList = source._bannerList
      _forumTagList = source._forumTagList
      _modulesList = source._modulesList
      _introduceRes = source._introduceRes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityInfoV12) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._baseInfo != other_storage._baseInfo {return false}
        if _storage._layout != other_storage._layout {return false}
        if _storage._advertisement != other_storage._advertisement {return false}
        if _storage._bannerList != other_storage._bannerList {return false}
        if _storage._forumTagList != other_storage._forumTagList {return false}
        if _storage._modulesList != other_storage._modulesList {return false}
        if _storage._introduceRes != other_storage._introduceRes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityHomeV12: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Status"),
    2: .same(proto: "Membership"),
    3: .same(proto: "IsVOMember"),
    4: .same(proto: "MemberCount"),
    5: .same(proto: "ManagerList"),
    6: .same(proto: "Owner"),
    7: .same(proto: "TopUserList"),
    8: .same(proto: "CommunityInfo"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _membership: Int32 = 0
    var _isVomember: Bool = false
    var _memberCount: Int32 = 0
    var _managerList: String = String()
    var _owner: Bbproto_PUserBase? = nil
    var _topUserList: Bbproto_PUserBaseList? = nil
    var _communityInfo: Bbproto_PCommunityInfoV12? = nil

    init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _membership = source._membership
      _isVomember = source._isVomember
      _memberCount = source._memberCount
      _managerList = source._managerList
      _owner = source._owner
      _topUserList = source._topUserList
      _communityInfo = source._communityInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityHomeV12) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._status != other_storage._status {return false}
        if _storage._membership != other_storage._membership {return false}
        if _storage._isVomember != other_storage._isVomember {return false}
        if _storage._memberCount != other_storage._memberCount {return false}
        if _storage._managerList != other_storage._managerList {return false}
        if _storage._owner != other_storage._owner {return false}
        if _storage._topUserList != other_storage._topUserList {return false}
        if _storage._communityInfo != other_storage._communityInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityPhotoAlbum: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "Time"),
    3: .same(proto: "URL"),
    4: .same(proto: "ThumURL"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityPhotoAlbum) -> Bool {
    if self.id != other.id {return false}
    if self.time != other.time {return false}
    if self.url != other.url {return false}
    if self.thumURL != other.thumURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityPhotoAlbumList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityPhotoAlbumList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityPhotoAlbumDateList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DateTime"),
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityPhotoAlbumDateList) -> Bool {
    if self.dateTime != other.dateTime {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityReputationUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "User"),
    2: .same(proto: "ReputationVal"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _reputationVal: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _reputationVal = source._reputationVal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityReputationUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._reputationVal != other_storage._reputationVal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityRankingUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ReputationUser"),
  ]

  fileprivate class _StorageClass {
    var _reputationUser: Bbproto_PCommunityReputationUser? = nil

    init() {}

    init(copying source: _StorageClass) {
      _reputationUser = source._reputationUser
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityRankingUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._reputationUser != other_storage._reputationUser {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityRankingUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MyRanking"),
    2: .same(proto: "MyRankingVal"),
    3: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityRankingUserList) -> Bool {
    if self.myRanking != other.myRanking {return false}
    if self.myRankingVal != other.myRankingVal {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityLayoutConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Color"),
  ]

  fileprivate class _StorageClass {
    var _color: Bbproto_PStringList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _color = source._color
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityLayoutConfig) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._color != other_storage._color {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityRankingReputationDescribe: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Remark"),
    10: .same(proto: "Title"),
    11: .same(proto: "Cycle"),
    12: .same(proto: "Times"),
    13: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityRankingReputationDescribe) -> Bool {
    if self.remark != other.remark {return false}
    if self.title != other.title {return false}
    if self.cycle != other.cycle {return false}
    if self.times != other.times {return false}
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityRankingDescribe: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "Reputation"),
  ]

  fileprivate class _StorageClass {
    var _reputation: Bbproto_PCommunityRankingReputationDescribe? = nil

    init() {}

    init(copying source: _StorageClass) {
      _reputation = source._reputation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityRankingDescribe) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._reputation != other_storage._reputation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityInfoVO: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Status"),
    3: .same(proto: "MemberCount"),
    4: .same(proto: "ForumPostCount"),
    5: .same(proto: "NewsPostCount"),
    6: .same(proto: "Home"),
  ]

  fileprivate class _StorageClass {
    var _status: Int32 = 0
    var _memberCount: Int32 = 0
    var _forumPostCount: Int32 = 0
    var _newsPostCount: Int32 = 0
    var _home: Bbproto_PCommunityHomeV12? = nil

    init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _memberCount = source._memberCount
      _forumPostCount = source._forumPostCount
      _newsPostCount = source._newsPostCount
      _home = source._home
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityInfoVO) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._status != other_storage._status {return false}
        if _storage._memberCount != other_storage._memberCount {return false}
        if _storage._forumPostCount != other_storage._forumPostCount {return false}
        if _storage._newsPostCount != other_storage._newsPostCount {return false}
        if _storage._home != other_storage._home {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityIndex: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MemberCount"),
    2: .same(proto: "ForumPostCount"),
    3: .same(proto: "NewsPostCount"),
    4: .same(proto: "Home"),
    5: .same(proto: "Follow"),
    6: .same(proto: "Recommend"),
  ]

  fileprivate class _StorageClass {
    var _memberCount: Int32 = 0
    var _forumPostCount: Int32 = 0
    var _newsPostCount: Int32 = 0
    var _home: Bbproto_PCommunityHomeV12? = nil
    var _follow: Bbproto_PCommunityBaseList? = nil
    var _recommend: Bbproto_PCommunityBaseList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _memberCount = source._memberCount
      _forumPostCount = source._forumPostCount
      _newsPostCount = source._newsPostCount
      _home = source._home
      _follow = source._follow
      _recommend = source._recommend
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityIndex) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._memberCount != other_storage._memberCount {return false}
        if _storage._forumPostCount != other_storage._forumPostCount {return false}
        if _storage._newsPostCount != other_storage._newsPostCount {return false}
        if _storage._home != other_storage._home {return false}
        if _storage._follow != other_storage._follow {return false}
        if _storage._recommend != other_storage._recommend {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunitySort: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Recommend"),
    2: .same(proto: "ID"),
    3: .same(proto: "Name"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunitySort) -> Bool {
    if self.recommend != other.recommend {return false}
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunitySortList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "UUID"),
    3: .same(proto: "Recommend"),
    4: .same(proto: "Customize"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunitySortList) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if self.recommend != other.recommend {return false}
    if self.customize != other.customize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityManagerInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Name"),
    2: .same(proto: "PhoneCode"),
    3: .same(proto: "Other"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityManagerInfo) -> Bool {
    if self.name != other.name {return false}
    if self.phoneCode != other.phoneCode {return false}
    if self.other != other.other {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityManagerRight: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Id"),
    2: .same(proto: "Membership"),
    3: .same(proto: "Uuid"),
    4: .same(proto: "PublishStatus"),
    5: .same(proto: "Time"),
    6: .same(proto: "Info"),
    7: .same(proto: "Base"),
    10: .same(proto: "PublishAsOwner"),
    11: .same(proto: "Admin"),
    12: .same(proto: "Post"),
    13: .same(proto: "Layout"),
    14: .same(proto: "Banner"),
    15: .same(proto: "Netdisk"),
    16: .same(proto: "Information"),
    17: .same(proto: "Chat"),
    18: .same(proto: "DataManagement"),
    19: .same(proto: "Report"),
    20: .same(proto: "Feedback"),
    21: .same(proto: "Member"),
    22: .same(proto: "RecyleBin"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _membership: Int32 = 0
    var _uuid: String = String()
    var _publishStatus: Int32 = 0
    var _time: Int64 = 0
    var _info: Bbproto_PCommunityManagerInfo? = nil
    var _base: Bbproto_PUserBase? = nil
    var _publishAsOwner: Bool = false
    var _admin: Bool = false
    var _post: Bool = false
    var _layout: Bool = false
    var _banner: Bool = false
    var _netdisk: Bool = false
    var _information: Bool = false
    var _chat: Bool = false
    var _dataManagement: Bool = false
    var _report: Bool = false
    var _feedback: Bool = false
    var _member: Bool = false
    var _recyleBin: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _membership = source._membership
      _uuid = source._uuid
      _publishStatus = source._publishStatus
      _time = source._time
      _info = source._info
      _base = source._base
      _publishAsOwner = source._publishAsOwner
      _admin = source._admin
      _post = source._post
      _layout = source._layout
      _banner = source._banner
      _netdisk = source._netdisk
      _information = source._information
      _chat = source._chat
      _dataManagement = source._dataManagement
      _report = source._report
      _feedback = source._feedback
      _member = source._member
      _recyleBin = source._recyleBin
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityManagerRight) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._membership != other_storage._membership {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._publishStatus != other_storage._publishStatus {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._info != other_storage._info {return false}
        if _storage._base != other_storage._base {return false}
        if _storage._publishAsOwner != other_storage._publishAsOwner {return false}
        if _storage._admin != other_storage._admin {return false}
        if _storage._post != other_storage._post {return false}
        if _storage._layout != other_storage._layout {return false}
        if _storage._banner != other_storage._banner {return false}
        if _storage._netdisk != other_storage._netdisk {return false}
        if _storage._information != other_storage._information {return false}
        if _storage._chat != other_storage._chat {return false}
        if _storage._dataManagement != other_storage._dataManagement {return false}
        if _storage._report != other_storage._report {return false}
        if _storage._feedback != other_storage._feedback {return false}
        if _storage._member != other_storage._member {return false}
        if _storage._recyleBin != other_storage._recyleBin {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCommunityManagerRightList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCommunityManagerRightList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: contact.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PContactLinkInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PContactLinkInfo"

  /// 通讯录联系人的uuid
  var uuid: String = String()

  /// 通讯录联系人的手机号码
  var mobile: String = String()

  /// 通讯录联系人的昵称
  var nickName: String = String()

  /// 通讯录联系人是否已经加入好友。取值：1--已加好友，2--可以加好友，3--不能加好友，4--对方等级高(不能加，也不能邀请)
  var hasLink_p: String = String()

  /// 用户图像url地址
  var headImgURL: String = String()

  /// 用户等级(完全遵循account.proto中ELevelType的规范：0=普通用户,1=VIP用户,2=VIP+用户,3=VO用户,4=游客)	
  var levelType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.mobile)
      case 3: try decoder.decodeSingularStringField(value: &self.nickName)
      case 4: try decoder.decodeSingularStringField(value: &self.hasLink_p)
      case 5: try decoder.decodeSingularStringField(value: &self.headImgURL)
      case 6: try decoder.decodeSingularInt32Field(value: &self.levelType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 2)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 3)
    }
    if !self.hasLink_p.isEmpty {
      try visitor.visitSingularStringField(value: self.hasLink_p, fieldNumber: 4)
    }
    if !self.headImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.headImgURL, fieldNumber: 5)
    }
    if self.levelType != 0 {
      try visitor.visitSingularInt32Field(value: self.levelType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 下载通讯录好友关系
struct Bbproto_PContactLinkInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PContactLinkInfoList"

  var contactUsers: [Bbproto_PContactLinkInfo] = []

  /// 总记录数
  var totalCount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.contactUsers)
      case 2: try decoder.decodeSingularStringField(value: &self.totalCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contactUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contactUsers, fieldNumber: 1)
    }
    if !self.totalCount.isEmpty {
      try visitor.visitSingularStringField(value: self.totalCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 访问设备的最后修改时间
struct Bbproto_PLastModifyInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLastModifyInfo"

  /// 设备串行号
  var devSerial: String = String()

  /// 最后时间
  var modifyTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.devSerial)
      case 2: try decoder.decodeSingularStringField(value: &self.modifyTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.devSerial.isEmpty {
      try visitor.visitSingularStringField(value: self.devSerial, fieldNumber: 1)
    }
    if !self.modifyTime.isEmpty {
      try visitor.visitSingularStringField(value: self.modifyTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PContactLinkInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "mobile"),
    3: .same(proto: "nickName"),
    4: .same(proto: "hasLink"),
    5: .same(proto: "headImgURL"),
    6: .same(proto: "levelType"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PContactLinkInfo) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.mobile != other.mobile {return false}
    if self.nickName != other.nickName {return false}
    if self.hasLink_p != other.hasLink_p {return false}
    if self.headImgURL != other.headImgURL {return false}
    if self.levelType != other.levelType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PContactLinkInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ContactUsers"),
    2: .same(proto: "totalCount"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PContactLinkInfoList) -> Bool {
    if self.contactUsers != other.contactUsers {return false}
    if self.totalCount != other.totalCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLastModifyInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "devSerial"),
    2: .same(proto: "modifyTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLastModifyInfo) -> Bool {
    if self.devSerial != other.devSerial {return false}
    if self.modifyTime != other.modifyTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

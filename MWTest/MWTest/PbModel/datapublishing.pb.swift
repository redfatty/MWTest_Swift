/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: datapublishing.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum Bbproto_ERecommendReason: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///热门推荐
  case hotDog // = 0

  ///TA与您有相同的兴趣
  case sameTaste // = 1

  ///TA与您加入了同个社区
  case joinSameCommunity // = 2

  ///您有N个关注的人也关注（加入）了TA
  case nfollow // = 3

  ///您有N个好友关注（加入）了TA
  case nfriend // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .hotDog
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hotDog
    case 1: self = .sameTaste
    case 2: self = .joinSameCommunity
    case 3: self = .nfollow
    case 4: self = .nfriend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .hotDog: return 0
    case .sameTaste: return 1
    case .joinSameCommunity: return 2
    case .nfollow: return 3
    case .nfriend: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Bbproto_PWords: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PWords"

  var word: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.word)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.word.isEmpty {
      try visitor.visitRepeatedStringField(value: self.word, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PGuy: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGuy"

  var uuid: String = String()

  ///用户名
  var username: String = String()

  ///昵称
  var nickname: String = String()

  ///真实姓名
  var realname: String = String()

  ///个性签名
  var whatsup: String = String()

  ///头像
  var headImgURL: String = String()

  ///等级
  var level: Int32 = 0

  ///粉丝数
  var fansCount: Int32 = 0

  ///0:无关系，1：是粉丝，2：已关注，3：相互关注
  var followShip: Int32 = 0

  ///0:无关系，1：是好友
  var friendShip: Int32 = 0

  ///用来排行的值，表示粉丝数、帖子数、成就数等
  var rankValue: Int32 = 0

  ///距离(单位km)
  var distance: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.username)
      case 3: try decoder.decodeSingularStringField(value: &self.nickname)
      case 4: try decoder.decodeSingularStringField(value: &self.realname)
      case 5: try decoder.decodeSingularStringField(value: &self.whatsup)
      case 6: try decoder.decodeSingularStringField(value: &self.headImgURL)
      case 7: try decoder.decodeSingularInt32Field(value: &self.level)
      case 11: try decoder.decodeSingularInt32Field(value: &self.fansCount)
      case 12: try decoder.decodeSingularInt32Field(value: &self.followShip)
      case 13: try decoder.decodeSingularInt32Field(value: &self.friendShip)
      case 14: try decoder.decodeSingularInt32Field(value: &self.rankValue)
      case 15: try decoder.decodeSingularFloatField(value: &self.distance)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 3)
    }
    if !self.realname.isEmpty {
      try visitor.visitSingularStringField(value: self.realname, fieldNumber: 4)
    }
    if !self.whatsup.isEmpty {
      try visitor.visitSingularStringField(value: self.whatsup, fieldNumber: 5)
    }
    if !self.headImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.headImgURL, fieldNumber: 6)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 7)
    }
    if self.fansCount != 0 {
      try visitor.visitSingularInt32Field(value: self.fansCount, fieldNumber: 11)
    }
    if self.followShip != 0 {
      try visitor.visitSingularInt32Field(value: self.followShip, fieldNumber: 12)
    }
    if self.friendShip != 0 {
      try visitor.visitSingularInt32Field(value: self.friendShip, fieldNumber: 13)
    }
    if self.rankValue != 0 {
      try visitor.visitSingularInt32Field(value: self.rankValue, fieldNumber: 14)
    }
    if self.distance != 0 {
      try visitor.visitSingularFloatField(value: self.distance, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PGuyList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGuyList"

  var guy: [Bbproto_PGuy] = []

  /// 不分页的结果总数，大于等于guy的size
  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.guy)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.guy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.guy, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PTopicNews: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTopicNews"

  ///话题名称不带#号的
  var topic: String {
    get {return _storage._topic}
    set {_uniqueStorage()._topic = newValue}
  }

  ///相关的话题
  var rel: [String] {
    get {return _storage._rel}
    set {_uniqueStorage()._rel = newValue}
  }

  ///话题查看数
  var views: Int32 {
    get {return _storage._views}
    set {_uniqueStorage()._views = newValue}
  }

  ///参与该话题的帖子数
  var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  ///博文列表
  var posts: Bbproto_PPostViewList {
    get {return _storage._posts ?? Bbproto_PPostViewList()}
    set {_uniqueStorage()._posts = newValue}
  }
  /// Returns true if `posts` has been explicitly set.
  var hasPosts: Bool {return _storage._posts != nil}
  /// Clears the value of `posts`. Subsequent reads from it will return its default value.
  mutating func clearPosts() {_storage._posts = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._topic)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._rel)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._views)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._count)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._posts)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._topic.isEmpty {
        try visitor.visitSingularStringField(value: _storage._topic, fieldNumber: 1)
      }
      if !_storage._rel.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._rel, fieldNumber: 2)
      }
      if _storage._views != 0 {
        try visitor.visitSingularInt32Field(value: _storage._views, fieldNumber: 3)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 4)
      }
      if let v = _storage._posts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PPostData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostData"

  ///帖子数
  var posts: Int32 = 0

  ///查看数
  var views: Int32 = 0

  ///投票（点赞）数
  var votes: Int32 = 0

  ///评论数
  var comments: Int32 = 0

  ///分享数
  var shares: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.posts)
      case 2: try decoder.decodeSingularInt32Field(value: &self.views)
      case 3: try decoder.decodeSingularInt32Field(value: &self.votes)
      case 4: try decoder.decodeSingularInt32Field(value: &self.comments)
      case 5: try decoder.decodeSingularInt32Field(value: &self.shares)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.posts != 0 {
      try visitor.visitSingularInt32Field(value: self.posts, fieldNumber: 1)
    }
    if self.views != 0 {
      try visitor.visitSingularInt32Field(value: self.views, fieldNumber: 2)
    }
    if self.votes != 0 {
      try visitor.visitSingularInt32Field(value: self.votes, fieldNumber: 3)
    }
    if self.comments != 0 {
      try visitor.visitSingularInt32Field(value: self.comments, fieldNumber: 4)
    }
    if self.shares != 0 {
      try visitor.visitSingularInt32Field(value: self.shares, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PRegionData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRegionData"

  ///形如CN;44或US; 即国外代码只有国家代码和分号，当region在本地字典中查找不到时，
  ///请忽略此条数据，归到“其它”项里面，不要显示空白出来
  var region: String = String()

  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.region)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PAgeData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAgeData"

  var section: Int32 = 0

  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.section)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.section != 0 {
      try visitor.visitSingularInt32Field(value: self.section, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFollowData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFollowData"

  /// 粉丝(成员)总数
  var total: Int32 = 0

  /// 男粉(成员)丝数
  var male: Int32 = 0

  /// 女(成员)粉丝数
  var female: Int32 = 0

  /// 活跃数
  var active: Int32 = 0

  /// 地区分布
  var region: [Bbproto_PRegionData] = []

  /// 年龄分布
  var age: [Bbproto_PAgeData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularInt32Field(value: &self.male)
      case 3: try decoder.decodeSingularInt32Field(value: &self.female)
      case 4: try decoder.decodeSingularInt32Field(value: &self.active)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.region)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.age)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if self.male != 0 {
      try visitor.visitSingularInt32Field(value: self.male, fieldNumber: 2)
    }
    if self.female != 0 {
      try visitor.visitSingularInt32Field(value: self.female, fieldNumber: 3)
    }
    if self.active != 0 {
      try visitor.visitSingularInt32Field(value: self.active, fieldNumber: 4)
    }
    if !self.region.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.region, fieldNumber: 5)
    }
    if !self.age.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.age, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PDayData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDayData"

  /// 数据日期
  var date: String {
    get {return _storage._date}
    set {_uniqueStorage()._date = newValue}
  }

  /// 帐户价值
  var worth: Int32 {
    get {return _storage._worth}
    set {_uniqueStorage()._worth = newValue}
  }

  /// 粉丝（成员）数据
  var follow: Bbproto_PFollowData {
    get {return _storage._follow ?? Bbproto_PFollowData()}
    set {_uniqueStorage()._follow = newValue}
  }
  /// Returns true if `follow` has been explicitly set.
  var hasFollow: Bool {return _storage._follow != nil}
  /// Clears the value of `follow`. Subsequent reads from it will return its default value.
  mutating func clearFollow() {_storage._follow = nil}

  /// 帖子数据
  var post: Bbproto_PPostData {
    get {return _storage._post ?? Bbproto_PPostData()}
    set {_uniqueStorage()._post = newValue}
  }
  /// Returns true if `post` has been explicitly set.
  var hasPost: Bool {return _storage._post != nil}
  /// Clears the value of `post`. Subsequent reads from it will return its default value.
  mutating func clearPost() {_storage._post = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._date)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._worth)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._follow)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._post)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._date.isEmpty {
        try visitor.visitSingularStringField(value: _storage._date, fieldNumber: 1)
      }
      if _storage._worth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._worth, fieldNumber: 2)
      }
      if let v = _storage._follow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._post {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PDaysData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDaysData"

  var data: [Bbproto_PDayData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 最新的数据
struct Bbproto_PNewestData: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNewestData"

  /// 数据日期
  var date: String = String()

  /// 粉丝(成员)数
  var follows: Int32 = 0

  ///帖子数
  var posts: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.date)
      case 2: try decoder.decodeSingularInt32Field(value: &self.follows)
      case 3: try decoder.decodeSingularInt32Field(value: &self.posts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 1)
    }
    if self.follows != 0 {
      try visitor.visitSingularInt32Field(value: self.follows, fieldNumber: 2)
    }
    if self.posts != 0 {
      try visitor.visitSingularInt32Field(value: self.posts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PGame: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGame"

  ///基本信息
  var info: Bbproto_PGuy {
    get {return _storage._info ?? Bbproto_PGuy()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_storage._info = nil}

  ///俱乐部
  var club: [Bbproto_PGuy] {
    get {return _storage._club}
    set {_uniqueStorage()._club = newValue}
  }

  ///职业队员
  var player: [Bbproto_PGuy] {
    get {return _storage._player}
    set {_uniqueStorage()._player = newValue}
  }

  ///名人
  var famous: [Bbproto_PGuy] {
    get {return _storage._famous}
    set {_uniqueStorage()._famous = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._info)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._club)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._player)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._famous)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._club.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._club, fieldNumber: 3)
      }
      if !_storage._player.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._player, fieldNumber: 4)
      }
      if !_storage._famous.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._famous, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PGameList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGameList"

  ///"game" "club" "famous"
  var type: String = String()

  var game: [Bbproto_PGame] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.game)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.game.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.game, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PRank: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRank"

  ///排行名次
  var rank: Int32 = 0

  ///用来排行的值，如粉丝数、帖子数、成就数
  var rankValue: Int32 = 0

  ///排名列表
  var guys: [Bbproto_PGuy] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rank)
      case 2: try decoder.decodeSingularInt32Field(value: &self.rankValue)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.guys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rank != 0 {
      try visitor.visitSingularInt32Field(value: self.rank, fieldNumber: 1)
    }
    if self.rankValue != 0 {
      try visitor.visitSingularInt32Field(value: self.rankValue, fieldNumber: 2)
    }
    if !self.guys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.guys, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PPostPreview: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostPreview"

  ///帖子ID
  var postID: Int64 = 0

  ///帖子类型
  var postType: Bbproto_EPostType = Bbproto_EPostType.text

  ///资源类型，当为VideoOther时mediaURL有效
  var resType: Bbproto_EResourceType = Bbproto_EResourceType.txt

  ///预览图片，视频首帧（或截图）也是在此提供
  var thumbURL: String = String()

  ///预览图高
  var hight: Int32 = 0

  ///预览图宽
  var width: Int32 = 0

  ///当resType为VideoOther时，填充资源地址
  var mediaURL: String = String()

  ///帖子标题，资讯帖有效
  var title: String = String()

  ///帖子文本内容，不是所有的，暂定取前50个字符
  var body: String = String()

  ///帖子发布时间
  var time: Int64 = 0

  ///作者ID或社区ID
  var ucid: String = String()

  ///动态帖的作者或资讯帖的社区名称
  var name: String = String()

  ///动态帖作者头像或资讯帖社区头像
  var headURL: String = String()

  ///作者的用户等级
  var level: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.postID)
      case 2: try decoder.decodeSingularEnumField(value: &self.postType)
      case 3: try decoder.decodeSingularEnumField(value: &self.resType)
      case 4: try decoder.decodeSingularStringField(value: &self.thumbURL)
      case 5: try decoder.decodeSingularInt32Field(value: &self.hight)
      case 6: try decoder.decodeSingularInt32Field(value: &self.width)
      case 7: try decoder.decodeSingularStringField(value: &self.mediaURL)
      case 8: try decoder.decodeSingularStringField(value: &self.title)
      case 9: try decoder.decodeSingularStringField(value: &self.body)
      case 10: try decoder.decodeSingularInt64Field(value: &self.time)
      case 11: try decoder.decodeSingularStringField(value: &self.ucid)
      case 12: try decoder.decodeSingularStringField(value: &self.name)
      case 13: try decoder.decodeSingularStringField(value: &self.headURL)
      case 14: try decoder.decodeSingularInt32Field(value: &self.level)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.postID != 0 {
      try visitor.visitSingularInt64Field(value: self.postID, fieldNumber: 1)
    }
    if self.postType != Bbproto_EPostType.text {
      try visitor.visitSingularEnumField(value: self.postType, fieldNumber: 2)
    }
    if self.resType != Bbproto_EResourceType.txt {
      try visitor.visitSingularEnumField(value: self.resType, fieldNumber: 3)
    }
    if !self.thumbURL.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbURL, fieldNumber: 4)
    }
    if self.hight != 0 {
      try visitor.visitSingularInt32Field(value: self.hight, fieldNumber: 5)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 6)
    }
    if !self.mediaURL.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaURL, fieldNumber: 7)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 8)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 9)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 10)
    }
    if !self.ucid.isEmpty {
      try visitor.visitSingularStringField(value: self.ucid, fieldNumber: 11)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 12)
    }
    if !self.headURL.isEmpty {
      try visitor.visitSingularStringField(value: self.headURL, fieldNumber: 13)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PRecommendReason: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendReason"

  var reason: Bbproto_ERecommendReason = Bbproto_ERecommendReason.hotDog

  ///多少个关注的人（或好友）
  var num: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.reason)
      case 2: try decoder.decodeSingularInt32Field(value: &self.num)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reason != Bbproto_ERecommendReason.hotDog {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    if self.num != 0 {
      try visitor.visitSingularInt32Field(value: self.num, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PDiscoverCard: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDiscoverCard"

  /// 卡片的数据类型（6用户 7社区 8话题 9帖子）
  var category: Int32 {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  ///推荐原因，仅当推荐用户或社区时有效
  var reason: Bbproto_PRecommendReason {
    get {return _storage._reason ?? Bbproto_PRecommendReason()}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {_storage._reason = nil}

  ///用户
  var user: Bbproto_PGuy {
    get {return _storage._user ?? Bbproto_PGuy()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  ///社区
  var community: Bbproto_PCommunityBase {
    get {return _storage._community ?? Bbproto_PCommunityBase()}
    set {_uniqueStorage()._community = newValue}
  }
  /// Returns true if `community` has been explicitly set.
  var hasCommunity: Bool {return _storage._community != nil}
  /// Clears the value of `community`. Subsequent reads from it will return its default value.
  mutating func clearCommunity() {_storage._community = nil}

  ///话题，不含#号，此时postPreview有效
  var topic: String {
    get {return _storage._topic}
    set {_uniqueStorage()._topic = newValue}
  }

  ///帖子，根据里面的postType知道是资讯帖还是动态帖
  var postPreview: Bbproto_PPostPreview {
    get {return _storage._postPreview ?? Bbproto_PPostPreview()}
    set {_uniqueStorage()._postPreview = newValue}
  }
  /// Returns true if `postPreview` has been explicitly set.
  var hasPostPreview: Bool {return _storage._postPreview != nil}
  /// Clears the value of `postPreview`. Subsequent reads from it will return its default value.
  mutating func clearPostPreview() {_storage._postPreview = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._category)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._reason)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._community)
        case 8: try decoder.decodeSingularStringField(value: &_storage._topic)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._postPreview)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._category != 0 {
        try visitor.visitSingularInt32Field(value: _storage._category, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._community {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._topic.isEmpty {
        try visitor.visitSingularStringField(value: _storage._topic, fieldNumber: 8)
      }
      if let v = _storage._postPreview {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PDiscover: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDiscover"

  var list: [Bbproto_PDiscoverCard] = []

  ///加载下一页时（或下拉刷新时）要上传此参数
  var context: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularStringField(value: &self.context)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if !self.context.isEmpty {
      try visitor.visitSingularStringField(value: self.context, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFansFilterParam: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFansFilterParam"

  /// 谁的粉丝
  var uuid: String = String()

  /// 性别筛选 0女, 1男, 其它情况不过滤
  var gender: Int32 = 0

  /// 地区筛选，格式如CN;4403、CN;44，配合下面的negate使用
  var region: [String] = []

  /// true表示要对region取反，即排除掉这些地区的粉丝
  var negate: Bool = false

  /// 反选掉的用户
  var skipUuid: [String] = []

  /// 是否过滤掉VO
  var skipVo: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 3: try decoder.decodeRepeatedStringField(value: &self.region)
      case 4: try decoder.decodeSingularBoolField(value: &self.negate)
      case 5: try decoder.decodeRepeatedStringField(value: &self.skipUuid)
      case 6: try decoder.decodeSingularBoolField(value: &self.skipVo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitRepeatedStringField(value: self.region, fieldNumber: 3)
    }
    if self.negate != false {
      try visitor.visitSingularBoolField(value: self.negate, fieldNumber: 4)
    }
    if !self.skipUuid.isEmpty {
      try visitor.visitRepeatedStringField(value: self.skipUuid, fieldNumber: 5)
    }
    if self.skipVo != false {
      try visitor.visitSingularBoolField(value: self.skipVo, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_ERecommendReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HotDog"),
    1: .same(proto: "SameTaste"),
    2: .same(proto: "JoinSameCommunity"),
    3: .same(proto: "NFollow"),
    4: .same(proto: "NFriend"),
  ]
}

extension Bbproto_PWords: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "word"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PWords) -> Bool {
    if self.word != other.word {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGuy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "username"),
    3: .same(proto: "nickname"),
    4: .same(proto: "realname"),
    5: .same(proto: "whatsup"),
    6: .same(proto: "headImgURL"),
    7: .same(proto: "level"),
    11: .same(proto: "fansCount"),
    12: .same(proto: "followShip"),
    13: .same(proto: "friendShip"),
    14: .same(proto: "rankValue"),
    15: .same(proto: "distance"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PGuy) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.username != other.username {return false}
    if self.nickname != other.nickname {return false}
    if self.realname != other.realname {return false}
    if self.whatsup != other.whatsup {return false}
    if self.headImgURL != other.headImgURL {return false}
    if self.level != other.level {return false}
    if self.fansCount != other.fansCount {return false}
    if self.followShip != other.followShip {return false}
    if self.friendShip != other.friendShip {return false}
    if self.rankValue != other.rankValue {return false}
    if self.distance != other.distance {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGuyList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "guy"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PGuyList) -> Bool {
    if self.guy != other.guy {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTopicNews: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topic"),
    2: .same(proto: "rel"),
    3: .same(proto: "views"),
    4: .same(proto: "count"),
    5: .same(proto: "posts"),
  ]

  fileprivate class _StorageClass {
    var _topic: String = String()
    var _rel: [String] = []
    var _views: Int32 = 0
    var _count: Int32 = 0
    var _posts: Bbproto_PPostViewList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _topic = source._topic
      _rel = source._rel
      _views = source._views
      _count = source._count
      _posts = source._posts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PTopicNews) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._topic != other_storage._topic {return false}
        if _storage._rel != other_storage._rel {return false}
        if _storage._views != other_storage._views {return false}
        if _storage._count != other_storage._count {return false}
        if _storage._posts != other_storage._posts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "posts"),
    2: .same(proto: "views"),
    3: .same(proto: "votes"),
    4: .same(proto: "comments"),
    5: .same(proto: "shares"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostData) -> Bool {
    if self.posts != other.posts {return false}
    if self.views != other.views {return false}
    if self.votes != other.votes {return false}
    if self.comments != other.comments {return false}
    if self.shares != other.shares {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRegionData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRegionData) -> Bool {
    if self.region != other.region {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAgeData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "section"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAgeData) -> Bool {
    if self.section != other.section {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFollowData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "male"),
    3: .same(proto: "female"),
    4: .same(proto: "active"),
    5: .same(proto: "region"),
    6: .same(proto: "age"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFollowData) -> Bool {
    if self.total != other.total {return false}
    if self.male != other.male {return false}
    if self.female != other.female {return false}
    if self.active != other.active {return false}
    if self.region != other.region {return false}
    if self.age != other.age {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDayData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "worth"),
    3: .same(proto: "follow"),
    4: .same(proto: "post"),
  ]

  fileprivate class _StorageClass {
    var _date: String = String()
    var _worth: Int32 = 0
    var _follow: Bbproto_PFollowData? = nil
    var _post: Bbproto_PPostData? = nil

    init() {}

    init(copying source: _StorageClass) {
      _date = source._date
      _worth = source._worth
      _follow = source._follow
      _post = source._post
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PDayData) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._date != other_storage._date {return false}
        if _storage._worth != other_storage._worth {return false}
        if _storage._follow != other_storage._follow {return false}
        if _storage._post != other_storage._post {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDaysData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PDaysData) -> Bool {
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNewestData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "date"),
    2: .same(proto: "follows"),
    3: .same(proto: "posts"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNewestData) -> Bool {
    if self.date != other.date {return false}
    if self.follows != other.follows {return false}
    if self.posts != other.posts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGame: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "info"),
    3: .same(proto: "club"),
    4: .same(proto: "player"),
    5: .same(proto: "famous"),
  ]

  fileprivate class _StorageClass {
    var _info: Bbproto_PGuy? = nil
    var _club: [Bbproto_PGuy] = []
    var _player: [Bbproto_PGuy] = []
    var _famous: [Bbproto_PGuy] = []

    init() {}

    init(copying source: _StorageClass) {
      _info = source._info
      _club = source._club
      _player = source._player
      _famous = source._famous
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PGame) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._info != other_storage._info {return false}
        if _storage._club != other_storage._club {return false}
        if _storage._player != other_storage._player {return false}
        if _storage._famous != other_storage._famous {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGameList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "game"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PGameList) -> Bool {
    if self.type != other.type {return false}
    if self.game != other.game {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRank: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rank"),
    2: .same(proto: "rankValue"),
    5: .same(proto: "guys"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRank) -> Bool {
    if self.rank != other.rank {return false}
    if self.rankValue != other.rankValue {return false}
    if self.guys != other.guys {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostPreview: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postId"),
    2: .same(proto: "postType"),
    3: .same(proto: "resType"),
    4: .same(proto: "thumbURL"),
    5: .same(proto: "hight"),
    6: .same(proto: "width"),
    7: .same(proto: "mediaURL"),
    8: .same(proto: "title"),
    9: .same(proto: "body"),
    10: .same(proto: "time"),
    11: .same(proto: "ucid"),
    12: .same(proto: "name"),
    13: .same(proto: "headURL"),
    14: .same(proto: "level"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostPreview) -> Bool {
    if self.postID != other.postID {return false}
    if self.postType != other.postType {return false}
    if self.resType != other.resType {return false}
    if self.thumbURL != other.thumbURL {return false}
    if self.hight != other.hight {return false}
    if self.width != other.width {return false}
    if self.mediaURL != other.mediaURL {return false}
    if self.title != other.title {return false}
    if self.body != other.body {return false}
    if self.time != other.time {return false}
    if self.ucid != other.ucid {return false}
    if self.name != other.name {return false}
    if self.headURL != other.headURL {return false}
    if self.level != other.level {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendReason: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .same(proto: "num"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendReason) -> Bool {
    if self.reason != other.reason {return false}
    if self.num != other.num {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDiscoverCard: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    5: .same(proto: "reason"),
    6: .same(proto: "user"),
    7: .same(proto: "community"),
    8: .same(proto: "topic"),
    9: .same(proto: "postPreview"),
  ]

  fileprivate class _StorageClass {
    var _category: Int32 = 0
    var _reason: Bbproto_PRecommendReason? = nil
    var _user: Bbproto_PGuy? = nil
    var _community: Bbproto_PCommunityBase? = nil
    var _topic: String = String()
    var _postPreview: Bbproto_PPostPreview? = nil

    init() {}

    init(copying source: _StorageClass) {
      _category = source._category
      _reason = source._reason
      _user = source._user
      _community = source._community
      _topic = source._topic
      _postPreview = source._postPreview
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PDiscoverCard) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._category != other_storage._category {return false}
        if _storage._reason != other_storage._reason {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._community != other_storage._community {return false}
        if _storage._topic != other_storage._topic {return false}
        if _storage._postPreview != other_storage._postPreview {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDiscover: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "context"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PDiscover) -> Bool {
    if self.list != other.list {return false}
    if self.context != other.context {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFansFilterParam: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "gender"),
    3: .same(proto: "region"),
    4: .same(proto: "negate"),
    5: .same(proto: "skipUuid"),
    6: .same(proto: "skipVO"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFansFilterParam) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.gender != other.gender {return false}
    if self.region != other.region {return false}
    if self.negate != other.negate {return false}
    if self.skipUuid != other.skipUuid {return false}
    if self.skipVo != other.skipVo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

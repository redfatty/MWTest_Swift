/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: login.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PLogin: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLogin"

  /// 这次登录时间
  var thisLoginTime: Int64 {
    get {return _storage._thisLoginTime}
    set {_uniqueStorage()._thisLoginTime = newValue}
  }

  /// 上次登录时间
  var lastLoginTime: Int64 {
    get {return _storage._lastLoginTime}
    set {_uniqueStorage()._lastLoginTime = newValue}
  }

  /// 账户状态，1：封号，unix时间戳：冻结账户截至时间，0：正常
  var state: Int64 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// 用户是否需要强制绑定手机号码，如果是，则需要绑定手机号码
  var forceBindPhone: Bool {
    get {return _storage._forceBindPhone}
    set {_uniqueStorage()._forceBindPhone = newValue}
  }

  /// 是否新注册用户标识，true为新用户，false为老用户
  var newUser: Bool {
    get {return _storage._newUser}
    set {_uniqueStorage()._newUser = newValue}
  }

  /// 用户ID
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 统一访问令牌
  var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  /// 用户昵称
  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  /// 用户头像URL
  var imgURL: String {
    get {return _storage._imgURL}
    set {_uniqueStorage()._imgURL = newValue}
  }

  /// 用户名称
  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  /// 用户注册时间
  var registerTime: Int64 {
    get {return _storage._registerTime}
    set {_uniqueStorage()._registerTime = newValue}
  }

  /// 会员等级信息
  var levelInfo: Bbproto_PLevelInfo {
    get {return _storage._levelInfo ?? Bbproto_PLevelInfo()}
    set {_uniqueStorage()._levelInfo = newValue}
  }
  /// Returns true if `levelInfo` has been explicitly set.
  var hasLevelInfo: Bool {return _storage._levelInfo != nil}
  /// Clears the value of `levelInfo`. Subsequent reads from it will return its default value.
  mutating func clearLevelInfo() {_storage._levelInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._thisLoginTime)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._lastLoginTime)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._state)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._forceBindPhone)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._newUser)
        case 6: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 7: try decoder.decodeSingularStringField(value: &_storage._token)
        case 8: try decoder.decodeSingularStringField(value: &_storage._nickname)
        case 9: try decoder.decodeSingularStringField(value: &_storage._imgURL)
        case 10: try decoder.decodeSingularStringField(value: &_storage._username)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._registerTime)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._levelInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._thisLoginTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._thisLoginTime, fieldNumber: 1)
      }
      if _storage._lastLoginTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastLoginTime, fieldNumber: 2)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt64Field(value: _storage._state, fieldNumber: 3)
      }
      if _storage._forceBindPhone != false {
        try visitor.visitSingularBoolField(value: _storage._forceBindPhone, fieldNumber: 4)
      }
      if _storage._newUser != false {
        try visitor.visitSingularBoolField(value: _storage._newUser, fieldNumber: 5)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 6)
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 7)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 8)
      }
      if !_storage._imgURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imgURL, fieldNumber: 9)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 10)
      }
      if _storage._registerTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._registerTime, fieldNumber: 11)
      }
      if let v = _storage._levelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PLogin: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ThisLoginTime"),
    2: .same(proto: "LastLoginTime"),
    3: .same(proto: "State"),
    4: .same(proto: "forceBindPhone"),
    5: .same(proto: "newUser"),
    6: .same(proto: "uuid"),
    7: .same(proto: "token"),
    8: .same(proto: "nickname"),
    9: .same(proto: "imgURL"),
    10: .same(proto: "username"),
    11: .same(proto: "RegisterTime"),
    12: .same(proto: "levelInfo"),
  ]

  fileprivate class _StorageClass {
    var _thisLoginTime: Int64 = 0
    var _lastLoginTime: Int64 = 0
    var _state: Int64 = 0
    var _forceBindPhone: Bool = false
    var _newUser: Bool = false
    var _uuid: String = String()
    var _token: String = String()
    var _nickname: String = String()
    var _imgURL: String = String()
    var _username: String = String()
    var _registerTime: Int64 = 0
    var _levelInfo: Bbproto_PLevelInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _thisLoginTime = source._thisLoginTime
      _lastLoginTime = source._lastLoginTime
      _state = source._state
      _forceBindPhone = source._forceBindPhone
      _newUser = source._newUser
      _uuid = source._uuid
      _token = source._token
      _nickname = source._nickname
      _imgURL = source._imgURL
      _username = source._username
      _registerTime = source._registerTime
      _levelInfo = source._levelInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PLogin) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._thisLoginTime != other_storage._thisLoginTime {return false}
        if _storage._lastLoginTime != other_storage._lastLoginTime {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._forceBindPhone != other_storage._forceBindPhone {return false}
        if _storage._newUser != other_storage._newUser {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._token != other_storage._token {return false}
        if _storage._nickname != other_storage._nickname {return false}
        if _storage._imgURL != other_storage._imgURL {return false}
        if _storage._username != other_storage._username {return false}
        if _storage._registerTime != other_storage._registerTime {return false}
        if _storage._levelInfo != other_storage._levelInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: netdisk.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PNetFile: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNetFile"

  /// 唯一标识
  var fileID: String {
    get {return _storage._fileID}
    set {_uniqueStorage()._fileID = newValue}
  }

  /// 社区Id
  var communityID: String {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  /// 作者uuid
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// 文件objectKey
  var objectKey: String {
    get {return _storage._objectKey}
    set {_uniqueStorage()._objectKey = newValue}
  }

  /// 文件url
  var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  /// 文件的扩展名。示范：mp3
  var extension_p: String {
    get {return _storage._extension_p}
    set {_uniqueStorage()._extension_p = newValue}
  }

  /// 文件长度
  var fileSize: Int64 {
    get {return _storage._fileSize}
    set {_uniqueStorage()._fileSize = newValue}
  }

  /// 文件的md5 hexstring
  var fileDigest: String {
    get {return _storage._fileDigest}
    set {_uniqueStorage()._fileDigest = newValue}
  }

  /// 文件的创建时间
  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  /// 文件转发标志，0--可以转发，1--不可以
  var transferFlag: Bool {
    get {return _storage._transferFlag}
    set {_uniqueStorage()._transferFlag = newValue}
  }

  /// 文件共享标志，0--可以共享，1--不可以
  var shareFlag: Bool {
    get {return _storage._shareFlag}
    set {_uniqueStorage()._shareFlag = newValue}
  }

  /// 文件可以收藏，0--可以收藏，1--不可以
  var conserveFlag: Bool {
    get {return _storage._conserveFlag}
    set {_uniqueStorage()._conserveFlag = newValue}
  }

  /// 文件的标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// 文件的描述
  var desc: String {
    get {return _storage._desc}
    set {_uniqueStorage()._desc = newValue}
  }

  /// 文件的备注信息
  var remark: String {
    get {return _storage._remark}
    set {_uniqueStorage()._remark = newValue}
  }

  /// 文件缩略图objectKey
  var miniObjectKey: String {
    get {return _storage._miniObjectKey}
    set {_uniqueStorage()._miniObjectKey = newValue}
  }

  /// 文件缩略图url
  var miniURL: String {
    get {return _storage._miniURL}
    set {_uniqueStorage()._miniURL = newValue}
  }

  /// 帖子ID
  var postID: String {
    get {return _storage._postID}
    set {_uniqueStorage()._postID = newValue}
  }

  /// 评论数
  var commentsCnt: Int32 {
    get {return _storage._commentsCnt}
    set {_uniqueStorage()._commentsCnt = newValue}
  }

  /// 点赞数
  var thumbsupCnt: Int32 {
    get {return _storage._thumbsupCnt}
    set {_uniqueStorage()._thumbsupCnt = newValue}
  }

  /// 帖子类型 3:视频帖,5:新闻帖,6:原创录播
  var postTyp: Int32 {
    get {return _storage._postTyp}
    set {_uniqueStorage()._postTyp = newValue}
  }

  /// 举报次数
  var tipoffTimes: Int32 {
    get {return _storage._tipoffTimes}
    set {_uniqueStorage()._tipoffTimes = newValue}
  }

  /// 播放次数
  var playTimes: Int32 {
    get {return _storage._playTimes}
    set {_uniqueStorage()._playTimes = newValue}
  }

  /// 0:审核通过，-1：待审核，-2:审核不通过, -3: 视频已删除, -4:被举报下线
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 创建者信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 自己是否已点赞,true:是; false:否
  var voted: Bool {
    get {return _storage._voted}
    set {_uniqueStorage()._voted = newValue}
  }

  /// 自己是否已收藏,true:是; false:否
  var collected: Bool {
    get {return _storage._collected}
    set {_uniqueStorage()._collected = newValue}
  }

  /// 是否有删除权限(作者、社区创建者、管理员)
  var canDelete: Bool {
    get {return _storage._canDelete}
    set {_uniqueStorage()._canDelete = newValue}
  }

  /// 社区状态；0社区开启状态；1社区关闭状态；
  var communityStatus: Int32 {
    get {return _storage._communityStatus}
    set {_uniqueStorage()._communityStatus = newValue}
  }

  /// 资源类型 3; //本地视频,4; //第三方视频,5; //长视频, 6,原创录播
  var resourceType: Int32 {
    get {return _storage._resourceType}
    set {_uniqueStorage()._resourceType = newValue}
  }

  /// 关注关系, 0:无关注关系, 1: 访客被作者关注, 2: 访客关注了作者, 3:已相互关注
  var followShip: Int32 {
    get {return _storage._followShip}
    set {_uniqueStorage()._followShip = newValue}
  }

  /// 参与的话题
  var topic: [String] {
    get {return _storage._topic}
    set {_uniqueStorage()._topic = newValue}
  }

  /// 分类 0:全部，1:精华(与PCategory对应)
  var category: Int32 {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  /// 用户与社区的关系，-1无关系，0为拥有者，1为管理者，2为已关注
  var membership: Int32 {
    get {return _storage._membership}
    set {_uniqueStorage()._membership = newValue}
  }

  /// 是否同步
  var isSync: Bool {
    get {return _storage._isSync}
    set {_uniqueStorage()._isSync = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._fileID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._communityID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 4: try decoder.decodeSingularStringField(value: &_storage._objectKey)
        case 5: try decoder.decodeSingularStringField(value: &_storage._url)
        case 6: try decoder.decodeSingularStringField(value: &_storage._extension_p)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._fileSize)
        case 8: try decoder.decodeSingularStringField(value: &_storage._fileDigest)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._transferFlag)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._shareFlag)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._conserveFlag)
        case 13: try decoder.decodeSingularStringField(value: &_storage._title)
        case 14: try decoder.decodeSingularStringField(value: &_storage._desc)
        case 15: try decoder.decodeSingularStringField(value: &_storage._remark)
        case 16: try decoder.decodeSingularStringField(value: &_storage._miniObjectKey)
        case 17: try decoder.decodeSingularStringField(value: &_storage._miniURL)
        case 18: try decoder.decodeSingularStringField(value: &_storage._postID)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._commentsCnt)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._thumbsupCnt)
        case 21: try decoder.decodeSingularInt32Field(value: &_storage._postTyp)
        case 22: try decoder.decodeSingularInt32Field(value: &_storage._tipoffTimes)
        case 23: try decoder.decodeSingularInt32Field(value: &_storage._playTimes)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 26: try decoder.decodeSingularBoolField(value: &_storage._voted)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._collected)
        case 28: try decoder.decodeSingularBoolField(value: &_storage._canDelete)
        case 29: try decoder.decodeSingularInt32Field(value: &_storage._communityStatus)
        case 30: try decoder.decodeSingularInt32Field(value: &_storage._resourceType)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._followShip)
        case 32: try decoder.decodeRepeatedStringField(value: &_storage._topic)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._category)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._membership)
        case 35: try decoder.decodeSingularBoolField(value: &_storage._isSync)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._fileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fileID, fieldNumber: 1)
      }
      if !_storage._communityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._communityID, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 3)
      }
      if !_storage._objectKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._objectKey, fieldNumber: 4)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 5)
      }
      if !_storage._extension_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._extension_p, fieldNumber: 6)
      }
      if _storage._fileSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fileSize, fieldNumber: 7)
      }
      if !_storage._fileDigest.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fileDigest, fieldNumber: 8)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 9)
      }
      if _storage._transferFlag != false {
        try visitor.visitSingularBoolField(value: _storage._transferFlag, fieldNumber: 10)
      }
      if _storage._shareFlag != false {
        try visitor.visitSingularBoolField(value: _storage._shareFlag, fieldNumber: 11)
      }
      if _storage._conserveFlag != false {
        try visitor.visitSingularBoolField(value: _storage._conserveFlag, fieldNumber: 12)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 13)
      }
      if !_storage._desc.isEmpty {
        try visitor.visitSingularStringField(value: _storage._desc, fieldNumber: 14)
      }
      if !_storage._remark.isEmpty {
        try visitor.visitSingularStringField(value: _storage._remark, fieldNumber: 15)
      }
      if !_storage._miniObjectKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._miniObjectKey, fieldNumber: 16)
      }
      if !_storage._miniURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._miniURL, fieldNumber: 17)
      }
      if !_storage._postID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._postID, fieldNumber: 18)
      }
      if _storage._commentsCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._commentsCnt, fieldNumber: 19)
      }
      if _storage._thumbsupCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._thumbsupCnt, fieldNumber: 20)
      }
      if _storage._postTyp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._postTyp, fieldNumber: 21)
      }
      if _storage._tipoffTimes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tipoffTimes, fieldNumber: 22)
      }
      if _storage._playTimes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playTimes, fieldNumber: 23)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 24)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if _storage._voted != false {
        try visitor.visitSingularBoolField(value: _storage._voted, fieldNumber: 26)
      }
      if _storage._collected != false {
        try visitor.visitSingularBoolField(value: _storage._collected, fieldNumber: 27)
      }
      if _storage._canDelete != false {
        try visitor.visitSingularBoolField(value: _storage._canDelete, fieldNumber: 28)
      }
      if _storage._communityStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._communityStatus, fieldNumber: 29)
      }
      if _storage._resourceType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._resourceType, fieldNumber: 30)
      }
      if _storage._followShip != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followShip, fieldNumber: 31)
      }
      if !_storage._topic.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._topic, fieldNumber: 32)
      }
      if _storage._category != 0 {
        try visitor.visitSingularInt32Field(value: _storage._category, fieldNumber: 33)
      }
      if _storage._membership != 0 {
        try visitor.visitSingularInt32Field(value: _storage._membership, fieldNumber: 34)
      }
      if _storage._isSync != false {
        try visitor.visitSingularBoolField(value: _storage._isSync, fieldNumber: 35)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PNetFilelist: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNetFilelist"

  var netFile: [Bbproto_PNetFile] = []

  ///总数量
  var diskSize: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.netFile)
      case 2: try decoder.decodeSingularInt32Field(value: &self.diskSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.netFile.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.netFile, fieldNumber: 1)
    }
    if self.diskSize != 0 {
      try visitor.visitSingularInt32Field(value: self.diskSize, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCategory: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCategory"

  ///分类ID
  var category: Int32 = 0

  /// 分类名称
  var categoryNm: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.category)
      case 2: try decoder.decodeSingularStringField(value: &self.categoryNm)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.category != 0 {
      try visitor.visitSingularInt32Field(value: self.category, fieldNumber: 1)
    }
    if !self.categoryNm.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryNm, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLabelStatusList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLabelStatusList"

  ///视频标签状态列表
  var list: [Bbproto_PLabelStatus] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLabelStatus: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLabelStatus"

  ///分类
  var category: Bbproto_PCategory {
    get {return _storage._category ?? Bbproto_PCategory()}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {_storage._category = nil}

  ///是否有视频
  var hasVideo_p: Bool {
    get {return _storage._hasVideo_p}
    set {_uniqueStorage()._hasVideo_p = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._category)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._hasVideo_p)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._hasVideo_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasVideo_p, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PNetFile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileId"),
    2: .same(proto: "communityId"),
    3: .same(proto: "uuid"),
    4: .same(proto: "objectKey"),
    5: .same(proto: "url"),
    6: .same(proto: "extension"),
    7: .same(proto: "fileSize"),
    8: .same(proto: "fileDigest"),
    9: .same(proto: "createTime"),
    10: .same(proto: "transferFlag"),
    11: .same(proto: "shareFlag"),
    12: .same(proto: "conserveFlag"),
    13: .same(proto: "title"),
    14: .same(proto: "desc"),
    15: .same(proto: "remark"),
    16: .same(proto: "miniObjectKey"),
    17: .same(proto: "miniUrl"),
    18: .same(proto: "postId"),
    19: .same(proto: "commentsCnt"),
    20: .same(proto: "thumbsupCnt"),
    21: .same(proto: "postTyp"),
    22: .same(proto: "tipoffTimes"),
    23: .same(proto: "playTimes"),
    24: .same(proto: "status"),
    25: .same(proto: "user"),
    26: .same(proto: "voted"),
    27: .same(proto: "collected"),
    28: .same(proto: "canDelete"),
    29: .same(proto: "communityStatus"),
    30: .same(proto: "resourceType"),
    31: .same(proto: "followShip"),
    32: .same(proto: "topic"),
    33: .same(proto: "category"),
    34: .same(proto: "membership"),
    35: .same(proto: "isSync"),
  ]

  fileprivate class _StorageClass {
    var _fileID: String = String()
    var _communityID: String = String()
    var _uuid: String = String()
    var _objectKey: String = String()
    var _url: String = String()
    var _extension_p: String = String()
    var _fileSize: Int64 = 0
    var _fileDigest: String = String()
    var _createTime: Int64 = 0
    var _transferFlag: Bool = false
    var _shareFlag: Bool = false
    var _conserveFlag: Bool = false
    var _title: String = String()
    var _desc: String = String()
    var _remark: String = String()
    var _miniObjectKey: String = String()
    var _miniURL: String = String()
    var _postID: String = String()
    var _commentsCnt: Int32 = 0
    var _thumbsupCnt: Int32 = 0
    var _postTyp: Int32 = 0
    var _tipoffTimes: Int32 = 0
    var _playTimes: Int32 = 0
    var _status: Int32 = 0
    var _user: Bbproto_PUserBase? = nil
    var _voted: Bool = false
    var _collected: Bool = false
    var _canDelete: Bool = false
    var _communityStatus: Int32 = 0
    var _resourceType: Int32 = 0
    var _followShip: Int32 = 0
    var _topic: [String] = []
    var _category: Int32 = 0
    var _membership: Int32 = 0
    var _isSync: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _fileID = source._fileID
      _communityID = source._communityID
      _uuid = source._uuid
      _objectKey = source._objectKey
      _url = source._url
      _extension_p = source._extension_p
      _fileSize = source._fileSize
      _fileDigest = source._fileDigest
      _createTime = source._createTime
      _transferFlag = source._transferFlag
      _shareFlag = source._shareFlag
      _conserveFlag = source._conserveFlag
      _title = source._title
      _desc = source._desc
      _remark = source._remark
      _miniObjectKey = source._miniObjectKey
      _miniURL = source._miniURL
      _postID = source._postID
      _commentsCnt = source._commentsCnt
      _thumbsupCnt = source._thumbsupCnt
      _postTyp = source._postTyp
      _tipoffTimes = source._tipoffTimes
      _playTimes = source._playTimes
      _status = source._status
      _user = source._user
      _voted = source._voted
      _collected = source._collected
      _canDelete = source._canDelete
      _communityStatus = source._communityStatus
      _resourceType = source._resourceType
      _followShip = source._followShip
      _topic = source._topic
      _category = source._category
      _membership = source._membership
      _isSync = source._isSync
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNetFile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._fileID != other_storage._fileID {return false}
        if _storage._communityID != other_storage._communityID {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._objectKey != other_storage._objectKey {return false}
        if _storage._url != other_storage._url {return false}
        if _storage._extension_p != other_storage._extension_p {return false}
        if _storage._fileSize != other_storage._fileSize {return false}
        if _storage._fileDigest != other_storage._fileDigest {return false}
        if _storage._createTime != other_storage._createTime {return false}
        if _storage._transferFlag != other_storage._transferFlag {return false}
        if _storage._shareFlag != other_storage._shareFlag {return false}
        if _storage._conserveFlag != other_storage._conserveFlag {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._desc != other_storage._desc {return false}
        if _storage._remark != other_storage._remark {return false}
        if _storage._miniObjectKey != other_storage._miniObjectKey {return false}
        if _storage._miniURL != other_storage._miniURL {return false}
        if _storage._postID != other_storage._postID {return false}
        if _storage._commentsCnt != other_storage._commentsCnt {return false}
        if _storage._thumbsupCnt != other_storage._thumbsupCnt {return false}
        if _storage._postTyp != other_storage._postTyp {return false}
        if _storage._tipoffTimes != other_storage._tipoffTimes {return false}
        if _storage._playTimes != other_storage._playTimes {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._voted != other_storage._voted {return false}
        if _storage._collected != other_storage._collected {return false}
        if _storage._canDelete != other_storage._canDelete {return false}
        if _storage._communityStatus != other_storage._communityStatus {return false}
        if _storage._resourceType != other_storage._resourceType {return false}
        if _storage._followShip != other_storage._followShip {return false}
        if _storage._topic != other_storage._topic {return false}
        if _storage._category != other_storage._category {return false}
        if _storage._membership != other_storage._membership {return false}
        if _storage._isSync != other_storage._isSync {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNetFilelist: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "netFile"),
    2: .same(proto: "DiskSize"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNetFilelist) -> Bool {
    if self.netFile != other.netFile {return false}
    if self.diskSize != other.diskSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCategory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .same(proto: "categoryNm"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCategory) -> Bool {
    if self.category != other.category {return false}
    if self.categoryNm != other.categoryNm {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLabelStatusList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLabelStatusList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLabelStatus: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .same(proto: "hasVideo"),
  ]

  fileprivate class _StorageClass {
    var _category: Bbproto_PCategory? = nil
    var _hasVideo_p: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _category = source._category
      _hasVideo_p = source._hasVideo_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PLabelStatus) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._category != other_storage._category {return false}
        if _storage._hasVideo_p != other_storage._hasVideo_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: news.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 帖子类型
enum Bbproto_EPostType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///文字帖, 属于动态
  case text // = 0

  ///图片帖, 属于动态
  case image // = 1

  ///语音帖, 属于动态
  case audio // = 2

  ///视频帖, 属于动态
  case video // = 3

  ///公告帖
  case notice // = 4

  ///新闻帖
  case newsFeed // = 5

  ///网盘服务创建的匿名帖(原创录播).
  case anonymous // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .text
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .text
    case 1: self = .image
    case 2: self = .audio
    case 3: self = .video
    case 4: self = .notice
    case 5: self = .newsFeed
    case 6: self = .anonymous
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .text: return 0
    case .image: return 1
    case .audio: return 2
    case .video: return 3
    case .notice: return 4
    case .newsFeed: return 5
    case .anonymous: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 创建的帖子信息
struct Bbproto_PPostNew: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostNew"

  ///帖子ID,发布帖子时不填. 编辑帖子要填
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///所属社区
  var communityID: Int64 {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  ///帖子类型 
  var type: Bbproto_EPostType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///发帖的地理位置,资讯、公告帖不填
  var position: String {
    get {return _storage._position}
    set {_uniqueStorage()._position = newValue}
  }

  ///被@的用户列表,资讯、公告帖不填
  var atusers: Bbproto_PStringList {
    get {return _storage._atusers ?? Bbproto_PStringList()}
    set {_uniqueStorage()._atusers = newValue}
  }
  /// Returns true if `atusers` has been explicitly set.
  var hasAtusers: Bool {return _storage._atusers != nil}
  /// Clears the value of `atusers`. Subsequent reads from it will return its default value.
  mutating func clearAtusers() {_storage._atusers = nil}

  ///帖子正文
  var contents: Bbproto_PResourceList {
    get {return _storage._contents ?? Bbproto_PResourceList()}
    set {_uniqueStorage()._contents = newValue}
  }
  /// Returns true if `contents` has been explicitly set.
  var hasContents: Bool {return _storage._contents != nil}
  /// Clears the value of `contents`. Subsequent reads from it will return its default value.
  mutating func clearContents() {_storage._contents = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._communityID)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._position)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._atusers)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._contents)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._communityID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._communityID, fieldNumber: 2)
      }
      if _storage._type != Bbproto_EPostType.text {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._position.isEmpty {
        try visitor.visitSingularStringField(value: _storage._position, fieldNumber: 4)
      }
      if let v = _storage._atusers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._contents {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用于保存的帖子结构
struct Bbproto_PPostStore: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostStore"

  ///帖子内容
  var post: Bbproto_PPostNew {
    get {return _storage._post ?? Bbproto_PPostNew()}
    set {_uniqueStorage()._post = newValue}
  }
  /// Returns true if `post` has been explicitly set.
  var hasPost: Bool {return _storage._post != nil}
  /// Clears the value of `post`. Subsequent reads from it will return its default value.
  mutating func clearPost() {_storage._post = nil}

  ///帖子作者
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///创建时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  ///编辑时间    
  var modifyTime: Int64 {
    get {return _storage._modifyTime}
    set {_uniqueStorage()._modifyTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._post)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._modifyTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._post {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 3)
      }
      if _storage._modifyTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._modifyTime, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 帖子统计信息
struct Bbproto_PPostStatistc: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostStatistc"

  ///评论数
  var commentCnt: Int64 = 0

  ///收藏数
  var collectCnt: Int64 = 0

  ///点赞数
  var voteCnt: Int64 = 0

  ///分享数
  var shareCnt: Int64 = 0

  ///阅读数
  var viewCnt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.commentCnt)
      case 2: try decoder.decodeSingularInt64Field(value: &self.collectCnt)
      case 3: try decoder.decodeSingularInt64Field(value: &self.voteCnt)
      case 4: try decoder.decodeSingularInt64Field(value: &self.shareCnt)
      case 5: try decoder.decodeSingularInt64Field(value: &self.viewCnt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commentCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.commentCnt, fieldNumber: 1)
    }
    if self.collectCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.collectCnt, fieldNumber: 2)
    }
    if self.voteCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.voteCnt, fieldNumber: 3)
    }
    if self.shareCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.shareCnt, fieldNumber: 4)
    }
    if self.viewCnt != 0 {
      try visitor.visitSingularInt64Field(value: self.viewCnt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 帖子状态信息
struct Bbproto_PPostState: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostState"

  ///删除状态, true:已删除;false:未删除
  var isDelete: Bool {
    get {return _storage._isDelete}
    set {_uniqueStorage()._isDelete = newValue}
  }

  ///自己是否已点赞,true:是; false:否
  var voted: Bool {
    get {return _storage._voted}
    set {_uniqueStorage()._voted = newValue}
  }

  ///自己是否已收藏,true:是; false:否
  var collected: Bool {
    get {return _storage._collected}
    set {_uniqueStorage()._collected = newValue}
  }

  ///是否置顶标志
  var isTop: Bool {
    get {return _storage._isTop}
    set {_uniqueStorage()._isTop = newValue}
  }

  ///审核状态, 0:审核通过; 1:待审核; 2:审核不通过
  var approval: Int64 {
    get {return _storage._approval}
    set {_uniqueStorage()._approval = newValue}
  }

  ///是否有删除权限(社区创建者、具有帖子管理权限的管理员, 与是否为帖子作者无关)
  var canDelete: Bool {
    get {return _storage._canDelete}
    set {_uniqueStorage()._canDelete = newValue}
  }

  ///标签列表,取值参考ECommunityPostLabel
  var labelList: Bbproto_PLabelList {
    get {return _storage._labelList ?? Bbproto_PLabelList()}
    set {_uniqueStorage()._labelList = newValue}
  }
  /// Returns true if `labelList` has been explicitly set.
  var hasLabelList: Bool {return _storage._labelList != nil}
  /// Clears the value of `labelList`. Subsequent reads from it will return its default value.
  mutating func clearLabelList() {_storage._labelList = nil}

  ///关注关系, 0:无关注关系, 1: 访客被作者关注, 2: 访客关注了作者, 3:已相互关注
  var followShip: Int32 {
    get {return _storage._followShip}
    set {_uniqueStorage()._followShip = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._isDelete)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._voted)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._collected)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isTop)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._approval)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._canDelete)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._labelList)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._followShip)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._isDelete != false {
        try visitor.visitSingularBoolField(value: _storage._isDelete, fieldNumber: 1)
      }
      if _storage._voted != false {
        try visitor.visitSingularBoolField(value: _storage._voted, fieldNumber: 3)
      }
      if _storage._collected != false {
        try visitor.visitSingularBoolField(value: _storage._collected, fieldNumber: 4)
      }
      if _storage._isTop != false {
        try visitor.visitSingularBoolField(value: _storage._isTop, fieldNumber: 5)
      }
      if _storage._approval != 0 {
        try visitor.visitSingularInt64Field(value: _storage._approval, fieldNumber: 6)
      }
      if _storage._canDelete != false {
        try visitor.visitSingularBoolField(value: _storage._canDelete, fieldNumber: 8)
      }
      if let v = _storage._labelList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._followShip != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followShip, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 标签列表
struct Bbproto_PLabelList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLabelList"

  ///标签列表
  var list: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedInt32Field(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 微博详情列表
struct Bbproto_PPostViewList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostViewList"

  ///博文列表
  var list: [Bbproto_PPostView] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 帖子展示信息
struct Bbproto_PPostView: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostView"

  ///帖子ID
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///帖子类型       
  var type: Bbproto_EPostType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///发帖的地理位置
  var position: String {
    get {return _storage._position}
    set {_uniqueStorage()._position = newValue}
  }

  ///创建时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  ///编辑时间
  var modifyTime: Int64 {
    get {return _storage._modifyTime}
    set {_uniqueStorage()._modifyTime = newValue}
  }

  ///删除时间
  var deleteTime: Int64 {
    get {return _storage._deleteTime}
    set {_uniqueStorage()._deleteTime = newValue}
  }

  ///帖子作者信息
  var author: Bbproto_PUserBase {
    get {return _storage._author ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {_storage._author = nil}

  ///帖子所属社区,如果社区已关闭(Status字段),帖子不能评论
  var community: Bbproto_PCommunityBase {
    get {return _storage._community ?? Bbproto_PCommunityBase()}
    set {_uniqueStorage()._community = newValue}
  }
  /// Returns true if `community` has been explicitly set.
  var hasCommunity: Bool {return _storage._community != nil}
  /// Clears the value of `community`. Subsequent reads from it will return its default value.
  mutating func clearCommunity() {_storage._community = nil}

  ///帖子正文
  var contents: Bbproto_PResourceList {
    get {return _storage._contents ?? Bbproto_PResourceList()}
    set {_uniqueStorage()._contents = newValue}
  }
  /// Returns true if `contents` has been explicitly set.
  var hasContents: Bool {return _storage._contents != nil}
  /// Clears the value of `contents`. Subsequent reads from it will return its default value.
  mutating func clearContents() {_storage._contents = nil}

  ///帖子@的用户列表
  var atUsers: Bbproto_PAtUserList {
    get {return _storage._atUsers ?? Bbproto_PAtUserList()}
    set {_uniqueStorage()._atUsers = newValue}
  }
  /// Returns true if `atUsers` has been explicitly set.
  var hasAtUsers: Bool {return _storage._atUsers != nil}
  /// Clears the value of `atUsers`. Subsequent reads from it will return its default value.
  mutating func clearAtUsers() {_storage._atUsers = nil}

  ///帖子统计信息
  var statistc: Bbproto_PPostStatistc {
    get {return _storage._statistc ?? Bbproto_PPostStatistc()}
    set {_uniqueStorage()._statistc = newValue}
  }
  /// Returns true if `statistc` has been explicitly set.
  var hasStatistc: Bool {return _storage._statistc != nil}
  /// Clears the value of `statistc`. Subsequent reads from it will return its default value.
  mutating func clearStatistc() {_storage._statistc = nil}

  ///帖子状态信息
  var state: Bbproto_PPostState {
    get {return _storage._state ?? Bbproto_PPostState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {_storage._state = nil}

  ///预览标记,仅客户端使用
  var preView: Int32 {
    get {return _storage._preView}
    set {_uniqueStorage()._preView = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._position)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._modifyTime)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._deleteTime)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._author)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._community)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._contents)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._atUsers)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._statistc)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._preView)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._type != Bbproto_EPostType.text {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._position.isEmpty {
        try visitor.visitSingularStringField(value: _storage._position, fieldNumber: 3)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 4)
      }
      if _storage._modifyTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._modifyTime, fieldNumber: 5)
      }
      if _storage._deleteTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deleteTime, fieldNumber: 6)
      }
      if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._community {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._contents {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._atUsers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._statistc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._preView != 0 {
        try visitor.visitSingularInt32Field(value: _storage._preView, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 微博详情列表
struct Bbproto_PPostInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostInfoList"

  ///博文列表
  var list: [Bbproto_PPostInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 微博详情
struct Bbproto_PPostInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPostInfo"

  ///博文的ID，上传时不用填
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///博文的作者，上传时不用填
  var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  ///作者名称，上传时不用填
  var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  ///作者头像，上传时不用填
  var userHead: String {
    get {return _storage._userHead}
    set {_uniqueStorage()._userHead = newValue}
  }

  ///文章正文
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  ///资源的类型(text:文字帖, image:图片帖, video:视频帖, audio:音频帖, anonymous:原创录播隐式创建的帖子, newsfeed:资讯帖, notice:公告帖)
  var srcType: String {
    get {return _storage._srcType}
    set {_uniqueStorage()._srcType = newValue}
  }

  ///图片（最多九张）
  var images: [Bbproto_PImage] {
    get {return _storage._images}
    set {_uniqueStorage()._images = newValue}
  }

  ///视频
  var video: Bbproto_PVideo {
    get {return _storage._video ?? Bbproto_PVideo()}
    set {_uniqueStorage()._video = newValue}
  }
  /// Returns true if `video` has been explicitly set.
  var hasVideo: Bool {return _storage._video != nil}
  /// Clears the value of `video`. Subsequent reads from it will return its default value.
  mutating func clearVideo() {_storage._video = nil}

  ///音频
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  ///发布时间，上传时不用填
  var pubishTime: Int64 {
    get {return _storage._pubishTime}
    set {_uniqueStorage()._pubishTime = newValue}
  }

  ///发帖的地理位置
  var position: String {
    get {return _storage._position}
    set {_uniqueStorage()._position = newValue}
  }

  ///这篇文章是查看人自己的写的，上传时不用填
  var self_p: Bool {
    get {return _storage._self_p}
    set {_uniqueStorage()._self_p = newValue}
  }

  ///是否收藏此文章，上传时不用填
  var collected: Bool {
    get {return _storage._collected}
    set {_uniqueStorage()._collected = newValue}
  }

  ///评论数，上传时不用填
  var commentCnt: Int64 {
    get {return _storage._commentCnt}
    set {_uniqueStorage()._commentCnt = newValue}
  }

  ///收藏数，上传时不用填
  var collectCnt: Int64 {
    get {return _storage._collectCnt}
    set {_uniqueStorage()._collectCnt = newValue}
  }

  ///点赞数，上传时不用填
  var voteCnt: Int64 {
    get {return _storage._voteCnt}
    set {_uniqueStorage()._voteCnt = newValue}
  }

  ///自己是否点赞，上传时不用填
  var vote: Bool {
    get {return _storage._vote}
    set {_uniqueStorage()._vote = newValue}
  }

  ///被@的用户列表
  var atusers: Bbproto_PAtUserList {
    get {return _storage._atusers ?? Bbproto_PAtUserList()}
    set {_uniqueStorage()._atusers = newValue}
  }
  /// Returns true if `atusers` has been explicitly set.
  var hasAtusers: Bool {return _storage._atusers != nil}
  /// Clears the value of `atusers`. Subsequent reads from it will return its default value.
  mutating func clearAtusers() {_storage._atusers = nil}

  ///帖子已经被用户删除,上传时不用填
  var isDelete: Bool {
    get {return _storage._isDelete}
    set {_uniqueStorage()._isDelete = newValue}
  }

  ///帖子正在被审核,上传时不用填
  var isHide: Bool {
    get {return _storage._isHide}
    set {_uniqueStorage()._isHide = newValue}
  }

  ///用户等级,上传时不用填
  var leveltype: Int32 {
    get {return _storage._leveltype}
    set {_uniqueStorage()._leveltype = newValue}
  }

  ///预览标记,上传时不用填,true表示用于预览,发布后的帖子标记是false
  var isPreView: Bool {
    get {return _storage._isPreView}
    set {_uniqueStorage()._isPreView = newValue}
  }

  ///引用的帖子,上传时只填帖子ID
  var refPost: Bbproto_PPostInfo {
    get {return _storage._refPost ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._refPost = newValue}
  }
  /// Returns true if `refPost` has been explicitly set.
  var hasRefPost: Bool {return _storage._refPost != nil}
  /// Clears the value of `refPost`. Subsequent reads from it will return its default value.
  mutating func clearRefPost() {_storage._refPost = nil}

  ///编辑时间，上传时不用填
  var editTime: Int64 {
    get {return _storage._editTime}
    set {_uniqueStorage()._editTime = newValue}
  }

  ///删除时间，上传时不用填
  var delTime: Int64 {
    get {return _storage._delTime}
    set {_uniqueStorage()._delTime = newValue}
  }

  ///帖子被转发次数，上传时不用填
  var refCnt: Int64 {
    get {return _storage._refCnt}
    set {_uniqueStorage()._refCnt = newValue}
  }

  ///图片、文字帖可以带超链接
  var hyperLink: Bbproto_PHyperLink {
    get {return _storage._hyperLink ?? Bbproto_PHyperLink()}
    set {_uniqueStorage()._hyperLink = newValue}
  }
  /// Returns true if `hyperLink` has been explicitly set.
  var hasHyperLink: Bool {return _storage._hyperLink != nil}
  /// Clears the value of `hyperLink`. Subsequent reads from it will return its default value.
  mutating func clearHyperLink() {_storage._hyperLink = nil}

  ///资讯、公告的标题
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  ///视频数量
  var videoCnt: Int32 {
    get {return _storage._videoCnt}
    set {_uniqueStorage()._videoCnt = newValue}
  }

  ///图片数量
  var imageCnt: Int32 {
    get {return _storage._imageCnt}
    set {_uniqueStorage()._imageCnt = newValue}
  }

  ///音频数量
  var audioCnt: Int32 {
    get {return _storage._audioCnt}
    set {_uniqueStorage()._audioCnt = newValue}
  }

  ///被阅读次数
  var viewCnt: Int32 {
    get {return _storage._viewCnt}
    set {_uniqueStorage()._viewCnt = newValue}
  }

  /// 所属社区
  var communityID: Int64 {
    get {return _storage._communityID}
    set {_uniqueStorage()._communityID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._userHead)
        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
        case 6: try decoder.decodeSingularStringField(value: &_storage._srcType)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._images)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._video)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._audio)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._pubishTime)
        case 12: try decoder.decodeSingularStringField(value: &_storage._position)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._self_p)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._collected)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._commentCnt)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._collectCnt)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._voteCnt)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._vote)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._atusers)
        case 21: try decoder.decodeSingularBoolField(value: &_storage._isDelete)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._isHide)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._leveltype)
        case 25: try decoder.decodeSingularBoolField(value: &_storage._isPreView)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._refPost)
        case 27: try decoder.decodeSingularInt64Field(value: &_storage._editTime)
        case 28: try decoder.decodeSingularInt64Field(value: &_storage._delTime)
        case 29: try decoder.decodeSingularInt64Field(value: &_storage._refCnt)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._hyperLink)
        case 31: try decoder.decodeSingularStringField(value: &_storage._title)
        case 32: try decoder.decodeSingularInt32Field(value: &_storage._videoCnt)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._imageCnt)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._audioCnt)
        case 35: try decoder.decodeSingularInt32Field(value: &_storage._viewCnt)
        case 36: try decoder.decodeSingularInt64Field(value: &_storage._communityID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 3)
      }
      if !_storage._userHead.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userHead, fieldNumber: 4)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 5)
      }
      if !_storage._srcType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._srcType, fieldNumber: 6)
      }
      if !_storage._images.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._images, fieldNumber: 7)
      }
      if let v = _storage._video {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._pubishTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._pubishTime, fieldNumber: 11)
      }
      if !_storage._position.isEmpty {
        try visitor.visitSingularStringField(value: _storage._position, fieldNumber: 12)
      }
      if _storage._self_p != false {
        try visitor.visitSingularBoolField(value: _storage._self_p, fieldNumber: 14)
      }
      if _storage._collected != false {
        try visitor.visitSingularBoolField(value: _storage._collected, fieldNumber: 15)
      }
      if _storage._commentCnt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._commentCnt, fieldNumber: 16)
      }
      if _storage._collectCnt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._collectCnt, fieldNumber: 17)
      }
      if _storage._voteCnt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._voteCnt, fieldNumber: 18)
      }
      if _storage._vote != false {
        try visitor.visitSingularBoolField(value: _storage._vote, fieldNumber: 19)
      }
      if let v = _storage._atusers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if _storage._isDelete != false {
        try visitor.visitSingularBoolField(value: _storage._isDelete, fieldNumber: 21)
      }
      if _storage._isHide != false {
        try visitor.visitSingularBoolField(value: _storage._isHide, fieldNumber: 22)
      }
      if _storage._leveltype != 0 {
        try visitor.visitSingularInt32Field(value: _storage._leveltype, fieldNumber: 24)
      }
      if _storage._isPreView != false {
        try visitor.visitSingularBoolField(value: _storage._isPreView, fieldNumber: 25)
      }
      if let v = _storage._refPost {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if _storage._editTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._editTime, fieldNumber: 27)
      }
      if _storage._delTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._delTime, fieldNumber: 28)
      }
      if _storage._refCnt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._refCnt, fieldNumber: 29)
      }
      if let v = _storage._hyperLink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 31)
      }
      if _storage._videoCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._videoCnt, fieldNumber: 32)
      }
      if _storage._imageCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._imageCnt, fieldNumber: 33)
      }
      if _storage._audioCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._audioCnt, fieldNumber: 34)
      }
      if _storage._viewCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._viewCnt, fieldNumber: 35)
      }
      if _storage._communityID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._communityID, fieldNumber: 36)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 被@的用户列表
struct Bbproto_PAtUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAtUserList"

  var list: [Bbproto_PAtUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 被@的用户
struct Bbproto_PAtUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAtUser"

  ///被@的用户id
  var uuid: String = String()

  ///用户昵称
  var nickName: String = String()

  ///用户等级
  var level: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.nickName)
      case 3: try decoder.decodeSingularInt32Field(value: &self.level)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 2)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 图片
struct Bbproto_PImage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PImage"

  ///原图url
  var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  ///图片的热点广告 
  var tags: Bbproto_PImageTagList {
    get {return _storage._tags ?? Bbproto_PImageTagList()}
    set {_uniqueStorage()._tags = newValue}
  }
  /// Returns true if `tags` has been explicitly set.
  var hasTags: Bool {return _storage._tags != nil}
  /// Clears the value of `tags`. Subsequent reads from it will return its default value.
  mutating func clearTags() {_storage._tags = nil}

  ///缩略图的url
  var thumbnail: String {
    get {return _storage._thumbnail}
    set {_uniqueStorage()._thumbnail = newValue}
  }

  ///图片描述
  var des: String {
    get {return _storage._des}
    set {_uniqueStorage()._des = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._url)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tags)
        case 3: try decoder.decodeSingularStringField(value: &_storage._thumbnail)
        case 4: try decoder.decodeSingularStringField(value: &_storage._des)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 1)
      }
      if let v = _storage._tags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._thumbnail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thumbnail, fieldNumber: 3)
      }
      if !_storage._des.isEmpty {
        try visitor.visitSingularStringField(value: _storage._des, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 视频
struct Bbproto_PVideo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVideo"

  ///视频在OSS上的路径
  var url: String = String()

  ///视频的缩略图
  var img: String = String()

  ///视频的标签
  var tags: [Bbproto_PVideoTag] = []

  ///视频的有效期（多少秒之后过期）
  var expires: Int64 = 0

  ///视频类型，0：本地视频，1：第三方视频，2：长视频
  var type: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.img)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.tags)
      case 4: try decoder.decodeSingularInt64Field(value: &self.expires)
      case 5: try decoder.decodeSingularInt32Field(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.img.isEmpty {
      try visitor.visitSingularStringField(value: self.img, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 3)
    }
    if self.expires != 0 {
      try visitor.visitSingularInt64Field(value: self.expires, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 音频
struct Bbproto_PAudio: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAudio"

  ///音频在OSS上的路径
  var url: String = String()

  ///音频长度
  var length: Int32 = 0

  ///音频的有效期（多少秒之后过期）
  var expires: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularInt32Field(value: &self.length)
      case 3: try decoder.decodeSingularInt64Field(value: &self.expires)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if self.length != 0 {
      try visitor.visitSingularInt32Field(value: self.length, fieldNumber: 2)
    }
    if self.expires != 0 {
      try visitor.visitSingularInt64Field(value: self.expires, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 超链接
struct Bbproto_PHyperLink: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHyperLink"

  ///链接地址
  var url: String = String()

  ///网红昵称,客户端不用填
  var nickName: String = String()

  ///网红用户ID
  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      case 2: try decoder.decodeSingularStringField(value: &self.nickName)
      case 3: try decoder.decodeSingularStringField(value: &self.uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.nickName.isEmpty {
      try visitor.visitSingularStringField(value: self.nickName, fieldNumber: 2)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///视频的标签
struct Bbproto_PVideoTag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVideoTag"

  var x: Float = 0

  var y: Float = 0

  ///标签内容
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PRecommendUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendUser"

  ///服务端标志用户的唯一id
  var uuid: String = String()

  ///用户名，唯一
  var username: String = String()

  ///昵称
  var nickname: String = String()

  ///头像地址
  var headImgURL: String = String()

  ///性别，0就是女，其余的是男；人妖暂时不考虑
  var gender: Int32 = 0

  ///会员级别
  var membershipLevel: Int32 = 0

  ///两用户间的关系、0:无关系，1,：B关注A(A是B的粉丝)，2：A关注B，3：相互关注
  var followship: Int32 = 0

  ///是否是好友，是：true
  var friend: Bool = false

  ///用户等级
  var leveltype: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 6: try decoder.decodeSingularStringField(value: &self.uuid)
      case 7: try decoder.decodeSingularStringField(value: &self.username)
      case 8: try decoder.decodeSingularStringField(value: &self.nickname)
      case 9: try decoder.decodeSingularStringField(value: &self.headImgURL)
      case 10: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 11: try decoder.decodeSingularInt32Field(value: &self.membershipLevel)
      case 12: try decoder.decodeSingularInt32Field(value: &self.followship)
      case 13: try decoder.decodeSingularBoolField(value: &self.friend)
      case 14: try decoder.decodeSingularInt32Field(value: &self.leveltype)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 6)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 7)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 8)
    }
    if !self.headImgURL.isEmpty {
      try visitor.visitSingularStringField(value: self.headImgURL, fieldNumber: 9)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 10)
    }
    if self.membershipLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.membershipLevel, fieldNumber: 11)
    }
    if self.followship != 0 {
      try visitor.visitSingularInt32Field(value: self.followship, fieldNumber: 12)
    }
    if self.friend != false {
      try visitor.visitSingularBoolField(value: self.friend, fieldNumber: 13)
    }
    if self.leveltype != 0 {
      try visitor.visitSingularInt32Field(value: self.leveltype, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFollowOrFansList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFollowOrFansList"

  ///关注、粉丝 列表，最多100个
  var list: [Bbproto_PRecommendUser] = []

  ///下次请求的起点
  var index: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt32Field(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///个人统计信息
struct Bbproto_PPersonStatistic: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPersonStatistic"

  ///朋友个数
  var friendCnt: Int32 = 0

  ///follow人数
  var followCnt: Int32 = 0

  ///fans个数
  var fansCnt: Int32 = 0

  ///发表的文字帖个数
  var textCnt: Int32 = 0

  var imageCnt: Int32 = 0

  var audioCnt: Int32 = 0

  var videoCnt: Int32 = 0

  var communityID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.friendCnt)
      case 2: try decoder.decodeSingularInt32Field(value: &self.followCnt)
      case 3: try decoder.decodeSingularInt32Field(value: &self.fansCnt)
      case 4: try decoder.decodeSingularInt32Field(value: &self.textCnt)
      case 5: try decoder.decodeSingularInt32Field(value: &self.imageCnt)
      case 6: try decoder.decodeSingularInt32Field(value: &self.audioCnt)
      case 7: try decoder.decodeSingularInt32Field(value: &self.videoCnt)
      case 8: try decoder.decodeSingularStringField(value: &self.communityID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.friendCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.friendCnt, fieldNumber: 1)
    }
    if self.followCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.followCnt, fieldNumber: 2)
    }
    if self.fansCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.fansCnt, fieldNumber: 3)
    }
    if self.textCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.textCnt, fieldNumber: 4)
    }
    if self.imageCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.imageCnt, fieldNumber: 5)
    }
    if self.audioCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.audioCnt, fieldNumber: 6)
    }
    if self.videoCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.videoCnt, fieldNumber: 7)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 微博用户详情
struct Bbproto_PNewsUserProfile: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNewsUserProfile"

  var user: Bbproto_PUser {
    get {return _storage._user ?? Bbproto_PUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  ///两用户间的关系、0:无关系，1,：B关注A(A是B的粉丝)，2：A关注B，3：相互关注
  var followship: Int32 {
    get {return _storage._followship}
    set {_uniqueStorage()._followship = newValue}
  }

  ///是否是好友，是：true
  var friend: Bool {
    get {return _storage._friend}
    set {_uniqueStorage()._friend = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._followship)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._friend)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._followship != 0 {
        try visitor.visitSingularInt32Field(value: _storage._followship, fieldNumber: 2)
      }
      if _storage._friend != false {
        try visitor.visitSingularBoolField(value: _storage._friend, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用户关系列表
struct Bbproto_PRelationList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRelationList"

  ///若干个用户关注关系
  var list: [Bbproto_PRelation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户关系
struct Bbproto_PRelation: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRelation"

  ///两用户间的关系、0:无关系，1,：B关注A(A是B的粉丝)，2：A关注B，3：AB相互关注
  var ship: Int32 = 0

  ///用户A
  var uuidA: String = String()

  ///用户B
  var uuidB: String = String()

  ///用户A的关注数
  var folsA: Int32 = 0

  ///用户A的粉丝数
  var fansA: Int32 = 0

  ///用户B的关注数
  var folsB: Int32 = 0

  ///用户B的粉丝数
  var fansB: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.ship)
      case 2: try decoder.decodeSingularStringField(value: &self.uuidA)
      case 3: try decoder.decodeSingularStringField(value: &self.uuidB)
      case 4: try decoder.decodeSingularInt32Field(value: &self.folsA)
      case 5: try decoder.decodeSingularInt32Field(value: &self.fansA)
      case 6: try decoder.decodeSingularInt32Field(value: &self.folsB)
      case 7: try decoder.decodeSingularInt32Field(value: &self.fansB)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ship != 0 {
      try visitor.visitSingularInt32Field(value: self.ship, fieldNumber: 1)
    }
    if !self.uuidA.isEmpty {
      try visitor.visitSingularStringField(value: self.uuidA, fieldNumber: 2)
    }
    if !self.uuidB.isEmpty {
      try visitor.visitSingularStringField(value: self.uuidB, fieldNumber: 3)
    }
    if self.folsA != 0 {
      try visitor.visitSingularInt32Field(value: self.folsA, fieldNumber: 4)
    }
    if self.fansA != 0 {
      try visitor.visitSingularInt32Field(value: self.fansA, fieldNumber: 5)
    }
    if self.folsB != 0 {
      try visitor.visitSingularInt32Field(value: self.folsB, fieldNumber: 6)
    }
    if self.fansB != 0 {
      try visitor.visitSingularInt32Field(value: self.fansB, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户关注的主题
struct Bbproto_PSubject: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSubject"

  /// 主题id
  var id: String = String()

  /// 主题名字
  var name: String = String()

  /// 主题头像地址
  var headImg: String = String()

  ///是否已关注. true:已关注
  var isFollowed: Bool = false

  ///是自己的社区.true:是
  var isSelf: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.headImg)
      case 5: try decoder.decodeSingularBoolField(value: &self.isFollowed)
      case 6: try decoder.decodeSingularBoolField(value: &self.isSelf)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.headImg.isEmpty {
      try visitor.visitSingularStringField(value: self.headImg, fieldNumber: 4)
    }
    if self.isFollowed != false {
      try visitor.visitSingularBoolField(value: self.isFollowed, fieldNumber: 5)
    }
    if self.isSelf != false {
      try visitor.visitSingularBoolField(value: self.isSelf, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 主题信息列表
struct Bbproto_PSubjectList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSubjectList"

  ///我关注的主题
  var list: [Bbproto_PSubject] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 主题搜索结果
struct Bbproto_PSubjectSearchList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSubjectSearchList"

  ///我关注的主题
  var mySubject: [Bbproto_PSubject] = []

  ///其他主题
  var otherSubject: [Bbproto_PSubject] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.mySubject)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.otherSubject)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mySubject.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mySubject, fieldNumber: 2)
    }
    if !self.otherSubject.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.otherSubject, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输字符串类型查询结果
struct Bbproto_PStrQueryRet: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStrQueryRet"

  ///下一次查询的起点(偏移), 为0表示遍历结束
  var next: Int32 = 0

  ///结果数组
  var list: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.next)
      case 2: try decoder.decodeRepeatedStringField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.next != 0 {
      try visitor.visitSingularInt32Field(value: self.next, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedStringField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 用户关注的所有vo的列表，所有好友的列表
struct Bbproto_PCanAtUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCanAtUserList"

  var volist: Bbproto_PUserBaseList {
    get {return _storage._volist ?? Bbproto_PUserBaseList()}
    set {_uniqueStorage()._volist = newValue}
  }
  /// Returns true if `volist` has been explicitly set.
  var hasVolist: Bool {return _storage._volist != nil}
  /// Clears the value of `volist`. Subsequent reads from it will return its default value.
  mutating func clearVolist() {_storage._volist = nil}

  var friendList: Bbproto_PUserBaseList {
    get {return _storage._friendList ?? Bbproto_PUserBaseList()}
    set {_uniqueStorage()._friendList = newValue}
  }
  /// Returns true if `friendList` has been explicitly set.
  var hasFriendList: Bool {return _storage._friendList != nil}
  /// Clears the value of `friendList`. Subsequent reads from it will return its default value.
  mutating func clearFriendList() {_storage._friendList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._volist)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._friendList)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._volist {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._friendList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///Timeline在Rds的存储结构
struct Bbproto_PTimelineRdsStore: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTimelineRdsStore"

  ///帖子ID数组
  var list: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedStringField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量赞帖动作信息
struct Bbproto_PBetchVoteAction: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBetchVoteAction"

  ///帖子ID
  var postID: String = String()

  ///点赞的uuid列表
  var uuidList: [String] = []

  ///0:点赞,1:取消赞
  var oper: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.postID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.uuidList)
      case 3: try decoder.decodeSingularInt32Field(value: &self.oper)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.uuidList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uuidList, fieldNumber: 2)
    }
    if self.oper != 0 {
      try visitor.visitSingularInt32Field(value: self.oper, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 批量判断帖子是否被用户点赞过
struct Bbproto_PNewsVoteExist: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNewsVoteExist"

  ///帖子ID
  var id: Int64 = 0

  ///是否被赞过
  var hasVote_p: [Bool] = []

  ///被赞次数
  var voteCnt: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedBoolField(value: &self.hasVote_p)
      case 3: try decoder.decodeSingularInt32Field(value: &self.voteCnt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.hasVote_p.isEmpty {
      try visitor.visitPackedBoolField(value: self.hasVote_p, fieldNumber: 2)
    }
    if self.voteCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.voteCnt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量关注动作信息
struct Bbproto_PBetchFollowAction: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBetchFollowAction"

  ///1:关注; 0:取消关注
  var actionType: Int32 = 0

  ///被关注用户的uuid
  var uuid: String = String()

  ///发起关注uuid列表
  var uuidList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.actionType)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeRepeatedStringField(value: &self.uuidList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.actionType != 0 {
      try visitor.visitSingularInt32Field(value: self.actionType, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.uuidList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.uuidList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 批量判断用户是否被关注
struct Bbproto_PNewsFollowExist: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNewsFollowExist"

  ///用户ID
  var uuid: String = String()

  ///是关注
  var hasFollow_p: [Bool] = []

  ///粉丝数
  var fansCnt: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeRepeatedBoolField(value: &self.hasFollow_p)
      case 3: try decoder.decodeSingularInt32Field(value: &self.fansCnt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.hasFollow_p.isEmpty {
      try visitor.visitPackedBoolField(value: self.hasFollow_p, fieldNumber: 2)
    }
    if self.fansCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.fansCnt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_EPostType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Text"),
    1: .same(proto: "Image"),
    2: .same(proto: "Audio"),
    3: .same(proto: "Video"),
    4: .same(proto: "Notice"),
    5: .same(proto: "NewsFeed"),
    6: .same(proto: "Anonymous"),
  ]
}

extension Bbproto_PPostNew: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "communityId"),
    3: .same(proto: "type"),
    4: .same(proto: "position"),
    5: .same(proto: "atusers"),
    6: .same(proto: "contents"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _communityID: Int64 = 0
    var _type: Bbproto_EPostType = Bbproto_EPostType.text
    var _position: String = String()
    var _atusers: Bbproto_PStringList? = nil
    var _contents: Bbproto_PResourceList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _communityID = source._communityID
      _type = source._type
      _position = source._position
      _atusers = source._atusers
      _contents = source._contents
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostNew) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._communityID != other_storage._communityID {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._position != other_storage._position {return false}
        if _storage._atusers != other_storage._atusers {return false}
        if _storage._contents != other_storage._contents {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostStore: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "post"),
    2: .same(proto: "uuid"),
    3: .same(proto: "time"),
    4: .same(proto: "modifyTime"),
  ]

  fileprivate class _StorageClass {
    var _post: Bbproto_PPostNew? = nil
    var _uuid: String = String()
    var _time: Int64 = 0
    var _modifyTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _post = source._post
      _uuid = source._uuid
      _time = source._time
      _modifyTime = source._modifyTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostStore) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._post != other_storage._post {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._modifyTime != other_storage._modifyTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostStatistc: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "commentCnt"),
    2: .same(proto: "collectCnt"),
    3: .same(proto: "voteCnt"),
    4: .same(proto: "shareCnt"),
    5: .same(proto: "viewCnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostStatistc) -> Bool {
    if self.commentCnt != other.commentCnt {return false}
    if self.collectCnt != other.collectCnt {return false}
    if self.voteCnt != other.voteCnt {return false}
    if self.shareCnt != other.shareCnt {return false}
    if self.viewCnt != other.viewCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isDelete"),
    3: .same(proto: "voted"),
    4: .same(proto: "collected"),
    5: .same(proto: "isTop"),
    6: .same(proto: "approval"),
    8: .same(proto: "canDelete"),
    9: .same(proto: "labelList"),
    10: .same(proto: "followShip"),
  ]

  fileprivate class _StorageClass {
    var _isDelete: Bool = false
    var _voted: Bool = false
    var _collected: Bool = false
    var _isTop: Bool = false
    var _approval: Int64 = 0
    var _canDelete: Bool = false
    var _labelList: Bbproto_PLabelList? = nil
    var _followShip: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _isDelete = source._isDelete
      _voted = source._voted
      _collected = source._collected
      _isTop = source._isTop
      _approval = source._approval
      _canDelete = source._canDelete
      _labelList = source._labelList
      _followShip = source._followShip
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostState) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._isDelete != other_storage._isDelete {return false}
        if _storage._voted != other_storage._voted {return false}
        if _storage._collected != other_storage._collected {return false}
        if _storage._isTop != other_storage._isTop {return false}
        if _storage._approval != other_storage._approval {return false}
        if _storage._canDelete != other_storage._canDelete {return false}
        if _storage._labelList != other_storage._labelList {return false}
        if _storage._followShip != other_storage._followShip {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLabelList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLabelList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostViewList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostViewList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "position"),
    4: .same(proto: "time"),
    5: .same(proto: "modifyTime"),
    6: .same(proto: "deleteTime"),
    7: .same(proto: "author"),
    8: .same(proto: "community"),
    9: .same(proto: "contents"),
    10: .same(proto: "atUsers"),
    11: .same(proto: "statistc"),
    12: .same(proto: "state"),
    13: .same(proto: "preView"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _type: Bbproto_EPostType = Bbproto_EPostType.text
    var _position: String = String()
    var _time: Int64 = 0
    var _modifyTime: Int64 = 0
    var _deleteTime: Int64 = 0
    var _author: Bbproto_PUserBase? = nil
    var _community: Bbproto_PCommunityBase? = nil
    var _contents: Bbproto_PResourceList? = nil
    var _atUsers: Bbproto_PAtUserList? = nil
    var _statistc: Bbproto_PPostStatistc? = nil
    var _state: Bbproto_PPostState? = nil
    var _preView: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _position = source._position
      _time = source._time
      _modifyTime = source._modifyTime
      _deleteTime = source._deleteTime
      _author = source._author
      _community = source._community
      _contents = source._contents
      _atUsers = source._atUsers
      _statistc = source._statistc
      _state = source._state
      _preView = source._preView
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostView) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._position != other_storage._position {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._modifyTime != other_storage._modifyTime {return false}
        if _storage._deleteTime != other_storage._deleteTime {return false}
        if _storage._author != other_storage._author {return false}
        if _storage._community != other_storage._community {return false}
        if _storage._contents != other_storage._contents {return false}
        if _storage._atUsers != other_storage._atUsers {return false}
        if _storage._statistc != other_storage._statistc {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._preView != other_storage._preView {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostInfoList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPostInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "userName"),
    4: .same(proto: "userHead"),
    5: .same(proto: "content"),
    6: .same(proto: "srcType"),
    7: .same(proto: "images"),
    8: .same(proto: "video"),
    9: .same(proto: "audio"),
    11: .same(proto: "pubishTime"),
    12: .same(proto: "position"),
    14: .same(proto: "self"),
    15: .same(proto: "collected"),
    16: .same(proto: "commentCnt"),
    17: .same(proto: "collectCnt"),
    18: .same(proto: "voteCnt"),
    19: .same(proto: "vote"),
    20: .same(proto: "atusers"),
    21: .same(proto: "IsDelete"),
    22: .same(proto: "IsHide"),
    24: .same(proto: "leveltype"),
    25: .same(proto: "IsPreView"),
    26: .same(proto: "refPost"),
    27: .same(proto: "editTime"),
    28: .same(proto: "delTime"),
    29: .same(proto: "RefCnt"),
    30: .same(proto: "hyperLink"),
    31: .same(proto: "title"),
    32: .same(proto: "videoCnt"),
    33: .same(proto: "imageCnt"),
    34: .same(proto: "audioCnt"),
    35: .same(proto: "viewCnt"),
    36: .same(proto: "communityId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _uuid: String = String()
    var _userName: String = String()
    var _userHead: String = String()
    var _content: String = String()
    var _srcType: String = String()
    var _images: [Bbproto_PImage] = []
    var _video: Bbproto_PVideo? = nil
    var _audio: Bbproto_PAudio? = nil
    var _pubishTime: Int64 = 0
    var _position: String = String()
    var _self_p: Bool = false
    var _collected: Bool = false
    var _commentCnt: Int64 = 0
    var _collectCnt: Int64 = 0
    var _voteCnt: Int64 = 0
    var _vote: Bool = false
    var _atusers: Bbproto_PAtUserList? = nil
    var _isDelete: Bool = false
    var _isHide: Bool = false
    var _leveltype: Int32 = 0
    var _isPreView: Bool = false
    var _refPost: Bbproto_PPostInfo? = nil
    var _editTime: Int64 = 0
    var _delTime: Int64 = 0
    var _refCnt: Int64 = 0
    var _hyperLink: Bbproto_PHyperLink? = nil
    var _title: String = String()
    var _videoCnt: Int32 = 0
    var _imageCnt: Int32 = 0
    var _audioCnt: Int32 = 0
    var _viewCnt: Int32 = 0
    var _communityID: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _uuid = source._uuid
      _userName = source._userName
      _userHead = source._userHead
      _content = source._content
      _srcType = source._srcType
      _images = source._images
      _video = source._video
      _audio = source._audio
      _pubishTime = source._pubishTime
      _position = source._position
      _self_p = source._self_p
      _collected = source._collected
      _commentCnt = source._commentCnt
      _collectCnt = source._collectCnt
      _voteCnt = source._voteCnt
      _vote = source._vote
      _atusers = source._atusers
      _isDelete = source._isDelete
      _isHide = source._isHide
      _leveltype = source._leveltype
      _isPreView = source._isPreView
      _refPost = source._refPost
      _editTime = source._editTime
      _delTime = source._delTime
      _refCnt = source._refCnt
      _hyperLink = source._hyperLink
      _title = source._title
      _videoCnt = source._videoCnt
      _imageCnt = source._imageCnt
      _audioCnt = source._audioCnt
      _viewCnt = source._viewCnt
      _communityID = source._communityID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PPostInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._userName != other_storage._userName {return false}
        if _storage._userHead != other_storage._userHead {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._srcType != other_storage._srcType {return false}
        if _storage._images != other_storage._images {return false}
        if _storage._video != other_storage._video {return false}
        if _storage._audio != other_storage._audio {return false}
        if _storage._pubishTime != other_storage._pubishTime {return false}
        if _storage._position != other_storage._position {return false}
        if _storage._self_p != other_storage._self_p {return false}
        if _storage._collected != other_storage._collected {return false}
        if _storage._commentCnt != other_storage._commentCnt {return false}
        if _storage._collectCnt != other_storage._collectCnt {return false}
        if _storage._voteCnt != other_storage._voteCnt {return false}
        if _storage._vote != other_storage._vote {return false}
        if _storage._atusers != other_storage._atusers {return false}
        if _storage._isDelete != other_storage._isDelete {return false}
        if _storage._isHide != other_storage._isHide {return false}
        if _storage._leveltype != other_storage._leveltype {return false}
        if _storage._isPreView != other_storage._isPreView {return false}
        if _storage._refPost != other_storage._refPost {return false}
        if _storage._editTime != other_storage._editTime {return false}
        if _storage._delTime != other_storage._delTime {return false}
        if _storage._refCnt != other_storage._refCnt {return false}
        if _storage._hyperLink != other_storage._hyperLink {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._videoCnt != other_storage._videoCnt {return false}
        if _storage._imageCnt != other_storage._imageCnt {return false}
        if _storage._audioCnt != other_storage._audioCnt {return false}
        if _storage._viewCnt != other_storage._viewCnt {return false}
        if _storage._communityID != other_storage._communityID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAtUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAtUserList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAtUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "nickName"),
    3: .same(proto: "level"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAtUser) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.nickName != other.nickName {return false}
    if self.level != other.level {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PImage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "Tags"),
    3: .same(proto: "thumbnail"),
    4: .same(proto: "des"),
  ]

  fileprivate class _StorageClass {
    var _url: String = String()
    var _tags: Bbproto_PImageTagList? = nil
    var _thumbnail: String = String()
    var _des: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _url = source._url
      _tags = source._tags
      _thumbnail = source._thumbnail
      _des = source._des
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PImage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._url != other_storage._url {return false}
        if _storage._tags != other_storage._tags {return false}
        if _storage._thumbnail != other_storage._thumbnail {return false}
        if _storage._des != other_storage._des {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVideo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "img"),
    3: .same(proto: "tags"),
    4: .same(proto: "expires"),
    5: .same(proto: "type"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVideo) -> Bool {
    if self.url != other.url {return false}
    if self.img != other.img {return false}
    if self.tags != other.tags {return false}
    if self.expires != other.expires {return false}
    if self.type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAudio: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "length"),
    3: .same(proto: "expires"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAudio) -> Bool {
    if self.url != other.url {return false}
    if self.length != other.length {return false}
    if self.expires != other.expires {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHyperLink: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "nickName"),
    3: .same(proto: "uuid"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHyperLink) -> Bool {
    if self.url != other.url {return false}
    if self.nickName != other.nickName {return false}
    if self.uuid != other.uuid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVideoTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVideoTag) -> Bool {
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "uuid"),
    7: .same(proto: "username"),
    8: .same(proto: "nickname"),
    9: .same(proto: "headImgURL"),
    10: .same(proto: "gender"),
    11: .same(proto: "membershipLevel"),
    12: .same(proto: "followship"),
    13: .same(proto: "friend"),
    14: .same(proto: "leveltype"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendUser) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.username != other.username {return false}
    if self.nickname != other.nickname {return false}
    if self.headImgURL != other.headImgURL {return false}
    if self.gender != other.gender {return false}
    if self.membershipLevel != other.membershipLevel {return false}
    if self.followship != other.followship {return false}
    if self.friend != other.friend {return false}
    if self.leveltype != other.leveltype {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFollowOrFansList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "index"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFollowOrFansList) -> Bool {
    if self.list != other.list {return false}
    if self.index != other.index {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPersonStatistic: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friendCnt"),
    2: .same(proto: "followCnt"),
    3: .same(proto: "fansCnt"),
    4: .same(proto: "textCnt"),
    5: .same(proto: "imageCnt"),
    6: .same(proto: "audioCnt"),
    7: .same(proto: "videoCnt"),
    8: .same(proto: "CommunityID"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPersonStatistic) -> Bool {
    if self.friendCnt != other.friendCnt {return false}
    if self.followCnt != other.followCnt {return false}
    if self.fansCnt != other.fansCnt {return false}
    if self.textCnt != other.textCnt {return false}
    if self.imageCnt != other.imageCnt {return false}
    if self.audioCnt != other.audioCnt {return false}
    if self.videoCnt != other.videoCnt {return false}
    if self.communityID != other.communityID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNewsUserProfile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "followship"),
    3: .same(proto: "friend"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUser? = nil
    var _followship: Int32 = 0
    var _friend: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _followship = source._followship
      _friend = source._friend
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNewsUserProfile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._followship != other_storage._followship {return false}
        if _storage._friend != other_storage._friend {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRelationList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRelationList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRelation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ship"),
    2: .same(proto: "uuidA"),
    3: .same(proto: "uuidB"),
    4: .same(proto: "folsA"),
    5: .same(proto: "fansA"),
    6: .same(proto: "folsB"),
    7: .same(proto: "fansB"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRelation) -> Bool {
    if self.ship != other.ship {return false}
    if self.uuidA != other.uuidA {return false}
    if self.uuidB != other.uuidB {return false}
    if self.folsA != other.folsA {return false}
    if self.fansA != other.fansA {return false}
    if self.folsB != other.folsB {return false}
    if self.fansB != other.fansB {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSubject: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "ID"),
    3: .same(proto: "Name"),
    4: .same(proto: "HeadImg"),
    5: .same(proto: "IsFollowed"),
    6: .same(proto: "IsSelf"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSubject) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.headImg != other.headImg {return false}
    if self.isFollowed != other.isFollowed {return false}
    if self.isSelf != other.isSelf {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSubjectList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSubjectList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSubjectSearchList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "MySubject"),
    3: .same(proto: "OtherSubject"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSubjectSearchList) -> Bool {
    if self.mySubject != other.mySubject {return false}
    if self.otherSubject != other.otherSubject {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStrQueryRet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Next"),
    2: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStrQueryRet) -> Bool {
    if self.next != other.next {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCanAtUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "VOList"),
    2: .same(proto: "FriendList"),
  ]

  fileprivate class _StorageClass {
    var _volist: Bbproto_PUserBaseList? = nil
    var _friendList: Bbproto_PUserBaseList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _volist = source._volist
      _friendList = source._friendList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCanAtUserList) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._volist != other_storage._volist {return false}
        if _storage._friendList != other_storage._friendList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTimelineRdsStore: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PTimelineRdsStore) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBetchVoteAction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postId"),
    2: .same(proto: "uuidList"),
    3: .same(proto: "oper"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBetchVoteAction) -> Bool {
    if self.postID != other.postID {return false}
    if self.uuidList != other.uuidList {return false}
    if self.oper != other.oper {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNewsVoteExist: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "hasVote"),
    3: .same(proto: "VoteCnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNewsVoteExist) -> Bool {
    if self.id != other.id {return false}
    if self.hasVote_p != other.hasVote_p {return false}
    if self.voteCnt != other.voteCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBetchFollowAction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionType"),
    2: .same(proto: "uuid"),
    3: .same(proto: "uuidList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBetchFollowAction) -> Bool {
    if self.actionType != other.actionType {return false}
    if self.uuid != other.uuid {return false}
    if self.uuidList != other.uuidList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNewsFollowExist: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "hasFollow"),
    3: .same(proto: "fansCnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNewsFollowExist) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.hasFollow_p != other.hasFollow_p {return false}
    if self.fansCnt != other.fansCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

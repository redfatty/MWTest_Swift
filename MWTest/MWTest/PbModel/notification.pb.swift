/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: notification.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 通知类型，具体的消息类型
enum Bbproto_ENotifyType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 评论帖子
  case commentNews // = 0

  /// 评论评论
  case commentComment // = 1

  /// 评论赞
  case commentVote // = 2

  /// 关注
  case newsFollow // = 3

  /// 帖子点赞
  case newsVote // = 4

  /// @我
  case newsAt // = 5

  /// 接受好友申请
  case socialAccept // = 6

  /// 评论踩
  case commentDownVote // = 7

  /// 帖子创建（动态帖、新闻帖）
  case newsCreate // = 8

  /// 帖子浏览N次
  case newsView // = 9

  /// 帖子点赞次数
  case newsVoteCount // = 10

  /// 帖子评论次数
  case newsCommentCount // = 11

  /// 原创录播
  case ovideoCreate // = 12

  /// 评论原创录播
  case commentOvideo // = 13

  /// 原创录播点赞
  case ovideoVote // = 14

  /// 原创录播浏览N次
  case ovideoView // = 15

  /// 原创录播点赞次数
  case ovideoVoteCount // = 16

  /// 社区提升管理员
  case communityAdminPromotion // = 100

  /// 我的任务（等级提升）
  case myTask // = 101

  /// 我的成就（获得成就）
  case myAchievement // = 102

  /// 实名认证通过
  case realNameAuthSuccess // = 103

  /// 第三方直播-正在直播
  case streaming // = 104

  /// 社区取消管理员资格
  case communityAdminRevoke // = 105

  /// 社区任命VIP+
  case communityVippPromotion // = 106

  /// 社区取消VIP+
  case communityVippRevoke // = 107

  /// 社区踢出会员
  case communityKickedOut // = 108

  /// 实名认证失败
  case realNameAuthFailed // = 109

  /// 第三方直播-即将直播
  case streamingSoon // = 110

  /// 系统消息(私信等)
  case systemMessage // = 111

  /// 帖子删除、评论删除
  /// 社区禁用、社区公告
  case simpleMessage // = 112

  /// 好友申请
  case socialApply // = 200

  /// 社区邀请
  case communityInvite // = 201

  /// 成就通知给其它人（好友或粉丝）
  case achievementBroadcast // = 300

  /// 等级提升通知其他人 (好友或粉丝)
  case taskBroadcast // = 301
  case UNRECOGNIZED(Int)

  init() {
    self = .commentNews
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .commentNews
    case 1: self = .commentComment
    case 2: self = .commentVote
    case 3: self = .newsFollow
    case 4: self = .newsVote
    case 5: self = .newsAt
    case 6: self = .socialAccept
    case 7: self = .commentDownVote
    case 8: self = .newsCreate
    case 9: self = .newsView
    case 10: self = .newsVoteCount
    case 11: self = .newsCommentCount
    case 12: self = .ovideoCreate
    case 13: self = .commentOvideo
    case 14: self = .ovideoVote
    case 15: self = .ovideoView
    case 16: self = .ovideoVoteCount
    case 100: self = .communityAdminPromotion
    case 101: self = .myTask
    case 102: self = .myAchievement
    case 103: self = .realNameAuthSuccess
    case 104: self = .streaming
    case 105: self = .communityAdminRevoke
    case 106: self = .communityVippPromotion
    case 107: self = .communityVippRevoke
    case 108: self = .communityKickedOut
    case 109: self = .realNameAuthFailed
    case 110: self = .streamingSoon
    case 111: self = .systemMessage
    case 112: self = .simpleMessage
    case 200: self = .socialApply
    case 201: self = .communityInvite
    case 300: self = .achievementBroadcast
    case 301: self = .taskBroadcast
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .commentNews: return 0
    case .commentComment: return 1
    case .commentVote: return 2
    case .newsFollow: return 3
    case .newsVote: return 4
    case .newsAt: return 5
    case .socialAccept: return 6
    case .commentDownVote: return 7
    case .newsCreate: return 8
    case .newsView: return 9
    case .newsVoteCount: return 10
    case .newsCommentCount: return 11
    case .ovideoCreate: return 12
    case .commentOvideo: return 13
    case .ovideoVote: return 14
    case .ovideoView: return 15
    case .ovideoVoteCount: return 16
    case .communityAdminPromotion: return 100
    case .myTask: return 101
    case .myAchievement: return 102
    case .realNameAuthSuccess: return 103
    case .streaming: return 104
    case .communityAdminRevoke: return 105
    case .communityVippPromotion: return 106
    case .communityVippRevoke: return 107
    case .communityKickedOut: return 108
    case .realNameAuthFailed: return 109
    case .streamingSoon: return 110
    case .systemMessage: return 111
    case .simpleMessage: return 112
    case .socialApply: return 200
    case .communityInvite: return 201
    case .achievementBroadcast: return 300
    case .taskBroadcast: return 301
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 通知消息状态，已读/未读
enum Bbproto_ENotifyState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 未读
  case unread // = 0

  /// 已读
  case readed // = 1

  /// 删除
  case deleted // = 2

  /// 动作状态（一般作为接受请求）
  case action1 // = 3

  /// 动作状态（一般作为拒绝请求）
  case action2 // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unread
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unread
    case 1: self = .readed
    case 2: self = .deleted
    case 3: self = .action1
    case 4: self = .action2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unread: return 0
    case .readed: return 1
    case .deleted: return 2
    case .action1: return 3
    case .action2: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 通知分类
enum Bbproto_ENotifyCategory: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 通知
  case notification // = 0

  /// 我的通知
  case myNotification // = 1

  /// 系统通知
  case sysNotification // = 2

  /// 好友请求
  case socialRequest // = 3

  /// 社区请求
  case communityRequest // = 4

  /// 任务成就系统通知
  case taskAndAchievement // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .notification
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notification
    case 1: self = .myNotification
    case 2: self = .sysNotification
    case 3: self = .socialRequest
    case 4: self = .communityRequest
    case 5: self = .taskAndAchievement
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .notification: return 0
    case .myNotification: return 1
    case .sysNotification: return 2
    case .socialRequest: return 3
    case .communityRequest: return 4
    case .taskAndAchievement: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Bbproto_PNotifySetting: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifySetting"

  var mute: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.mute)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mute != false {
      try visitor.visitSingularBoolField(value: self.mute, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播消息
struct Bbproto_PStreamingMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingMsg"

  ///消息id
  var messageID: String {
    get {return _storage._messageID}
    set {_uniqueStorage()._messageID = newValue}
  }

  ///直播内容
  var lives: Bbproto_PStreamingLiveList {
    get {return _storage._lives ?? Bbproto_PStreamingLiveList()}
    set {_uniqueStorage()._lives = newValue}
  }
  /// Returns true if `lives` has been explicitly set.
  var hasLives: Bool {return _storage._lives != nil}
  /// Clears the value of `lives`. Subsequent reads from it will return its default value.
  mutating func clearLives() {_storage._lives = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._messageID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._lives)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._messageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._messageID, fieldNumber: 1)
      }
      if let v = _storage._lives {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 第三方直播消息列表
struct Bbproto_PStreamingMsgList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingMsgList"

  var list: [Bbproto_PStreamingMsg] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 推送消息的个数
struct Bbproto_PMsgCount: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMsgCount"

  var type: String = String()

  var count: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 推送消息个数列表
struct Bbproto_PMsgCountList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMsgCountList"

  var msgCount: [Bbproto_PMsgCount] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedMessageField(value: &self.msgCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgCount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 评论帖子消息定义
struct Bbproto_PNotifyComment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyComment"

  /// 评论相关的news
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  /// 评论
  var comment: Bbproto_PCommentExt {
    get {return _storage._comment ?? Bbproto_PCommentExt()}
    set {_uniqueStorage()._comment = newValue}
  }
  /// Returns true if `comment` has been explicitly set.
  var hasComment: Bool {return _storage._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
  mutating func clearComment() {_storage._comment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._article)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._comment)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._comment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 评论回复通知消息
struct Bbproto_PNotifyCommentReply: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyCommentReply"

  /// 评论相关的news
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  /// 被回复的评论
  var commentExt: Bbproto_PCommentExt {
    get {return _storage._commentExt ?? Bbproto_PCommentExt()}
    set {_uniqueStorage()._commentExt = newValue}
  }
  /// Returns true if `commentExt` has been explicitly set.
  var hasCommentExt: Bool {return _storage._commentExt != nil}
  /// Clears the value of `commentExt`. Subsequent reads from it will return its default value.
  mutating func clearCommentExt() {_storage._commentExt = nil}

  /// 回复的内容
  var replyExt: Bbproto_PCommentExt {
    get {return _storage._replyExt ?? Bbproto_PCommentExt()}
    set {_uniqueStorage()._replyExt = newValue}
  }
  /// Returns true if `replyExt` has been explicitly set.
  var hasReplyExt: Bool {return _storage._replyExt != nil}
  /// Clears the value of `replyExt`. Subsequent reads from it will return its default value.
  mutating func clearReplyExt() {_storage._replyExt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._article)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._commentExt)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._replyExt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._commentExt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._replyExt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 好友申请通知消息
struct Bbproto_PNotifySocial: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifySocial"

  /// 0: 申请好友，1: 接受申请，2: 拒绝申请
  var state: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 评论投票通知消息
struct Bbproto_PNotifyCommentVote: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyCommentVote"

  /// 1：一级评论；2：二级评论
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 被投票评论相关的news
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  /// 被投票的评论
  var commentExt: Bbproto_PCommentExt {
    get {return _storage._commentExt ?? Bbproto_PCommentExt()}
    set {_uniqueStorage()._commentExt = newValue}
  }
  /// Returns true if `commentExt` has been explicitly set.
  var hasCommentExt: Bool {return _storage._commentExt != nil}
  /// Clears the value of `commentExt`. Subsequent reads from it will return its default value.
  mutating func clearCommentExt() {_storage._commentExt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._article)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._commentExt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._commentExt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 帖子点赞通知信息
struct Bbproto_PNotifyNewsVote: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyNewsVote"

  /// 0：赞；1：踩（当前只有赞）
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 帖子
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._article)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 帖子@我
struct Bbproto_PNotifyNewsAt: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyNewsAt"

  /// 帖子
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._article)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 第三方直播提醒
struct Bbproto_PNotifyStreaming: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyStreaming"

  ///直播内容
  var lives: Bbproto_PStreamingLiveList {
    get {return _storage._lives ?? Bbproto_PStreamingLiveList()}
    set {_uniqueStorage()._lives = newValue}
  }
  /// Returns true if `lives` has been explicitly set.
  var hasLives: Bool {return _storage._lives != nil}
  /// Clears the value of `lives`. Subsequent reads from it will return its default value.
  mutating func clearLives() {_storage._lives = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._lives)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._lives {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 社区
struct Bbproto_PNotifyCommunity: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyCommunity"

  /// 社区的id
  var id: String = String()

  /// 社区名字
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 简单通知
struct Bbproto_PNotifySimple: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifySimple"

  /// uri携带跳转对象和对应参数信息
  /// scheme://path?query_string
  ///
  /// 抽奖中奖用户提交更新资料:
  /// payment://lottery/editrcv?uuid=xxx&lottery_id=xxx&gift_nm=xxx&rcv_nm=xxx&rcv_addr=xxx&rcv_phone=xxx&rcv_email=xxx&rcv_remark=xxx
  ///
  /// 抽奖发货提醒:
  /// payment://lottery/shipping?lottery_id=xxx
  ///
  /// 社区公告
  /// community://post/ann?post_id=xxx
  ///
  /// 评论删除
  /// community://comment/delete?post_id=xxx&src_type=xxx&community_id=xxx
  var uri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uri)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 自定义消息
struct Bbproto_PNotifyRawMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyRawMessage"

  /// 服务端国际化(成就名称、等级名称、系统消息、简单通知消息等)
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 帖子评论消息
  var commentNews: Bbproto_PNotifyComment {
    get {return _storage._commentNews ?? Bbproto_PNotifyComment()}
    set {_uniqueStorage()._commentNews = newValue}
  }
  /// Returns true if `commentNews` has been explicitly set.
  var hasCommentNews: Bool {return _storage._commentNews != nil}
  /// Clears the value of `commentNews`. Subsequent reads from it will return its default value.
  mutating func clearCommentNews() {_storage._commentNews = nil}

  /// 评论的评论、评论赞/踩
  var commentReply: Bbproto_PNotifyCommentReply {
    get {return _storage._commentReply ?? Bbproto_PNotifyCommentReply()}
    set {_uniqueStorage()._commentReply = newValue}
  }
  /// Returns true if `commentReply` has been explicitly set.
  var hasCommentReply: Bool {return _storage._commentReply != nil}
  /// Clears the value of `commentReply`. Subsequent reads from it will return its default value.
  mutating func clearCommentReply() {_storage._commentReply = nil}

  /// 好友请求
  var socialApply: Bbproto_PNotifySocial {
    get {return _storage._socialApply ?? Bbproto_PNotifySocial()}
    set {_uniqueStorage()._socialApply = newValue}
  }
  /// Returns true if `socialApply` has been explicitly set.
  var hasSocialApply: Bool {return _storage._socialApply != nil}
  /// Clears the value of `socialApply`. Subsequent reads from it will return its default value.
  mutating func clearSocialApply() {_storage._socialApply = nil}

  /// （注意：评论赞/踩使用commentReply）
  var commentVote: Bbproto_PNotifyCommentVote {
    get {return _storage._commentVote ?? Bbproto_PNotifyCommentVote()}
    set {_uniqueStorage()._commentVote = newValue}
  }
  /// Returns true if `commentVote` has been explicitly set.
  var hasCommentVote: Bool {return _storage._commentVote != nil}
  /// Clears the value of `commentVote`. Subsequent reads from it will return its default value.
  mutating func clearCommentVote() {_storage._commentVote = nil}

  /// 帖子赞/踩
  var newsVote: Bbproto_PNotifyNewsVote {
    get {return _storage._newsVote ?? Bbproto_PNotifyNewsVote()}
    set {_uniqueStorage()._newsVote = newValue}
  }
  /// Returns true if `newsVote` has been explicitly set.
  var hasNewsVote: Bool {return _storage._newsVote != nil}
  /// Clears the value of `newsVote`. Subsequent reads from it will return its default value.
  mutating func clearNewsVote() {_storage._newsVote = nil}

  /// @我
  var newsAt: Bbproto_PNotifyNewsAt {
    get {return _storage._newsAt ?? Bbproto_PNotifyNewsAt()}
    set {_uniqueStorage()._newsAt = newValue}
  }
  /// Returns true if `newsAt` has been explicitly set.
  var hasNewsAt: Bool {return _storage._newsAt != nil}
  /// Clears the value of `newsAt`. Subsequent reads from it will return its default value.
  mutating func clearNewsAt() {_storage._newsAt = nil}

  /// 第三方直播提醒
  var streaming: Bbproto_PNotifyStreaming {
    get {return _storage._streaming ?? Bbproto_PNotifyStreaming()}
    set {_uniqueStorage()._streaming = newValue}
  }
  /// Returns true if `streaming` has been explicitly set.
  var hasStreaming: Bool {return _storage._streaming != nil}
  /// Clears the value of `streaming`. Subsequent reads from it will return its default value.
  mutating func clearStreaming() {_storage._streaming = nil}

  /// 社区通知/社区邀请
  var community: Bbproto_PNotifyCommunity {
    get {return _storage._community ?? Bbproto_PNotifyCommunity()}
    set {_uniqueStorage()._community = newValue}
  }
  /// Returns true if `community` has been explicitly set.
  var hasCommunity: Bool {return _storage._community != nil}
  /// Clears the value of `community`. Subsequent reads from it will return its default value.
  mutating func clearCommunity() {_storage._community = nil}

  /// 简单通知，如果simple为空指针，则不进行跳转
  var simple: Bbproto_PNotifySimple {
    get {return _storage._simple ?? Bbproto_PNotifySimple()}
    set {_uniqueStorage()._simple = newValue}
  }
  /// Returns true if `simple` has been explicitly set.
  var hasSimple: Bool {return _storage._simple != nil}
  /// Clears the value of `simple`. Subsequent reads from it will return its default value.
  mutating func clearSimple() {_storage._simple = nil}

  /// 帖子信息（帖子创建、帖子浏览、帖子评论次数、点赞次数、原创录播帖）
  var article: Bbproto_PPostInfo {
    get {return _storage._article ?? Bbproto_PPostInfo()}
    set {_uniqueStorage()._article = newValue}
  }
  /// Returns true if `article` has been explicitly set.
  var hasArticle: Bool {return _storage._article != nil}
  /// Clears the value of `article`. Subsequent reads from it will return its default value.
  mutating func clearArticle() {_storage._article = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._content)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._commentNews)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._commentReply)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._socialApply)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._commentVote)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._newsVote)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._newsAt)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._streaming)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._community)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._simple)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._article)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 1)
      }
      if let v = _storage._commentNews {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._commentReply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._socialApply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._commentVote {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._newsVote {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._newsAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._streaming {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._community {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._simple {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._article {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 通知消息，服务端发送的消息和客户端收到的消息结构
struct Bbproto_PNotifyMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyMessage"

  /// 消息类型
  var type: Bbproto_ENotifyType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 消息状态
  var state: Bbproto_ENotifyState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// 消息生成时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 消息ID
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 消息来源用户属性
  var from: Bbproto_PUserBase {
    get {return _storage._from ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return _storage._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {_storage._from = nil}

  /// 通知参数（服务内部使用）
  var args: Dictionary<String,String> {
    get {return _storage._args}
    set {_uniqueStorage()._args = newValue}
  }

  /// from和当前用户的关系
  var isFriend: Bool {
    get {return _storage._isFriend}
    set {_uniqueStorage()._isFriend = newValue}
  }

  /// 各服务自定义消息
  var content: Bbproto_PNotifyRawMessage {
    get {return _storage._content ?? Bbproto_PNotifyRawMessage()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {_storage._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 4: try decoder.decodeSingularStringField(value: &_storage._id)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._from)
        case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._args)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._isFriend)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._content)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != Bbproto_ENotifyType.commentNews {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._state != Bbproto_ENotifyState.unread {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 2)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 3)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 4)
      }
      if let v = _storage._from {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._args.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._args, fieldNumber: 6)
      }
      if _storage._isFriend != false {
        try visitor.visitSingularBoolField(value: _storage._isFriend, fieldNumber: 7)
      }
      if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 通知消息列表
struct Bbproto_PNotifyMessageList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifyMessageList"

  /// 消息列表
  var list: [Bbproto_PNotifyMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 通知首页分类消息概要
struct Bbproto_PNotifySummary: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifySummary"

  /// 通知分类，通知、好友请求、社区请求
  var category: Bbproto_ENotifyCategory = Bbproto_ENotifyCategory.notification

  /// 消息列表，最新收到的N消息，N具体跟需求定
  var messageList: [Bbproto_PNotifyMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.category)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.messageList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.category != Bbproto_ENotifyCategory.notification {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 1)
    }
    if !self.messageList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 通知首页分类消息列表
struct Bbproto_PNotifySummaryList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PNotifySummaryList"

  /// 分类消息概要，客户端按照顺序显示消息概要
  var list: [Bbproto_PNotifySummary] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_ENotifyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CommentNews"),
    1: .same(proto: "CommentComment"),
    2: .same(proto: "CommentVote"),
    3: .same(proto: "NewsFollow"),
    4: .same(proto: "NewsVote"),
    5: .same(proto: "NewsAt"),
    6: .same(proto: "SocialAccept"),
    7: .same(proto: "CommentDownVote"),
    8: .same(proto: "NewsCreate"),
    9: .same(proto: "NewsView"),
    10: .same(proto: "NewsVoteCount"),
    11: .same(proto: "NewsCommentCount"),
    12: .same(proto: "OVideoCreate"),
    13: .same(proto: "CommentOVideo"),
    14: .same(proto: "OVideoVote"),
    15: .same(proto: "OVideoView"),
    16: .same(proto: "OVideoVoteCount"),
    100: .same(proto: "CommunityAdminPromotion"),
    101: .same(proto: "MyTask"),
    102: .same(proto: "MyAchievement"),
    103: .same(proto: "RealNameAuthSuccess"),
    104: .same(proto: "Streaming"),
    105: .same(proto: "CommunityAdminRevoke"),
    106: .same(proto: "CommunityVippPromotion"),
    107: .same(proto: "CommunityVippRevoke"),
    108: .same(proto: "CommunityKickedOut"),
    109: .same(proto: "RealNameAuthFailed"),
    110: .same(proto: "StreamingSoon"),
    111: .same(proto: "SystemMessage"),
    112: .same(proto: "SimpleMessage"),
    200: .same(proto: "SocialApply"),
    201: .same(proto: "CommunityInvite"),
    300: .same(proto: "AchievementBroadcast"),
    301: .same(proto: "TaskBroadcast"),
  ]
}

extension Bbproto_ENotifyState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unread"),
    1: .same(proto: "Readed"),
    2: .same(proto: "Deleted"),
    3: .same(proto: "Action1"),
    4: .same(proto: "Action2"),
  ]
}

extension Bbproto_ENotifyCategory: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Notification"),
    1: .same(proto: "MyNotification"),
    2: .same(proto: "SysNotification"),
    3: .same(proto: "SocialRequest"),
    4: .same(proto: "CommunityRequest"),
    5: .same(proto: "TaskAndAchievement"),
  ]
}

extension Bbproto_PNotifySetting: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mute"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifySetting) -> Bool {
    if self.mute != other.mute {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageId"),
    2: .same(proto: "lives"),
  ]

  fileprivate class _StorageClass {
    var _messageID: String = String()
    var _lives: Bbproto_PStreamingLiveList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _messageID = source._messageID
      _lives = source._lives
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingMsg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._messageID != other_storage._messageID {return false}
        if _storage._lives != other_storage._lives {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingMsgList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingMsgList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMsgCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Type"),
    3: .same(proto: "Count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMsgCount) -> Bool {
    if self.type != other.type {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMsgCountList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "MsgCount"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMsgCountList) -> Bool {
    if self.msgCount != other.msgCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyComment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "article"),
    2: .same(proto: "comment"),
  ]

  fileprivate class _StorageClass {
    var _article: Bbproto_PPostInfo? = nil
    var _comment: Bbproto_PCommentExt? = nil

    init() {}

    init(copying source: _StorageClass) {
      _article = source._article
      _comment = source._comment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyComment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._article != other_storage._article {return false}
        if _storage._comment != other_storage._comment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyCommentReply: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "article"),
    2: .same(proto: "commentExt"),
    3: .same(proto: "replyExt"),
  ]

  fileprivate class _StorageClass {
    var _article: Bbproto_PPostInfo? = nil
    var _commentExt: Bbproto_PCommentExt? = nil
    var _replyExt: Bbproto_PCommentExt? = nil

    init() {}

    init(copying source: _StorageClass) {
      _article = source._article
      _commentExt = source._commentExt
      _replyExt = source._replyExt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyCommentReply) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._article != other_storage._article {return false}
        if _storage._commentExt != other_storage._commentExt {return false}
        if _storage._replyExt != other_storage._replyExt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifySocial: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifySocial) -> Bool {
    if self.state != other.state {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyCommentVote: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "article"),
    3: .same(proto: "commentExt"),
  ]

  fileprivate class _StorageClass {
    var _type: Int32 = 0
    var _article: Bbproto_PPostInfo? = nil
    var _commentExt: Bbproto_PCommentExt? = nil

    init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _article = source._article
      _commentExt = source._commentExt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyCommentVote) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._article != other_storage._article {return false}
        if _storage._commentExt != other_storage._commentExt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyNewsVote: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "article"),
  ]

  fileprivate class _StorageClass {
    var _type: Int32 = 0
    var _article: Bbproto_PPostInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _article = source._article
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyNewsVote) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._article != other_storage._article {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyNewsAt: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "article"),
  ]

  fileprivate class _StorageClass {
    var _article: Bbproto_PPostInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _article = source._article
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyNewsAt) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._article != other_storage._article {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyStreaming: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lives"),
  ]

  fileprivate class _StorageClass {
    var _lives: Bbproto_PStreamingLiveList? = nil

    init() {}

    init(copying source: _StorageClass) {
      _lives = source._lives
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyStreaming) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._lives != other_storage._lives {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyCommunity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyCommunity) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifySimple: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifySimple) -> Bool {
    if self.uri != other.uri {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyRawMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    5: .same(proto: "commentNews"),
    6: .same(proto: "commentReply"),
    7: .same(proto: "socialApply"),
    8: .same(proto: "commentVote"),
    9: .same(proto: "newsVote"),
    10: .same(proto: "newsAt"),
    11: .same(proto: "streaming"),
    12: .same(proto: "community"),
    13: .same(proto: "simple"),
    14: .same(proto: "article"),
  ]

  fileprivate class _StorageClass {
    var _content: String = String()
    var _commentNews: Bbproto_PNotifyComment? = nil
    var _commentReply: Bbproto_PNotifyCommentReply? = nil
    var _socialApply: Bbproto_PNotifySocial? = nil
    var _commentVote: Bbproto_PNotifyCommentVote? = nil
    var _newsVote: Bbproto_PNotifyNewsVote? = nil
    var _newsAt: Bbproto_PNotifyNewsAt? = nil
    var _streaming: Bbproto_PNotifyStreaming? = nil
    var _community: Bbproto_PNotifyCommunity? = nil
    var _simple: Bbproto_PNotifySimple? = nil
    var _article: Bbproto_PPostInfo? = nil

    init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _commentNews = source._commentNews
      _commentReply = source._commentReply
      _socialApply = source._socialApply
      _commentVote = source._commentVote
      _newsVote = source._newsVote
      _newsAt = source._newsAt
      _streaming = source._streaming
      _community = source._community
      _simple = source._simple
      _article = source._article
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyRawMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._content != other_storage._content {return false}
        if _storage._commentNews != other_storage._commentNews {return false}
        if _storage._commentReply != other_storage._commentReply {return false}
        if _storage._socialApply != other_storage._socialApply {return false}
        if _storage._commentVote != other_storage._commentVote {return false}
        if _storage._newsVote != other_storage._newsVote {return false}
        if _storage._newsAt != other_storage._newsAt {return false}
        if _storage._streaming != other_storage._streaming {return false}
        if _storage._community != other_storage._community {return false}
        if _storage._simple != other_storage._simple {return false}
        if _storage._article != other_storage._article {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "state"),
    3: .same(proto: "time"),
    4: .same(proto: "ID"),
    5: .same(proto: "from"),
    6: .same(proto: "args"),
    7: .same(proto: "isFriend"),
    20: .same(proto: "content"),
  ]

  fileprivate class _StorageClass {
    var _type: Bbproto_ENotifyType = Bbproto_ENotifyType.commentNews
    var _state: Bbproto_ENotifyState = Bbproto_ENotifyState.unread
    var _time: Int64 = 0
    var _id: String = String()
    var _from: Bbproto_PUserBase? = nil
    var _args: Dictionary<String,String> = [:]
    var _isFriend: Bool = false
    var _content: Bbproto_PNotifyRawMessage? = nil

    init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _state = source._state
      _time = source._time
      _id = source._id
      _from = source._from
      _args = source._args
      _isFriend = source._isFriend
      _content = source._content
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._from != other_storage._from {return false}
        if _storage._args != other_storage._args {return false}
        if _storage._isFriend != other_storage._isFriend {return false}
        if _storage._content != other_storage._content {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifyMessageList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifyMessageList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifySummary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "category"),
    2: .same(proto: "messageList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifySummary) -> Bool {
    if self.category != other.category {return false}
    if self.messageList != other.messageList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PNotifySummaryList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PNotifySummaryList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

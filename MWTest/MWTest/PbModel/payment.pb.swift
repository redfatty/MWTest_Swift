/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: payment.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

///* 发红包，打赏，抽奖返回的订单预支付信息 
struct Bbproto_POrderPay: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".POrderPay"

  /// 接受者账户类型
  var recAccountType: Int32 = 0

  /// 支付用户id
  var cusID: String = String()

  /// 收款用户id
  var receivedID: String = String()

  /// 支付金额（单位：分）
  var fenMoney: Int32 = 0

  /// 支付订单号
  var ordNo: String = String()

  /// 商品名称
  var goodsName: String = String()

  /// 签名
  var sign: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.recAccountType)
      case 2: try decoder.decodeSingularStringField(value: &self.cusID)
      case 3: try decoder.decodeSingularStringField(value: &self.receivedID)
      case 4: try decoder.decodeSingularInt32Field(value: &self.fenMoney)
      case 5: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 6: try decoder.decodeSingularStringField(value: &self.goodsName)
      case 7: try decoder.decodeSingularStringField(value: &self.sign)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recAccountType != 0 {
      try visitor.visitSingularInt32Field(value: self.recAccountType, fieldNumber: 1)
    }
    if !self.cusID.isEmpty {
      try visitor.visitSingularStringField(value: self.cusID, fieldNumber: 2)
    }
    if !self.receivedID.isEmpty {
      try visitor.visitSingularStringField(value: self.receivedID, fieldNumber: 3)
    }
    if self.fenMoney != 0 {
      try visitor.visitSingularInt32Field(value: self.fenMoney, fieldNumber: 4)
    }
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 5)
    }
    if !self.goodsName.isEmpty {
      try visitor.visitSingularStringField(value: self.goodsName, fieldNumber: 6)
    }
    if !self.sign.isEmpty {
      try visitor.visitSingularStringField(value: self.sign, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 红包详情 
struct Bbproto_PRedEnveInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveInfo"

  /// 业务订单号
  var ordNo: String {
    get {return _storage._ordNo}
    set {_uniqueStorage()._ordNo = newValue}
  }

  /// 当前用户领取的金额（单位：分），如果是0表示网红自己查看详情
  var userReceMoney: Int32 {
    get {return _storage._userReceMoney}
    set {_uniqueStorage()._userReceMoney = newValue}
  }

  /// 红包类型（1-普通红包，2-等额群红包，3-随机群红包）
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 红包总金额（单位：分）
  var totaMoney: Int32 {
    get {return _storage._totaMoney}
    set {_uniqueStorage()._totaMoney = newValue}
  }

  /// 红包总数量
  var totaNumber: Int32 {
    get {return _storage._totaNumber}
    set {_uniqueStorage()._totaNumber = newValue}
  }

  /// 已领取金额（单位：分）
  var receMoney: Int32 {
    get {return _storage._receMoney}
    set {_uniqueStorage()._receMoney = newValue}
  }

  /// 已领取数量
  var receNumber: Int32 {
    get {return _storage._receNumber}
    set {_uniqueStorage()._receNumber = newValue}
  }

  /// 描述
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 发送时间
  var sendTm: Int64 {
    get {return _storage._sendTm}
    set {_uniqueStorage()._sendTm = newValue}
  }

  /// 发送人信息
  var userBase: Bbproto_PUserBase {
    get {return _storage._userBase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBase = newValue}
  }
  /// Returns true if `userBase` has been explicitly set.
  var hasUserBase: Bool {return _storage._userBase != nil}
  /// Clears the value of `userBase`. Subsequent reads from it will return its default value.
  mutating func clearUserBase() {_storage._userBase = nil}

  /// 红包是否过期
  var status: Bool {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// 红包领取信息，默认给10个
  var redEnveRece: [Bbproto_PRedEnveRece] {
    get {return _storage._redEnveRece}
    set {_uniqueStorage()._redEnveRece = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._ordNo)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._userReceMoney)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._totaMoney)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._totaNumber)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._receMoney)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._receNumber)
        case 8: try decoder.decodeSingularStringField(value: &_storage._content)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._sendTm)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._userBase)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._status)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._redEnveRece)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._ordNo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ordNo, fieldNumber: 1)
      }
      if _storage._userReceMoney != 0 {
        try visitor.visitSingularInt32Field(value: _storage._userReceMoney, fieldNumber: 2)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 3)
      }
      if _storage._totaMoney != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totaMoney, fieldNumber: 4)
      }
      if _storage._totaNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totaNumber, fieldNumber: 5)
      }
      if _storage._receMoney != 0 {
        try visitor.visitSingularInt32Field(value: _storage._receMoney, fieldNumber: 6)
      }
      if _storage._receNumber != 0 {
        try visitor.visitSingularInt32Field(value: _storage._receNumber, fieldNumber: 7)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 8)
      }
      if _storage._sendTm != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sendTm, fieldNumber: 9)
      }
      if let v = _storage._userBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._status != false {
        try visitor.visitSingularBoolField(value: _storage._status, fieldNumber: 11)
      }
      if !_storage._redEnveRece.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._redEnveRece, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///* 红包领取信息 
struct Bbproto_PRedEnveRece: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveRece"

  /// 唯一编号
  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 领取金额（单位：分）
  var money: Int32 {
    get {return _storage._money}
    set {_uniqueStorage()._money = newValue}
  }

  /// 领取时间
  var receTm: Int64 {
    get {return _storage._receTm}
    set {_uniqueStorage()._receTm = newValue}
  }

  /// 幸运级别（0-一般，1-手气最佳，2-手气最差）
  var luckLevel: Int32 {
    get {return _storage._luckLevel}
    set {_uniqueStorage()._luckLevel = newValue}
  }

  /// 领取用户信息
  var userBase: Bbproto_PUserBase {
    get {return _storage._userBase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBase = newValue}
  }
  /// Returns true if `userBase` has been explicitly set.
  var hasUserBase: Bool {return _storage._userBase != nil}
  /// Clears the value of `userBase`. Subsequent reads from it will return its default value.
  mutating func clearUserBase() {_storage._userBase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._money)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._receTm)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._luckLevel)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._userBase)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._money != 0 {
        try visitor.visitSingularInt32Field(value: _storage._money, fieldNumber: 2)
      }
      if _storage._receTm != 0 {
        try visitor.visitSingularInt64Field(value: _storage._receTm, fieldNumber: 3)
      }
      if _storage._luckLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._luckLevel, fieldNumber: 4)
      }
      if let v = _storage._userBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///* 红包针对用户状态 
struct Bbproto_PRedEnveStatus: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveStatus"

  /// 0-可领取，1-已领取，2-已过期，3-已领完，4-发送者自己
  var status: Int32 = 0

  /// 已领取金额（单位：分）
  var receMoney: Int32 = 0

  /// 描述
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularInt32Field(value: &self.receMoney)
      case 3: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if self.receMoney != 0 {
      try visitor.visitSingularInt32Field(value: self.receMoney, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 红包领取列表 
struct Bbproto_PRedEnveReceList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveReceList"

  var redEnveRece: [Bbproto_PRedEnveRece] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.redEnveRece)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redEnveRece.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redEnveRece, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 账单-总账 
struct Bbproto_PBill: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBill"

  /// 总收入金额（单位：分）
  var incomeMoney: Int32 = 0

  /// 总支出金额（单位：分）
  var expendMoney: Int32 = 0

  /// 总收入数量
  var incomeNumber: Int32 = 0

  /// 总支出数量
  var expendNumber: Int32 = 0

  /// 账单明细
  var billInfo: [Bbproto_PBillInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.incomeMoney)
      case 2: try decoder.decodeSingularInt32Field(value: &self.expendMoney)
      case 3: try decoder.decodeSingularInt32Field(value: &self.incomeNumber)
      case 4: try decoder.decodeSingularInt32Field(value: &self.expendNumber)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.billInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.incomeMoney != 0 {
      try visitor.visitSingularInt32Field(value: self.incomeMoney, fieldNumber: 1)
    }
    if self.expendMoney != 0 {
      try visitor.visitSingularInt32Field(value: self.expendMoney, fieldNumber: 2)
    }
    if self.incomeNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.incomeNumber, fieldNumber: 3)
    }
    if self.expendNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.expendNumber, fieldNumber: 4)
    }
    if !self.billInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.billInfo, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 账单-明细 
struct Bbproto_PBillInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBillInfo"

  /// 编号
  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 业务订单号
  var ordNo: String {
    get {return _storage._ordNo}
    set {_uniqueStorage()._ordNo = newValue}
  }

  /// 金额（单位：分）
  var money: Int32 {
    get {return _storage._money}
    set {_uniqueStorage()._money = newValue}
  }

  /// 时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 类型（1-普通红包，2-等额群红包，3-随机群红包，4-打赏，5-抽奖）
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 发送人信息
  var userBase: Bbproto_PUserBase {
    get {return _storage._userBase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBase = newValue}
  }
  /// Returns true if `userBase` has been explicitly set.
  var hasUserBase: Bool {return _storage._userBase != nil}
  /// Clears the value of `userBase`. Subsequent reads from it will return its default value.
  mutating func clearUserBase() {_storage._userBase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ordNo)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._money)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._userBase)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ordNo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ordNo, fieldNumber: 2)
      }
      if _storage._money != 0 {
        try visitor.visitSingularInt32Field(value: _storage._money, fieldNumber: 3)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 4)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 5)
      }
      if let v = _storage._userBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///* 发红包列表 
struct Bbproto_PRedEnveList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveList"

  var redEnveBaseInfo: [Bbproto_PRedEnveBaseInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.redEnveBaseInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redEnveBaseInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redEnveBaseInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 发红包列表单个红包信息 
struct Bbproto_PRedEnveBaseInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRedEnveBaseInfo"

  /// 唯一编号
  var id: Int32 = 0

  /// 业务订单号
  var ordNo: String = String()

  /// 红包类型（1-普通红包，2-等额群红包，3-随机群红包）
  var type: Int32 = 0

  /// 描述
  var content: String = String()

  /// 发送时间
  var sendTm: Int64 = 0

  /// 可领取用户总数量
  var number: Int32 = 0

  /// 前五个可领取用户信息
  var userBase: [Bbproto_PUserBase] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 3: try decoder.decodeSingularInt32Field(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.content)
      case 5: try decoder.decodeSingularInt64Field(value: &self.sendTm)
      case 6: try decoder.decodeSingularInt32Field(value: &self.number)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.userBase)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if self.sendTm != 0 {
      try visitor.visitSingularInt64Field(value: self.sendTm, fieldNumber: 5)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 6)
    }
    if !self.userBase.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userBase, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 打赏列表 
struct Bbproto_PRewardList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRewardList"

  var rewardInfo: [Bbproto_PRewardInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rewardInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rewardInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardInfo, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 打赏列表详情 
struct Bbproto_PRewardInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRewardInfo"

  /// 唯一编号
  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 业务订单号
  var ordNo: String {
    get {return _storage._ordNo}
    set {_uniqueStorage()._ordNo = newValue}
  }

  /// 金额(单位：分)
  var money: Int32 {
    get {return _storage._money}
    set {_uniqueStorage()._money = newValue}
  }

  /// 描述
  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// 打赏时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// 打赏人或领赏人信息
  var userBase: Bbproto_PUserBase {
    get {return _storage._userBase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBase = newValue}
  }
  /// Returns true if `userBase` has been explicitly set.
  var hasUserBase: Bool {return _storage._userBase != nil}
  /// Clears the value of `userBase`. Subsequent reads from it will return its default value.
  mutating func clearUserBase() {_storage._userBase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ordNo)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._money)
        case 4: try decoder.decodeSingularStringField(value: &_storage._content)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._userBase)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ordNo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ordNo, fieldNumber: 2)
      }
      if _storage._money != 0 {
        try visitor.visitSingularInt32Field(value: _storage._money, fieldNumber: 3)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 4)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 5)
      }
      if let v = _storage._userBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///* 打赏详情以及打赏人历史打赏列表 
struct Bbproto_PRewardInfoList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRewardInfoList"

  /// 打赏信息
  var rewardInfo: Bbproto_PRewardInfo {
    get {return _storage._rewardInfo ?? Bbproto_PRewardInfo()}
    set {_uniqueStorage()._rewardInfo = newValue}
  }
  /// Returns true if `rewardInfo` has been explicitly set.
  var hasRewardInfo: Bool {return _storage._rewardInfo != nil}
  /// Clears the value of `rewardInfo`. Subsequent reads from it will return its default value.
  mutating func clearRewardInfo() {_storage._rewardInfo = nil}

  /// 打赏总金额
  var money: Int32 {
    get {return _storage._money}
    set {_uniqueStorage()._money = newValue}
  }

  /// 历史打赏信息
  var rewardList: [Bbproto_PRewardInfo] {
    get {return _storage._rewardList}
    set {_uniqueStorage()._rewardList = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._rewardInfo)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._money)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._rewardList)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._rewardInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._money != 0 {
        try visitor.visitSingularInt32Field(value: _storage._money, fieldNumber: 2)
      }
      if !_storage._rewardList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rewardList, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///* 搜索的红包和打赏信息 
struct Bbproto_PSreachList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSreachList"

  /// 搜索到的红包信息
  var redEnveBaseInfo: [Bbproto_PRedEnveBaseInfo] = []

  /// 搜索到的打赏信息
  var rewardInfo: [Bbproto_PRewardInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.redEnveBaseInfo)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.rewardInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.redEnveBaseInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redEnveBaseInfo, fieldNumber: 1)
    }
    if !self.rewardInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 用户关注的网红列表 
struct Bbproto_PCelebrityList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCelebrityList"

  var celebrityGroup: [Bbproto_PCelebrityGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.celebrityGroup)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.celebrityGroup.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.celebrityGroup, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 用户关注的网红分组
struct Bbproto_PCelebrityGroup: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCelebrityGroup"

  /// 分组, A-Z
  var group: String = String()

  /// 网红信息
  var celebrityInfo: [Bbproto_PCelebrityInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.group)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.celebrityInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 1)
    }
    if !self.celebrityInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.celebrityInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///* 用户关注的网红信息 
struct Bbproto_PCelebrityInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCelebrityInfo"

  /// 网红的VO信息
  var userBaseVo: Bbproto_PUserBase {
    get {return _storage._userBaseVo ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBaseVo = newValue}
  }
  /// Returns true if `userBaseVo` has been explicitly set.
  var hasUserBaseVo: Bool {return _storage._userBaseVo != nil}
  /// Clears the value of `userBaseVo`. Subsequent reads from it will return its default value.
  mutating func clearUserBaseVo() {_storage._userBaseVo = nil}

  /// 网红信息
  var userBase: Bbproto_PUserBase {
    get {return _storage._userBase ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._userBase = newValue}
  }
  /// Returns true if `userBase` has been explicitly set.
  var hasUserBase: Bool {return _storage._userBase != nil}
  /// Clears the value of `userBase`. Subsequent reads from it will return its default value.
  mutating func clearUserBase() {_storage._userBase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._userBaseVo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._userBase)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userBaseVo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._userBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///*筛选中奖者
struct Bbproto_PShuffle: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PShuffle"

  ///标题
  var title: String = String()

  ///获奖人数
  var winners: Int32 = 0

  ///位置代码
  var region: [String] = []

  ///描述
  var remark: String = String()

  ///性别 -1:不限，0:女，1:男
  var gender: Int32 = 0

  ///单个金额
  var bonus: Int32 = 0

  ///总金额
  var totAmt: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularInt32Field(value: &self.winners)
      case 3: try decoder.decodeRepeatedStringField(value: &self.region)
      case 4: try decoder.decodeSingularStringField(value: &self.remark)
      case 5: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 6: try decoder.decodeSingularInt32Field(value: &self.bonus)
      case 7: try decoder.decodeSingularInt32Field(value: &self.totAmt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.winners != 0 {
      try visitor.visitSingularInt32Field(value: self.winners, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitRepeatedStringField(value: self.region, fieldNumber: 3)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 4)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 5)
    }
    if self.bonus != 0 {
      try visitor.visitSingularInt32Field(value: self.bonus, fieldNumber: 6)
    }
    if self.totAmt != 0 {
      try visitor.visitSingularInt32Field(value: self.totAmt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*确认抽奖
struct Bbproto_PLotteryConfirm: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLotteryConfirm"

  /// 抽奖标题
  var title: String = String()

  /// 接受人类型（-1:不限，0:女，1:男）
  var gender: Int32 = 0

  ///地区筛选，格式如CN;4403、CN;44，配合下面的negate使用
  var region: [String] = []

  ///总金额
  var totAmt: Int32 = 0

  ///获奖名额数
  var winners: Int32 = 0

  ///平均每个人的奖金（分）
  var bonus: Int32 = 0

  ///描述
  var remark: String = String()

  ///中奖用户信息
  var userList: [Bbproto_PUserBaseEx] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 3: try decoder.decodeRepeatedStringField(value: &self.region)
      case 4: try decoder.decodeSingularInt32Field(value: &self.totAmt)
      case 5: try decoder.decodeSingularInt32Field(value: &self.winners)
      case 6: try decoder.decodeSingularInt32Field(value: &self.bonus)
      case 7: try decoder.decodeSingularStringField(value: &self.remark)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.userList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitRepeatedStringField(value: self.region, fieldNumber: 3)
    }
    if self.totAmt != 0 {
      try visitor.visitSingularInt32Field(value: self.totAmt, fieldNumber: 4)
    }
    if self.winners != 0 {
      try visitor.visitSingularInt32Field(value: self.winners, fieldNumber: 5)
    }
    if self.bonus != 0 {
      try visitor.visitSingularInt32Field(value: self.bonus, fieldNumber: 6)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 7)
    }
    if !self.userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userList, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*历史抽奖记录（最近一月）
struct Bbproto_PLotteryList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLotteryList"

  ///单个抽奖信息
  var lotteries: [Bbproto_PLotterySingle] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.lotteries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lotteries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*中奖者领奖
struct Bbproto_PAcceptPrize: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAcceptPrize"

  ///抽奖ID
  var lotteryID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.lotteryID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitSingularStringField(value: self.lotteryID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*抽奖包详情、筛选结果
struct Bbproto_PLotteryDetail: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLotteryDetail"

  ///抽奖包ID
  var lotteryID: String = String()

  ///标题
  var title: String = String()

  ///抽奖总金额
  var totAmt: Int32 = 0

  ///抽奖创建时间
  var crtTm: Int64 = 0

  ///抽奖类型（0:全部，1：男，2:女）
  var type: Int32 = 0

  ///获奖人数
  var winners: Int32 = 0

  ///位置代码
  var region: [String] = []

  ///用户列表
  var userList: [Bbproto_PUserBaseEx] = []

  ///描述
  var remark: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.lotteryID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.totAmt)
      case 4: try decoder.decodeSingularInt64Field(value: &self.crtTm)
      case 5: try decoder.decodeSingularInt32Field(value: &self.type)
      case 6: try decoder.decodeSingularInt32Field(value: &self.winners)
      case 7: try decoder.decodeRepeatedStringField(value: &self.region)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.userList)
      case 9: try decoder.decodeSingularStringField(value: &self.remark)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitSingularStringField(value: self.lotteryID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.totAmt != 0 {
      try visitor.visitSingularInt32Field(value: self.totAmt, fieldNumber: 3)
    }
    if self.crtTm != 0 {
      try visitor.visitSingularInt64Field(value: self.crtTm, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    if self.winners != 0 {
      try visitor.visitSingularInt32Field(value: self.winners, fieldNumber: 6)
    }
    if !self.region.isEmpty {
      try visitor.visitRepeatedStringField(value: self.region, fieldNumber: 7)
    }
    if !self.userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userList, fieldNumber: 8)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLotterySingle: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLotterySingle"

  ///抽奖包ID
  var lotteryID: String = String()

  ///抽奖包标题
  var title: String = String()

  ///中奖人数
  var winners: Int32 = 0

  ///发起抽奖时间
  var crtTm: Int64 = 0

  ///参与抽奖者信息（最多5个）
  var userList: [Bbproto_PUserBase] = []

  ///是否在24小时之内
  var in24Hours: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.lotteryID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt32Field(value: &self.winners)
      case 4: try decoder.decodeSingularInt64Field(value: &self.crtTm)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.userList)
      case 6: try decoder.decodeSingularBoolField(value: &self.in24Hours)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitSingularStringField(value: self.lotteryID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.winners != 0 {
      try visitor.visitSingularInt32Field(value: self.winners, fieldNumber: 3)
    }
    if self.crtTm != 0 {
      try visitor.visitSingularInt64Field(value: self.crtTm, fieldNumber: 4)
    }
    if !self.userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userList, fieldNumber: 5)
    }
    if self.in24Hours != false {
      try visitor.visitSingularBoolField(value: self.in24Hours, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PUserBaseEx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserBaseEx"

  ///用户基本信息
  var info: Bbproto_PUserBase {
    get {return _storage._info ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_storage._info = nil}

  ///用户性别（1：男，2:女）
  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  ///单个领奖金额(单位分)
  var amt: Int32 {
    get {return _storage._amt}
    set {_uniqueStorage()._amt = newValue}
  }

  ///用户位置
  var region: String {
    get {return _storage._region}
    set {_uniqueStorage()._region = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._info)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._gender)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._amt)
        case 4: try decoder.decodeSingularStringField(value: &_storage._region)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 2)
      }
      if _storage._amt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._amt, fieldNumber: 3)
      }
      if !_storage._region.isEmpty {
        try visitor.visitSingularStringField(value: _storage._region, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

///*抽奖历史删除
struct Bbproto_PLotteryDel: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLotteryDel"

  ///抽奖ID
  var lotteryID: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.lotteryID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.lotteryID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PWinLottery: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PWinLottery"

  ///抽奖包ID
  var lotteryID: String = String()

  ///发送放uuid
  var sendUuid: String = String()

  ///发送者昵称
  var sendNickNm: String = String()

  ///标题
  var title: String = String()

  ///抽奖创建时间
  var crtTm: Int64 = 0

  ///领奖时间
  var accTm: Int64 = 0

  ///描述
  var remark: String = String()

  ///的奖金（分）
  var bonus: Int32 = 0

  ///状态 （0:还未领奖 1:已领奖 2:已过期）
  var status: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.lotteryID)
      case 2: try decoder.decodeSingularStringField(value: &self.sendUuid)
      case 3: try decoder.decodeSingularStringField(value: &self.sendNickNm)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularInt64Field(value: &self.crtTm)
      case 6: try decoder.decodeSingularInt64Field(value: &self.accTm)
      case 7: try decoder.decodeSingularStringField(value: &self.remark)
      case 8: try decoder.decodeSingularInt32Field(value: &self.bonus)
      case 9: try decoder.decodeSingularInt32Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitSingularStringField(value: self.lotteryID, fieldNumber: 1)
    }
    if !self.sendUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.sendUuid, fieldNumber: 2)
    }
    if !self.sendNickNm.isEmpty {
      try visitor.visitSingularStringField(value: self.sendNickNm, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if self.crtTm != 0 {
      try visitor.visitSingularInt64Field(value: self.crtTm, fieldNumber: 5)
    }
    if self.accTm != 0 {
      try visitor.visitSingularInt64Field(value: self.accTm, fieldNumber: 6)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 7)
    }
    if self.bonus != 0 {
      try visitor.visitSingularInt32Field(value: self.bonus, fieldNumber: 8)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///*礼物抽奖包详情、筛选结果 
struct Bbproto_PGiftLotteryDetail: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGiftLotteryDetail"

  ///抽奖包ID
  var lotteryID: String = String()

  ///标题
  var title: String = String()

  ///过期时间 ms
  var overdueTm: Int64 = 0

  ///获奖总人数
  var winners: Int32 = 0

  ///抽奖类型（-1:全部，1：男，0:女）
  var gender: Int32 = 0

  ///位置代码
  var regions: [String] = []

  ///用户列表
  var userList: [Bbproto_PUserBaseGiftEx] = []

  ///描述
  var remark: String = String()

  ///礼物
  var gifts: [Bbproto_PGiftInfo] = []

  ///状态 1:初始状态，2:领奖中，3:领奖完成，4:过期，0:已删除
  var status: Int32 = 0

  ///剩余未领取的数量
  var remainCnt: Int32 = 0

  ///地区个数
  var regionCnt: Int32 = 0

  ///创建时间
  var crtTm: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.lotteryID)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularInt64Field(value: &self.overdueTm)
      case 4: try decoder.decodeSingularInt32Field(value: &self.winners)
      case 5: try decoder.decodeSingularInt32Field(value: &self.gender)
      case 6: try decoder.decodeRepeatedStringField(value: &self.regions)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.userList)
      case 8: try decoder.decodeSingularStringField(value: &self.remark)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.gifts)
      case 10: try decoder.decodeSingularInt32Field(value: &self.status)
      case 11: try decoder.decodeSingularInt32Field(value: &self.remainCnt)
      case 12: try decoder.decodeSingularInt32Field(value: &self.regionCnt)
      case 13: try decoder.decodeSingularInt64Field(value: &self.crtTm)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lotteryID.isEmpty {
      try visitor.visitSingularStringField(value: self.lotteryID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.overdueTm != 0 {
      try visitor.visitSingularInt64Field(value: self.overdueTm, fieldNumber: 3)
    }
    if self.winners != 0 {
      try visitor.visitSingularInt32Field(value: self.winners, fieldNumber: 4)
    }
    if self.gender != 0 {
      try visitor.visitSingularInt32Field(value: self.gender, fieldNumber: 5)
    }
    if !self.regions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.regions, fieldNumber: 6)
    }
    if !self.userList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userList, fieldNumber: 7)
    }
    if !self.remark.isEmpty {
      try visitor.visitSingularStringField(value: self.remark, fieldNumber: 8)
    }
    if !self.gifts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gifts, fieldNumber: 9)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 10)
    }
    if self.remainCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.remainCnt, fieldNumber: 11)
    }
    if self.regionCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.regionCnt, fieldNumber: 12)
    }
    if self.crtTm != 0 {
      try visitor.visitSingularInt64Field(value: self.crtTm, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PGiftInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PGiftInfo"

  ///用户中奖的奖品ID
  var giftID: String = String()

  ///用户中奖的奖品名称
  var giftNm: String = String()

  ///礼物数量
  var giftCnt: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.giftID)
      case 2: try decoder.decodeSingularStringField(value: &self.giftNm)
      case 3: try decoder.decodeSingularInt32Field(value: &self.giftCnt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.giftID.isEmpty {
      try visitor.visitSingularStringField(value: self.giftID, fieldNumber: 1)
    }
    if !self.giftNm.isEmpty {
      try visitor.visitSingularStringField(value: self.giftNm, fieldNumber: 2)
    }
    if self.giftCnt != 0 {
      try visitor.visitSingularInt32Field(value: self.giftCnt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PUserBaseGiftEx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PUserBaseGiftEx"

  ///用户基本信息
  var info: Bbproto_PUserBase {
    get {return _storage._info ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_storage._info = nil}

  ///奖品信息
  var gift: Bbproto_PGiftInfo {
    get {return _storage._gift ?? Bbproto_PGiftInfo()}
    set {_uniqueStorage()._gift = newValue}
  }
  /// Returns true if `gift` has been explicitly set.
  var hasGift: Bool {return _storage._gift != nil}
  /// Clears the value of `gift`. Subsequent reads from it will return its default value.
  mutating func clearGift() {_storage._gift = nil}

  ///用户位置
  var region: String {
    get {return _storage._region}
    set {_uniqueStorage()._region = newValue}
  }

  ///收货姓名 C端
  var rcvNm: String {
    get {return _storage._rcvNm}
    set {_uniqueStorage()._rcvNm = newValue}
  }

  ///收货地址 C端
  var rcvAddr: String {
    get {return _storage._rcvAddr}
    set {_uniqueStorage()._rcvAddr = newValue}
  }

  ///联系电话 C端
  var rcvPhone: String {
    get {return _storage._rcvPhone}
    set {_uniqueStorage()._rcvPhone = newValue}
  }

  ///邮箱地址 C端
  var rcvEmail: String {
    get {return _storage._rcvEmail}
    set {_uniqueStorage()._rcvEmail = newValue}
  }

  ///描述 C端
  var rcvRemark: String {
    get {return _storage._rcvRemark}
    set {_uniqueStorage()._rcvRemark = newValue}
  }

  ///更新次数(C端使用)
  var editCnt: Int32 {
    get {return _storage._editCnt}
    set {_uniqueStorage()._editCnt = newValue}
  }

  ///是否填写收货信息 -1:未领奖, 0: 未填写， 1: 已填写，3:头像高亮显示
  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  ///收货姓名 B端
  var brcvNm: String {
    get {return _storage._brcvNm}
    set {_uniqueStorage()._brcvNm = newValue}
  }

  ///收货地址 B端
  var brcvAddr: String {
    get {return _storage._brcvAddr}
    set {_uniqueStorage()._brcvAddr = newValue}
  }

  ///联系电话 B端
  var brcvPhone: String {
    get {return _storage._brcvPhone}
    set {_uniqueStorage()._brcvPhone = newValue}
  }

  ///邮箱地址 B端
  var brcvEmail: String {
    get {return _storage._brcvEmail}
    set {_uniqueStorage()._brcvEmail = newValue}
  }

  ///描述 B端	
  var brcvRemark: String {
    get {return _storage._brcvRemark}
    set {_uniqueStorage()._brcvRemark = newValue}
  }

  ///领奖时间
  var acceptTm: Int64 {
    get {return _storage._acceptTm}
    set {_uniqueStorage()._acceptTm = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._info)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gift)
        case 4: try decoder.decodeSingularStringField(value: &_storage._region)
        case 5: try decoder.decodeSingularStringField(value: &_storage._rcvNm)
        case 6: try decoder.decodeSingularStringField(value: &_storage._rcvAddr)
        case 7: try decoder.decodeSingularStringField(value: &_storage._rcvPhone)
        case 8: try decoder.decodeSingularStringField(value: &_storage._rcvEmail)
        case 9: try decoder.decodeSingularStringField(value: &_storage._rcvRemark)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._editCnt)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._status)
        case 12: try decoder.decodeSingularStringField(value: &_storage._brcvNm)
        case 13: try decoder.decodeSingularStringField(value: &_storage._brcvAddr)
        case 14: try decoder.decodeSingularStringField(value: &_storage._brcvPhone)
        case 15: try decoder.decodeSingularStringField(value: &_storage._brcvEmail)
        case 16: try decoder.decodeSingularStringField(value: &_storage._brcvRemark)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._acceptTm)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gift {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._region.isEmpty {
        try visitor.visitSingularStringField(value: _storage._region, fieldNumber: 4)
      }
      if !_storage._rcvNm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcvNm, fieldNumber: 5)
      }
      if !_storage._rcvAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcvAddr, fieldNumber: 6)
      }
      if !_storage._rcvPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcvPhone, fieldNumber: 7)
      }
      if !_storage._rcvEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcvEmail, fieldNumber: 8)
      }
      if !_storage._rcvRemark.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rcvRemark, fieldNumber: 9)
      }
      if _storage._editCnt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._editCnt, fieldNumber: 10)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 11)
      }
      if !_storage._brcvNm.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brcvNm, fieldNumber: 12)
      }
      if !_storage._brcvAddr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brcvAddr, fieldNumber: 13)
      }
      if !_storage._brcvPhone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brcvPhone, fieldNumber: 14)
      }
      if !_storage._brcvEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brcvEmail, fieldNumber: 15)
      }
      if !_storage._brcvRemark.isEmpty {
        try visitor.visitSingularStringField(value: _storage._brcvRemark, fieldNumber: 16)
      }
      if _storage._acceptTm != 0 {
        try visitor.visitSingularInt64Field(value: _storage._acceptTm, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_POrderPay: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recAccountType"),
    2: .same(proto: "cusId"),
    3: .same(proto: "receivedId"),
    4: .same(proto: "fenMoney"),
    5: .standard(proto: "ord_no"),
    6: .same(proto: "goodsName"),
    7: .same(proto: "sign"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_POrderPay) -> Bool {
    if self.recAccountType != other.recAccountType {return false}
    if self.cusID != other.cusID {return false}
    if self.receivedID != other.receivedID {return false}
    if self.fenMoney != other.fenMoney {return false}
    if self.ordNo != other.ordNo {return false}
    if self.goodsName != other.goodsName {return false}
    if self.sign != other.sign {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ord_no"),
    2: .standard(proto: "user_rece_money"),
    3: .same(proto: "type"),
    4: .standard(proto: "tota_money"),
    5: .standard(proto: "tota_number"),
    6: .standard(proto: "rece_money"),
    7: .standard(proto: "rece_number"),
    8: .same(proto: "content"),
    9: .standard(proto: "send_tm"),
    10: .same(proto: "userBase"),
    11: .same(proto: "status"),
    12: .same(proto: "redEnveRece"),
  ]

  fileprivate class _StorageClass {
    var _ordNo: String = String()
    var _userReceMoney: Int32 = 0
    var _type: Int32 = 0
    var _totaMoney: Int32 = 0
    var _totaNumber: Int32 = 0
    var _receMoney: Int32 = 0
    var _receNumber: Int32 = 0
    var _content: String = String()
    var _sendTm: Int64 = 0
    var _userBase: Bbproto_PUserBase? = nil
    var _status: Bool = false
    var _redEnveRece: [Bbproto_PRedEnveRece] = []

    init() {}

    init(copying source: _StorageClass) {
      _ordNo = source._ordNo
      _userReceMoney = source._userReceMoney
      _type = source._type
      _totaMoney = source._totaMoney
      _totaNumber = source._totaNumber
      _receMoney = source._receMoney
      _receNumber = source._receNumber
      _content = source._content
      _sendTm = source._sendTm
      _userBase = source._userBase
      _status = source._status
      _redEnveRece = source._redEnveRece
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._ordNo != other_storage._ordNo {return false}
        if _storage._userReceMoney != other_storage._userReceMoney {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._totaMoney != other_storage._totaMoney {return false}
        if _storage._totaNumber != other_storage._totaNumber {return false}
        if _storage._receMoney != other_storage._receMoney {return false}
        if _storage._receNumber != other_storage._receNumber {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._sendTm != other_storage._sendTm {return false}
        if _storage._userBase != other_storage._userBase {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._redEnveRece != other_storage._redEnveRece {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveRece: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "money"),
    3: .standard(proto: "rece_tm"),
    4: .standard(proto: "luck_level"),
    5: .same(proto: "userBase"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _money: Int32 = 0
    var _receTm: Int64 = 0
    var _luckLevel: Int32 = 0
    var _userBase: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _money = source._money
      _receTm = source._receTm
      _luckLevel = source._luckLevel
      _userBase = source._userBase
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveRece) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._money != other_storage._money {return false}
        if _storage._receTm != other_storage._receTm {return false}
        if _storage._luckLevel != other_storage._luckLevel {return false}
        if _storage._userBase != other_storage._userBase {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveStatus: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "rece_money"),
    3: .same(proto: "content"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveStatus) -> Bool {
    if self.status != other.status {return false}
    if self.receMoney != other.receMoney {return false}
    if self.content != other.content {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveReceList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "redEnveRece"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveReceList) -> Bool {
    if self.redEnveRece != other.redEnveRece {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBill: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "income_money"),
    2: .standard(proto: "expend_money"),
    3: .standard(proto: "income_number"),
    4: .standard(proto: "expend_number"),
    5: .same(proto: "billInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBill) -> Bool {
    if self.incomeMoney != other.incomeMoney {return false}
    if self.expendMoney != other.expendMoney {return false}
    if self.incomeNumber != other.incomeNumber {return false}
    if self.expendNumber != other.expendNumber {return false}
    if self.billInfo != other.billInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBillInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ord_no"),
    3: .same(proto: "money"),
    4: .same(proto: "time"),
    5: .same(proto: "type"),
    6: .same(proto: "userBase"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _ordNo: String = String()
    var _money: Int32 = 0
    var _time: Int64 = 0
    var _type: Int32 = 0
    var _userBase: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ordNo = source._ordNo
      _money = source._money
      _time = source._time
      _type = source._type
      _userBase = source._userBase
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBillInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._ordNo != other_storage._ordNo {return false}
        if _storage._money != other_storage._money {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._userBase != other_storage._userBase {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "redEnveBaseInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveList) -> Bool {
    if self.redEnveBaseInfo != other.redEnveBaseInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRedEnveBaseInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ord_no"),
    3: .same(proto: "type"),
    4: .same(proto: "content"),
    5: .standard(proto: "send_tm"),
    6: .same(proto: "number"),
    7: .same(proto: "userBase"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRedEnveBaseInfo) -> Bool {
    if self.id != other.id {return false}
    if self.ordNo != other.ordNo {return false}
    if self.type != other.type {return false}
    if self.content != other.content {return false}
    if self.sendTm != other.sendTm {return false}
    if self.number != other.number {return false}
    if self.userBase != other.userBase {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRewardList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rewardInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRewardList) -> Bool {
    if self.rewardInfo != other.rewardInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRewardInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "ord_no"),
    3: .same(proto: "money"),
    4: .same(proto: "content"),
    5: .same(proto: "time"),
    6: .same(proto: "userBase"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _ordNo: String = String()
    var _money: Int32 = 0
    var _content: String = String()
    var _time: Int64 = 0
    var _userBase: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ordNo = source._ordNo
      _money = source._money
      _content = source._content
      _time = source._time
      _userBase = source._userBase
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PRewardInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._ordNo != other_storage._ordNo {return false}
        if _storage._money != other_storage._money {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._userBase != other_storage._userBase {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRewardInfoList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rewardInfo"),
    2: .same(proto: "money"),
    3: .same(proto: "rewardList"),
  ]

  fileprivate class _StorageClass {
    var _rewardInfo: Bbproto_PRewardInfo? = nil
    var _money: Int32 = 0
    var _rewardList: [Bbproto_PRewardInfo] = []

    init() {}

    init(copying source: _StorageClass) {
      _rewardInfo = source._rewardInfo
      _money = source._money
      _rewardList = source._rewardList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PRewardInfoList) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._rewardInfo != other_storage._rewardInfo {return false}
        if _storage._money != other_storage._money {return false}
        if _storage._rewardList != other_storage._rewardList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSreachList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "redEnveBaseInfo"),
    2: .same(proto: "rewardInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSreachList) -> Bool {
    if self.redEnveBaseInfo != other.redEnveBaseInfo {return false}
    if self.rewardInfo != other.rewardInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCelebrityList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "celebrityGroup"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCelebrityList) -> Bool {
    if self.celebrityGroup != other.celebrityGroup {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCelebrityGroup: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
    2: .same(proto: "celebrityInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCelebrityGroup) -> Bool {
    if self.group != other.group {return false}
    if self.celebrityInfo != other.celebrityInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCelebrityInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userBaseVO"),
    2: .same(proto: "userBase"),
  ]

  fileprivate class _StorageClass {
    var _userBaseVo: Bbproto_PUserBase? = nil
    var _userBase: Bbproto_PUserBase? = nil

    init() {}

    init(copying source: _StorageClass) {
      _userBaseVo = source._userBaseVo
      _userBase = source._userBase
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCelebrityInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userBaseVo != other_storage._userBaseVo {return false}
        if _storage._userBase != other_storage._userBase {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PShuffle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "winners"),
    3: .same(proto: "region"),
    4: .same(proto: "remark"),
    5: .same(proto: "gender"),
    6: .same(proto: "bonus"),
    7: .same(proto: "totAmt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PShuffle) -> Bool {
    if self.title != other.title {return false}
    if self.winners != other.winners {return false}
    if self.region != other.region {return false}
    if self.remark != other.remark {return false}
    if self.gender != other.gender {return false}
    if self.bonus != other.bonus {return false}
    if self.totAmt != other.totAmt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLotteryConfirm: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "gender"),
    3: .same(proto: "region"),
    4: .same(proto: "totAmt"),
    5: .same(proto: "winners"),
    6: .same(proto: "bonus"),
    7: .same(proto: "remark"),
    8: .same(proto: "userList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLotteryConfirm) -> Bool {
    if self.title != other.title {return false}
    if self.gender != other.gender {return false}
    if self.region != other.region {return false}
    if self.totAmt != other.totAmt {return false}
    if self.winners != other.winners {return false}
    if self.bonus != other.bonus {return false}
    if self.remark != other.remark {return false}
    if self.userList != other.userList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLotteryList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteries"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLotteryList) -> Bool {
    if self.lotteries != other.lotteries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAcceptPrize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAcceptPrize) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLotteryDetail: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
    2: .same(proto: "title"),
    3: .same(proto: "totAmt"),
    4: .same(proto: "crtTm"),
    5: .same(proto: "type"),
    6: .same(proto: "winners"),
    7: .same(proto: "region"),
    8: .same(proto: "userList"),
    9: .same(proto: "remark"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLotteryDetail) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if self.title != other.title {return false}
    if self.totAmt != other.totAmt {return false}
    if self.crtTm != other.crtTm {return false}
    if self.type != other.type {return false}
    if self.winners != other.winners {return false}
    if self.region != other.region {return false}
    if self.userList != other.userList {return false}
    if self.remark != other.remark {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLotterySingle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
    2: .same(proto: "title"),
    3: .same(proto: "winners"),
    4: .same(proto: "crtTm"),
    5: .same(proto: "userList"),
    6: .same(proto: "in24Hours"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLotterySingle) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if self.title != other.title {return false}
    if self.winners != other.winners {return false}
    if self.crtTm != other.crtTm {return false}
    if self.userList != other.userList {return false}
    if self.in24Hours != other.in24Hours {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserBaseEx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .same(proto: "gender"),
    3: .same(proto: "amt"),
    4: .same(proto: "region"),
  ]

  fileprivate class _StorageClass {
    var _info: Bbproto_PUserBase? = nil
    var _gender: Int32 = 0
    var _amt: Int32 = 0
    var _region: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _info = source._info
      _gender = source._gender
      _amt = source._amt
      _region = source._region
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserBaseEx) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._info != other_storage._info {return false}
        if _storage._gender != other_storage._gender {return false}
        if _storage._amt != other_storage._amt {return false}
        if _storage._region != other_storage._region {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLotteryDel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLotteryDel) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PWinLottery: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
    2: .same(proto: "sendUuid"),
    3: .same(proto: "sendNickNm"),
    4: .same(proto: "title"),
    5: .same(proto: "crtTm"),
    6: .same(proto: "accTm"),
    7: .same(proto: "remark"),
    8: .same(proto: "bonus"),
    9: .same(proto: "status"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PWinLottery) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if self.sendUuid != other.sendUuid {return false}
    if self.sendNickNm != other.sendNickNm {return false}
    if self.title != other.title {return false}
    if self.crtTm != other.crtTm {return false}
    if self.accTm != other.accTm {return false}
    if self.remark != other.remark {return false}
    if self.bonus != other.bonus {return false}
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGiftLotteryDetail: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lotteryId"),
    2: .same(proto: "title"),
    3: .same(proto: "overdueTm"),
    4: .same(proto: "winners"),
    5: .same(proto: "gender"),
    6: .same(proto: "regions"),
    7: .same(proto: "userList"),
    8: .same(proto: "remark"),
    9: .same(proto: "gifts"),
    10: .same(proto: "status"),
    11: .same(proto: "remainCnt"),
    12: .same(proto: "regionCnt"),
    13: .same(proto: "crtTm"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PGiftLotteryDetail) -> Bool {
    if self.lotteryID != other.lotteryID {return false}
    if self.title != other.title {return false}
    if self.overdueTm != other.overdueTm {return false}
    if self.winners != other.winners {return false}
    if self.gender != other.gender {return false}
    if self.regions != other.regions {return false}
    if self.userList != other.userList {return false}
    if self.remark != other.remark {return false}
    if self.gifts != other.gifts {return false}
    if self.status != other.status {return false}
    if self.remainCnt != other.remainCnt {return false}
    if self.regionCnt != other.regionCnt {return false}
    if self.crtTm != other.crtTm {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PGiftInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "giftId"),
    2: .same(proto: "giftNm"),
    3: .same(proto: "giftCnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PGiftInfo) -> Bool {
    if self.giftID != other.giftID {return false}
    if self.giftNm != other.giftNm {return false}
    if self.giftCnt != other.giftCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PUserBaseGiftEx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .same(proto: "gift"),
    4: .same(proto: "region"),
    5: .same(proto: "rcvNm"),
    6: .same(proto: "rcvAddr"),
    7: .same(proto: "rcvPhone"),
    8: .same(proto: "rcvEmail"),
    9: .same(proto: "rcvRemark"),
    10: .same(proto: "editCnt"),
    11: .same(proto: "status"),
    12: .same(proto: "brcvNm"),
    13: .same(proto: "brcvAddr"),
    14: .same(proto: "brcvPhone"),
    15: .same(proto: "brcvEmail"),
    16: .same(proto: "brcvRemark"),
    17: .same(proto: "acceptTm"),
  ]

  fileprivate class _StorageClass {
    var _info: Bbproto_PUserBase? = nil
    var _gift: Bbproto_PGiftInfo? = nil
    var _region: String = String()
    var _rcvNm: String = String()
    var _rcvAddr: String = String()
    var _rcvPhone: String = String()
    var _rcvEmail: String = String()
    var _rcvRemark: String = String()
    var _editCnt: Int32 = 0
    var _status: Int32 = 0
    var _brcvNm: String = String()
    var _brcvAddr: String = String()
    var _brcvPhone: String = String()
    var _brcvEmail: String = String()
    var _brcvRemark: String = String()
    var _acceptTm: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _info = source._info
      _gift = source._gift
      _region = source._region
      _rcvNm = source._rcvNm
      _rcvAddr = source._rcvAddr
      _rcvPhone = source._rcvPhone
      _rcvEmail = source._rcvEmail
      _rcvRemark = source._rcvRemark
      _editCnt = source._editCnt
      _status = source._status
      _brcvNm = source._brcvNm
      _brcvAddr = source._brcvAddr
      _brcvPhone = source._brcvPhone
      _brcvEmail = source._brcvEmail
      _brcvRemark = source._brcvRemark
      _acceptTm = source._acceptTm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PUserBaseGiftEx) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._info != other_storage._info {return false}
        if _storage._gift != other_storage._gift {return false}
        if _storage._region != other_storage._region {return false}
        if _storage._rcvNm != other_storage._rcvNm {return false}
        if _storage._rcvAddr != other_storage._rcvAddr {return false}
        if _storage._rcvPhone != other_storage._rcvPhone {return false}
        if _storage._rcvEmail != other_storage._rcvEmail {return false}
        if _storage._rcvRemark != other_storage._rcvRemark {return false}
        if _storage._editCnt != other_storage._editCnt {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._brcvNm != other_storage._brcvNm {return false}
        if _storage._brcvAddr != other_storage._brcvAddr {return false}
        if _storage._brcvPhone != other_storage._brcvPhone {return false}
        if _storage._brcvEmail != other_storage._brcvEmail {return false}
        if _storage._brcvRemark != other_storage._brcvRemark {return false}
        if _storage._acceptTm != other_storage._acceptTm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: platform.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

///列出所有服务的状态（开启的还是关闭的）
struct Bbproto_PServiceStatus: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PServiceStatus"

  var status: Dictionary<String,Bbproto_PService> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bbproto_PService>.self, value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bbproto_PService>.self, value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///每个服务的状态
struct Bbproto_PService: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PService"

  var status: Bool = false

  ///能否被操作
  var canDo: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.status)
      case 2: try decoder.decodeSingularBoolField(value: &self.canDo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 1)
    }
    if self.canDo != false {
      try visitor.visitSingularBoolField(value: self.canDo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///监管登录信息
struct Bbproto_PPlatformLogin: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPlatformLogin"

  var id: Int32 = 0

  var username: String = String()

  var password: String = String()

  var sessionID: String = String()

  ///登录者的IP地址
  var ipaddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.username)
      case 3: try decoder.decodeSingularStringField(value: &self.password)
      case 4: try decoder.decodeSingularStringField(value: &self.sessionID)
      case 5: try decoder.decodeSingularStringField(value: &self.ipaddr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 3)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 4)
    }
    if !self.ipaddr.isEmpty {
      try visitor.visitSingularStringField(value: self.ipaddr, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///监管的日志信息
struct Bbproto_PPlatformLog: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PPlatformLog"

  var id: Int32 = 0

  var userID: Int64 = 0

  var cTime: Int64 = 0

  var iPaddr: String = String()

  var url: String = String()

  var method: String = String()

  var errcode: Int32 = 0

  var params: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.userID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.cTime)
      case 4: try decoder.decodeSingularStringField(value: &self.iPaddr)
      case 5: try decoder.decodeSingularStringField(value: &self.url)
      case 6: try decoder.decodeSingularStringField(value: &self.method)
      case 7: try decoder.decodeSingularInt32Field(value: &self.errcode)
      case 8: try decoder.decodeSingularStringField(value: &self.params)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.cTime != 0 {
      try visitor.visitSingularInt64Field(value: self.cTime, fieldNumber: 3)
    }
    if !self.iPaddr.isEmpty {
      try visitor.visitSingularStringField(value: self.iPaddr, fieldNumber: 4)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 5)
    }
    if !self.method.isEmpty {
      try visitor.visitSingularStringField(value: self.method, fieldNumber: 6)
    }
    if self.errcode != 0 {
      try visitor.visitSingularInt32Field(value: self.errcode, fieldNumber: 7)
    }
    if !self.params.isEmpty {
      try visitor.visitSingularStringField(value: self.params, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///被举报人列表
struct Bbproto_PReportNewsList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportNewsList"

  var list: [Bbproto_PReportNews] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///被举报人的信息
struct Bbproto_PReportNews: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportNews"

  var id: Int64 = 0

  ///举报人
  var uuid: String = String()

  ///被举报的帖子
  var postid: Int64 = 0

  ///举报内容
  var content: String = String()

  ///是否已经处理（0待处理，1已处理）
  var isProcess: Int64 = 0

  ///举报时间
  var time: Int64 = 0

  ///问题类型
  var qType: String = String()

  var imgs: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.postid)
      case 4: try decoder.decodeSingularStringField(value: &self.content)
      case 5: try decoder.decodeSingularInt64Field(value: &self.isProcess)
      case 6: try decoder.decodeSingularInt64Field(value: &self.time)
      case 7: try decoder.decodeSingularStringField(value: &self.qType)
      case 8: try decoder.decodeRepeatedStringField(value: &self.imgs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if self.postid != 0 {
      try visitor.visitSingularInt64Field(value: self.postid, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if self.isProcess != 0 {
      try visitor.visitSingularInt64Field(value: self.isProcess, fieldNumber: 5)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 6)
    }
    if !self.qType.isEmpty {
      try visitor.visitSingularStringField(value: self.qType, fieldNumber: 7)
    }
    if !self.imgs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imgs, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///被举报人列表
struct Bbproto_PReportUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportUserList"

  var list: [Bbproto_PReportUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///被举报人的信息
struct Bbproto_PReportUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportUser"

  var id: Int64 = 0

  ///举报人
  var uuid: String = String()

  ///被举报人
  var targetID: String = String()

  ///举报内容
  var content: String = String()

  ///是否已经处理（0待处理，1已处理）
  var isProcess: Int64 = 0

  ///举报时间
  var time: Int64 = 0

  ///问题类型
  var qType: String = String()

  var imgs: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularStringField(value: &self.targetID)
      case 4: try decoder.decodeSingularStringField(value: &self.content)
      case 5: try decoder.decodeSingularInt64Field(value: &self.isProcess)
      case 6: try decoder.decodeSingularInt64Field(value: &self.time)
      case 7: try decoder.decodeSingularStringField(value: &self.qType)
      case 8: try decoder.decodeRepeatedStringField(value: &self.imgs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if self.isProcess != 0 {
      try visitor.visitSingularInt64Field(value: self.isProcess, fieldNumber: 5)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 6)
    }
    if !self.qType.isEmpty {
      try visitor.visitSingularStringField(value: self.qType, fieldNumber: 7)
    }
    if !self.imgs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imgs, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PReportCommunityUserList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityUserList"

  var list: [Bbproto_PReportCommunityUser] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///社区Id，用户Uuid,举报的原因
struct Bbproto_PReportCommunityUser: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityUser"

  var id: Int64 = 0

  ///举报人列表
  var informers: [Bbproto_PInformer] = []

  ///社区ID
  var communityID: String = String()

  ///被举报人
  var uuid: String = String()

  ///举报内容
  var content: String = String()

  ///是否已经处理（没有处理为0，否则为处理的时间）
  var isProcess: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.informers)
      case 3: try decoder.decodeSingularStringField(value: &self.communityID)
      case 4: try decoder.decodeSingularStringField(value: &self.uuid)
      case 5: try decoder.decodeSingularStringField(value: &self.content)
      case 6: try decoder.decodeSingularInt64Field(value: &self.isProcess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.informers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.informers, fieldNumber: 2)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 3)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 4)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 5)
    }
    if self.isProcess != 0 {
      try visitor.visitSingularInt64Field(value: self.isProcess, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PReportCommunityPostsList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityPostsList"

  var list: [Bbproto_PReportCommunityPosts] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///社区Id,帖子Id,帖子创建者Uuid,举报的原因
struct Bbproto_PReportCommunityPosts: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityPosts"

  var id: Int64 = 0

  ///举报人列表
  var informers: [Bbproto_PInformer] = []

  ///社区ID
  var communityID: String = String()

  ///帖子ID
  var postsID: String = String()

  ///帖子作者
  var uuid: String = String()

  ///举报内容
  var content: String = String()

  ///是否已经处理（没有处理为0，否则为处理的时间）
  var isProcess: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.informers)
      case 3: try decoder.decodeSingularStringField(value: &self.communityID)
      case 4: try decoder.decodeSingularStringField(value: &self.postsID)
      case 5: try decoder.decodeSingularStringField(value: &self.uuid)
      case 6: try decoder.decodeSingularStringField(value: &self.content)
      case 7: try decoder.decodeSingularInt64Field(value: &self.isProcess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.informers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.informers, fieldNumber: 2)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 3)
    }
    if !self.postsID.isEmpty {
      try visitor.visitSingularStringField(value: self.postsID, fieldNumber: 4)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 5)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 6)
    }
    if self.isProcess != 0 {
      try visitor.visitSingularInt64Field(value: self.isProcess, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PReportCommunityCommentList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityCommentList"

  var list: [Bbproto_PReportCommunityComment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///社区Id,帖子Id,评论Id，评论发表者Uuid,举报的原因
struct Bbproto_PReportCommunityComment: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportCommunityComment"

  var id: Int64 = 0

  ///举报人列表
  var informers: [Bbproto_PInformer] = []

  ///社区ID
  var communityID: String = String()

  ///帖子ID
  var postsID: String = String()

  ///评论ID
  var commentID: String = String()

  ///评论发布者
  var uuid: String = String()

  ///举报内容
  var content: String = String()

  ///是否已经处理（没有处理为0，否则为处理的时间）
  var isProcess: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.informers)
      case 3: try decoder.decodeSingularStringField(value: &self.communityID)
      case 4: try decoder.decodeSingularStringField(value: &self.postsID)
      case 5: try decoder.decodeSingularStringField(value: &self.commentID)
      case 6: try decoder.decodeSingularStringField(value: &self.uuid)
      case 7: try decoder.decodeSingularStringField(value: &self.content)
      case 8: try decoder.decodeSingularInt64Field(value: &self.isProcess)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.informers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.informers, fieldNumber: 2)
    }
    if !self.communityID.isEmpty {
      try visitor.visitSingularStringField(value: self.communityID, fieldNumber: 3)
    }
    if !self.postsID.isEmpty {
      try visitor.visitSingularStringField(value: self.postsID, fieldNumber: 4)
    }
    if !self.commentID.isEmpty {
      try visitor.visitSingularStringField(value: self.commentID, fieldNumber: 5)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    if self.isProcess != 0 {
      try visitor.visitSingularInt64Field(value: self.isProcess, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///举报人
struct Bbproto_PInformer: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInformer"

  ///举报人
  var uuid: String = String()

  ///举报时间
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///敏感词列表
struct Bbproto_PKeywords: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PKeywords"

  ///敏感词列表
  var list: [Bbproto_PKeyword] = []

  ///数据总量
  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///敏感词
struct Bbproto_PKeyword: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PKeyword"

  var id: Int64 = 0

  var work: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.work)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.work.isEmpty {
      try visitor.visitSingularStringField(value: self.work, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///黑名单列表
struct Bbproto_PBlacklists: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBlacklists"

  var list: [Bbproto_Pblacklist] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///黑名单
struct Bbproto_Pblacklist: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Pblacklist"

  var id: Int32 = 0

  var val: String = String()

  ///如果是手机，那么这个就是手机的区号
  var other: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.val)
      case 3: try decoder.decodeSingularStringField(value: &self.other)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.val.isEmpty {
      try visitor.visitSingularStringField(value: self.val, fieldNumber: 2)
    }
    if !self.other.isEmpty {
      try visitor.visitSingularStringField(value: self.other, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的游戏
struct Bbproto_PRecommendGame: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendGame"

  var id: Int32 = 0

  var name: String = String()

  var head: String = String()

  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.head)
      case 4: try decoder.decodeSingularStringField(value: &self.desc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.head.isEmpty {
      try visitor.visitSingularStringField(value: self.head, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的游戏的列表
struct Bbproto_PRecommendGameList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendGameList"

  var list: [Bbproto_PRecommendGame] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的俱乐部
struct Bbproto_PRecommendClub: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendClub"

  var id: Int32 = 0

  var name: String = String()

  var head: String = String()

  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.head)
      case 4: try decoder.decodeSingularStringField(value: &self.desc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.head.isEmpty {
      try visitor.visitSingularStringField(value: self.head, fieldNumber: 3)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的俱乐部的列表
struct Bbproto_PRecommendClubList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendClubList"

  var list: [Bbproto_PRecommendClub] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的名人
struct Bbproto_PRecommendStar: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendStar"

  var id: Int32 = 0

  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///推荐关注的名人的列表
struct Bbproto_PRecommendStarList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendStarList"

  var list: [Bbproto_PRecommendStar] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///意见反馈列表
struct Bbproto_PFeedbackList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFeedbackList"

  var list: [Bbproto_PFeedback] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///意见反馈
struct Bbproto_PFeedback: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFeedback"

  var id: Int32 = 0

  ///反馈人的UUID
  var uuid: String = String()

  ///反馈时间
  var time: Int64 = 0

  ///问题描述（可以为空）
  var content: String = String()

  ///问题的图片url（可以为空）
  var images: [String] = []

  ///问题的类型编号（PFeedbackQuestion的id属性）
  var qType: Int32 = 0

  ///心情的编号（0其他，1开心，2一般，3难过）
  var mood: Int32 = 0

  ///处理状态
  var status: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.time)
      case 4: try decoder.decodeSingularStringField(value: &self.content)
      case 5: try decoder.decodeRepeatedStringField(value: &self.images)
      case 6: try decoder.decodeSingularInt32Field(value: &self.qType)
      case 7: try decoder.decodeSingularInt32Field(value: &self.mood)
      case 8: try decoder.decodeSingularInt32Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedStringField(value: self.images, fieldNumber: 5)
    }
    if self.qType != 0 {
      try visitor.visitSingularInt32Field(value: self.qType, fieldNumber: 6)
    }
    if self.mood != 0 {
      try visitor.visitSingularInt32Field(value: self.mood, fieldNumber: 7)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///意见反馈的问题类型
struct Bbproto_PFeedbackQuestion: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFeedbackQuestion"

  var id: Int32 = 0

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PFeedbackQuestionList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFeedbackQuestionList"

  ///心情的编号（0其他，1开心，2一般，3难过）
  var moodID: Int32 = 0

  var questions: [Bbproto_PFeedbackQuestion] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.moodID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.questions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.moodID != 0 {
      try visitor.visitSingularInt32Field(value: self.moodID, fieldNumber: 1)
    }
    if !self.questions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.questions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///banner图片列表
struct Bbproto_PBannerList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBannerList"

  var list: [Bbproto_PBanner] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///banner图片
struct Bbproto_PBanner: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBanner"

  var id: Int32 = 0

  ///图片地址（客户端使用）
  var src: String = String()

  ///点击链接地址（客户端使用）内部链接：app://xxx/:id		外部链接：http://xxx
  var url: String = String()

  ///文字（客户端使用）
  var text: String = String()

  ///int32 width = 5; //图片的宽
  var expires: Int64 = 0

  /////广告图的状态（0.禁用，1.启用）
  var state: Int32 = 0

  ///创建时间
  var cTime: Int64 = 0

  ///string inside = 9; //如果是内部链接，这个值有效，news表示微博，其他待定
  ///PPostInfo postInfo = 10; //微博的详情
  var stay: Int32 = 0

  ///广告图的类型（1.发现版块，2.精选版块，3.启动图）
  var aType: Int32 = 0

  ///是否上架（0.未上架，1.已上架）
  var putaway: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.src)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeSingularStringField(value: &self.text)
      case 6: try decoder.decodeSingularInt64Field(value: &self.expires)
      case 7: try decoder.decodeSingularInt32Field(value: &self.state)
      case 8: try decoder.decodeSingularInt64Field(value: &self.cTime)
      case 11: try decoder.decodeSingularInt32Field(value: &self.stay)
      case 12: try decoder.decodeSingularInt32Field(value: &self.aType)
      case 13: try decoder.decodeSingularInt32Field(value: &self.putaway)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if self.expires != 0 {
      try visitor.visitSingularInt64Field(value: self.expires, fieldNumber: 6)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 7)
    }
    if self.cTime != 0 {
      try visitor.visitSingularInt64Field(value: self.cTime, fieldNumber: 8)
    }
    if self.stay != 0 {
      try visitor.visitSingularInt32Field(value: self.stay, fieldNumber: 11)
    }
    if self.aType != 0 {
      try visitor.visitSingularInt32Field(value: self.aType, fieldNumber: 12)
    }
    if self.putaway != 0 {
      try visitor.visitSingularInt32Field(value: self.putaway, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///默认头像列表
struct Bbproto_PDefaultHeadList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDefaultHeadList"

  ///数量总数
  var total: Int32 = 0

  ///objectkey数组
  var list: [Bbproto_PDefaultHead] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///默认头像
struct Bbproto_PDefaultHead: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PDefaultHead"

  var id: Int32 = 0

  ///完整的url
  var url: String = String()

  ///objectkey
  var oKey: String = String()

  ///图片的类型 0 女，1 男，2 其它
  var hType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeSingularStringField(value: &self.oKey)
      case 4: try decoder.decodeSingularInt32Field(value: &self.hType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.oKey.isEmpty {
      try visitor.visitSingularStringField(value: self.oKey, fieldNumber: 3)
    }
    if self.hType != 0 {
      try visitor.visitSingularInt32Field(value: self.hType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///app启动广告图
struct Bbproto_PLaunchAD: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLaunchAD"

  var id: Int32 = 0

  ///跳转的链接 
  var link: String = String()

  ///停留时间（单位：秒）
  var time: Int32 = 0

  ///重新进入App多少次后再显示广告图
  var number: Int32 = 0

  ///objectkey或图片路径
  var src: String = String()

  ///当前状态 0关闭，1开启
  var status: Int32 = 0

  ///语言版本 1 简体中文，2 繁体中文，3 英文，4 韩文
  var language: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.link)
      case 3: try decoder.decodeSingularInt32Field(value: &self.time)
      case 4: try decoder.decodeSingularInt32Field(value: &self.number)
      case 5: try decoder.decodeSingularStringField(value: &self.src)
      case 6: try decoder.decodeSingularInt32Field(value: &self.status)
      case 7: try decoder.decodeSingularInt32Field(value: &self.language)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.link.isEmpty {
      try visitor.visitSingularStringField(value: self.link, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt32Field(value: self.time, fieldNumber: 3)
    }
    if self.number != 0 {
      try visitor.visitSingularInt32Field(value: self.number, fieldNumber: 4)
    }
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 5)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 6)
    }
    if self.language != 0 {
      try visitor.visitSingularInt32Field(value: self.language, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PLaunchADList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PLaunchADList"

  var list: [Bbproto_PLaunchAD] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PVIPPTagList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTagList"

  var list: [Bbproto_PVIPPTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PVIPPTag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTag"

  var id: Int32 = 0

  var name: String = String()

  var items: [Bbproto_PVIPPTagItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///标签类型列表
struct Bbproto_PVIPPTagTypeList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTagTypeList"

  var list: [Bbproto_PVIPPTagType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///标签类型
struct Bbproto_PVIPPTagType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTagType"

  var id: Int32 = 0

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///标签项目列表
struct Bbproto_PVIPPTagItemList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTagItemList"

  var list: [Bbproto_PVIPPTagItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///标签项目
struct Bbproto_PVIPPTagItem: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PVIPPTagItem"

  var id: Int32 = 0

  var tid: Int32 = 0

  var img: String = String()

  var name: String = String()

  var src: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.tid)
      case 3: try decoder.decodeSingularStringField(value: &self.img)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      case 5: try decoder.decodeSingularStringField(value: &self.src)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.tid != 0 {
      try visitor.visitSingularInt32Field(value: self.tid, fieldNumber: 2)
    }
    if !self.img.isEmpty {
      try visitor.visitSingularStringField(value: self.img, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帮助信息的菜单列表
struct Bbproto_PHelpMenuList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHelpMenuList"

  var list: [Bbproto_PHelpMenu] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帮助信息的菜单
struct Bbproto_PHelpMenu: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHelpMenu"

  var id: Int32 = 0

  var pid: Int32 = 0

  var name: String = String()

  var isLeaf: Bool = false

  var children: [Bbproto_PHelpMenu] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.pid)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularBoolField(value: &self.isLeaf)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.pid != 0 {
      try visitor.visitSingularInt32Field(value: self.pid, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.isLeaf != false {
      try visitor.visitSingularBoolField(value: self.isLeaf, fieldNumber: 4)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帮助信息的内容列表
struct Bbproto_PHelpContentList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHelpContentList"

  var list: [Bbproto_PHelpContent] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帮助信息的内容
struct Bbproto_PHelpContent: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHelpContent"

  var id: Int32 = 0

  var title: String = String()

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.content)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帐户安全操作记录
struct Bbproto_PAccountOperateLog: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountOperateLog"

  var id: Int32 = 0

  ///创建时间
  var cTime: Int64 = 0

  ///操作对象名称（手机、密码、微博。。。）
  var name: Int32 = 0

  ///操作内容
  var content: String = String()

  ///操作名称（修改、绑定、解绑。。。）
  var operate: Int32 = 0

  var uuid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.cTime)
      case 3: try decoder.decodeSingularInt32Field(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.content)
      case 5: try decoder.decodeSingularInt32Field(value: &self.operate)
      case 6: try decoder.decodeSingularStringField(value: &self.uuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.cTime != 0 {
      try visitor.visitSingularInt64Field(value: self.cTime, fieldNumber: 2)
    }
    if self.name != 0 {
      try visitor.visitSingularInt32Field(value: self.name, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if self.operate != 0 {
      try visitor.visitSingularInt32Field(value: self.operate, fieldNumber: 5)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///帐户安全操作记录列表
struct Bbproto_PAccountOperateLogList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PAccountOperateLogList"

  var list: [Bbproto_PAccountOperateLog] = []

  var total: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt32Field(value: &self.total)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///举报
struct Bbproto_PReportInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PReportInfo"

  var id: Int32 = 0

  ///举报时间
  var cTime: Int64 = 0

  ///举报对象ID(资讯ID,动态ID,原创录播ID等)
  var tID: String = String()

  ///社区ID
  var cID: String = String()

  ///举报类型(1.资讯帖，2.动态帖，3.原创录播）
  var rType: String = String()

  ///举报内容
  var content: String = String()

  ///举报人UUID（app端不需要填）
  var rID: String = String()

  ///状态（app端不需要填）
  var state: Int32 = 0

  ///处理结果（app端不需要填）
  var dispose: Int32 = 0

  ///社区名称
  var cName: String = String()

  ///帖子内容
  var postContent: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.cTime)
      case 3: try decoder.decodeSingularStringField(value: &self.tID)
      case 4: try decoder.decodeSingularStringField(value: &self.cID)
      case 5: try decoder.decodeSingularStringField(value: &self.rType)
      case 6: try decoder.decodeSingularStringField(value: &self.content)
      case 7: try decoder.decodeSingularStringField(value: &self.rID)
      case 8: try decoder.decodeSingularInt32Field(value: &self.state)
      case 9: try decoder.decodeSingularInt32Field(value: &self.dispose)
      case 10: try decoder.decodeSingularStringField(value: &self.cName)
      case 11: try decoder.decodeSingularStringField(value: &self.postContent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.cTime != 0 {
      try visitor.visitSingularInt64Field(value: self.cTime, fieldNumber: 2)
    }
    if !self.tID.isEmpty {
      try visitor.visitSingularStringField(value: self.tID, fieldNumber: 3)
    }
    if !self.cID.isEmpty {
      try visitor.visitSingularStringField(value: self.cID, fieldNumber: 4)
    }
    if !self.rType.isEmpty {
      try visitor.visitSingularStringField(value: self.rType, fieldNumber: 5)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 6)
    }
    if !self.rID.isEmpty {
      try visitor.visitSingularStringField(value: self.rID, fieldNumber: 7)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 8)
    }
    if self.dispose != 0 {
      try visitor.visitSingularInt32Field(value: self.dispose, fieldNumber: 9)
    }
    if !self.cName.isEmpty {
      try visitor.visitSingularStringField(value: self.cName, fieldNumber: 10)
    }
    if !self.postContent.isEmpty {
      try visitor.visitSingularStringField(value: self.postContent, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PArrarInt64AndBool: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PArrarInt64AndBool"

  var list: [Int64] = []

  var status: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.list)
      case 2: try decoder.decodeSingularBoolField(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedInt64Field(value: self.list, fieldNumber: 1)
    }
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PRecommendUsers: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PRecommendUsers"

  ///推荐用户的列表
  var users: [Bbproto_PUserBase] = []

  ///粉丝数的列表（索引跟users的索引一一对应）
  var fansCounts: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.users)
      case 2: try decoder.decodeRepeatedInt32Field(value: &self.fansCounts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 1)
    }
    if !self.fansCounts.isEmpty {
      try visitor.visitPackedInt32Field(value: self.fansCounts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PServiceStatus: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PServiceStatus) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PService: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "canDo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PService) -> Bool {
    if self.status != other.status {return false}
    if self.canDo != other.canDo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPlatformLogin: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "username"),
    3: .same(proto: "password"),
    4: .same(proto: "sessionID"),
    5: .same(proto: "IPAddr"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPlatformLogin) -> Bool {
    if self.id != other.id {return false}
    if self.username != other.username {return false}
    if self.password != other.password {return false}
    if self.sessionID != other.sessionID {return false}
    if self.ipaddr != other.ipaddr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PPlatformLog: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "userID"),
    3: .same(proto: "cTime"),
    4: .same(proto: "iPAddr"),
    5: .same(proto: "URL"),
    6: .same(proto: "method"),
    7: .same(proto: "errcode"),
    8: .same(proto: "params"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PPlatformLog) -> Bool {
    if self.id != other.id {return false}
    if self.userID != other.userID {return false}
    if self.cTime != other.cTime {return false}
    if self.iPaddr != other.iPaddr {return false}
    if self.url != other.url {return false}
    if self.method != other.method {return false}
    if self.errcode != other.errcode {return false}
    if self.params != other.params {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportNewsList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportNewsList) -> Bool {
    if self.list != other.list {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportNews: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "UUID"),
    3: .same(proto: "postid"),
    4: .same(proto: "content"),
    5: .same(proto: "isProcess"),
    6: .same(proto: "time"),
    7: .same(proto: "qType"),
    8: .same(proto: "imgs"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportNews) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if self.postid != other.postid {return false}
    if self.content != other.content {return false}
    if self.isProcess != other.isProcess {return false}
    if self.time != other.time {return false}
    if self.qType != other.qType {return false}
    if self.imgs != other.imgs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportUserList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "UUID"),
    3: .same(proto: "targetID"),
    4: .same(proto: "content"),
    5: .same(proto: "isProcess"),
    6: .same(proto: "time"),
    7: .same(proto: "qType"),
    8: .same(proto: "imgs"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportUser) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if self.targetID != other.targetID {return false}
    if self.content != other.content {return false}
    if self.isProcess != other.isProcess {return false}
    if self.time != other.time {return false}
    if self.qType != other.qType {return false}
    if self.imgs != other.imgs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityUserList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityUserList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "informers"),
    3: .same(proto: "communityID"),
    4: .same(proto: "uuid"),
    5: .same(proto: "content"),
    6: .same(proto: "isProcess"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityUser) -> Bool {
    if self.id != other.id {return false}
    if self.informers != other.informers {return false}
    if self.communityID != other.communityID {return false}
    if self.uuid != other.uuid {return false}
    if self.content != other.content {return false}
    if self.isProcess != other.isProcess {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityPostsList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityPostsList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityPosts: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "informers"),
    3: .same(proto: "communityID"),
    4: .same(proto: "postsID"),
    5: .same(proto: "uuid"),
    6: .same(proto: "content"),
    7: .same(proto: "isProcess"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityPosts) -> Bool {
    if self.id != other.id {return false}
    if self.informers != other.informers {return false}
    if self.communityID != other.communityID {return false}
    if self.postsID != other.postsID {return false}
    if self.uuid != other.uuid {return false}
    if self.content != other.content {return false}
    if self.isProcess != other.isProcess {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityCommentList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityCommentList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportCommunityComment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "informers"),
    3: .same(proto: "communityID"),
    4: .same(proto: "postsID"),
    5: .same(proto: "commentID"),
    6: .same(proto: "uuid"),
    7: .same(proto: "content"),
    8: .same(proto: "isProcess"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportCommunityComment) -> Bool {
    if self.id != other.id {return false}
    if self.informers != other.informers {return false}
    if self.communityID != other.communityID {return false}
    if self.postsID != other.postsID {return false}
    if self.commentID != other.commentID {return false}
    if self.uuid != other.uuid {return false}
    if self.content != other.content {return false}
    if self.isProcess != other.isProcess {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInformer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInformer) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PKeywords: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PKeywords) -> Bool {
    if self.list != other.list {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PKeyword: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "work"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PKeyword) -> Bool {
    if self.id != other.id {return false}
    if self.work != other.work {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBlacklists: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBlacklists) -> Bool {
    if self.list != other.list {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_Pblacklist: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "val"),
    3: .same(proto: "other"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_Pblacklist) -> Bool {
    if self.id != other.id {return false}
    if self.val != other.val {return false}
    if self.other != other.other {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendGame: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "head"),
    4: .same(proto: "desc"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendGame) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.head != other.head {return false}
    if self.desc != other.desc {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendGameList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendGameList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendClub: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "head"),
    4: .same(proto: "desc"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendClub) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.head != other.head {return false}
    if self.desc != other.desc {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendClubList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendClubList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendStar: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendStar) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendStarList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendStarList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFeedbackList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFeedbackList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFeedback: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "time"),
    4: .same(proto: "content"),
    5: .same(proto: "images"),
    6: .same(proto: "qType"),
    7: .same(proto: "mood"),
    8: .same(proto: "status"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFeedback) -> Bool {
    if self.id != other.id {return false}
    if self.uuid != other.uuid {return false}
    if self.time != other.time {return false}
    if self.content != other.content {return false}
    if self.images != other.images {return false}
    if self.qType != other.qType {return false}
    if self.mood != other.mood {return false}
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFeedbackQuestion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "content"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFeedbackQuestion) -> Bool {
    if self.id != other.id {return false}
    if self.content != other.content {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFeedbackQuestionList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moodID"),
    2: .same(proto: "questions"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFeedbackQuestionList) -> Bool {
    if self.moodID != other.moodID {return false}
    if self.questions != other.questions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBannerList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBannerList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBanner: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "src"),
    3: .same(proto: "url"),
    4: .same(proto: "text"),
    6: .same(proto: "expires"),
    7: .same(proto: "state"),
    8: .same(proto: "cTime"),
    11: .same(proto: "stay"),
    12: .same(proto: "aType"),
    13: .same(proto: "putaway"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBanner) -> Bool {
    if self.id != other.id {return false}
    if self.src != other.src {return false}
    if self.url != other.url {return false}
    if self.text != other.text {return false}
    if self.expires != other.expires {return false}
    if self.state != other.state {return false}
    if self.cTime != other.cTime {return false}
    if self.stay != other.stay {return false}
    if self.aType != other.aType {return false}
    if self.putaway != other.putaway {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDefaultHeadList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PDefaultHeadList) -> Bool {
    if self.total != other.total {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PDefaultHead: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .same(proto: "oKey"),
    4: .same(proto: "hType"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PDefaultHead) -> Bool {
    if self.id != other.id {return false}
    if self.url != other.url {return false}
    if self.oKey != other.oKey {return false}
    if self.hType != other.hType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLaunchAD: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "link"),
    3: .same(proto: "time"),
    4: .same(proto: "number"),
    5: .same(proto: "src"),
    6: .same(proto: "status"),
    7: .same(proto: "language"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLaunchAD) -> Bool {
    if self.id != other.id {return false}
    if self.link != other.link {return false}
    if self.time != other.time {return false}
    if self.number != other.number {return false}
    if self.src != other.src {return false}
    if self.status != other.status {return false}
    if self.language != other.language {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PLaunchADList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PLaunchADList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTagList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTagList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "items"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTag) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.items != other.items {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTagTypeList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTagTypeList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTagType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTagType) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTagItemList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTagItemList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PVIPPTagItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "tid"),
    3: .same(proto: "img"),
    4: .same(proto: "name"),
    5: .same(proto: "src"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PVIPPTagItem) -> Bool {
    if self.id != other.id {return false}
    if self.tid != other.tid {return false}
    if self.img != other.img {return false}
    if self.name != other.name {return false}
    if self.src != other.src {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHelpMenuList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHelpMenuList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHelpMenu: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "PID"),
    3: .same(proto: "Name"),
    4: .same(proto: "IsLeaf"),
    5: .same(proto: "Children"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHelpMenu) -> Bool {
    if self.id != other.id {return false}
    if self.pid != other.pid {return false}
    if self.name != other.name {return false}
    if self.isLeaf != other.isLeaf {return false}
    if self.children != other.children {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHelpContentList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHelpContentList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHelpContent: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "Title"),
    3: .same(proto: "Content"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHelpContent) -> Bool {
    if self.id != other.id {return false}
    if self.title != other.title {return false}
    if self.content != other.content {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountOperateLog: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "cTime"),
    3: .same(proto: "name"),
    4: .same(proto: "content"),
    5: .same(proto: "operate"),
    6: .same(proto: "uuid"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountOperateLog) -> Bool {
    if self.id != other.id {return false}
    if self.cTime != other.cTime {return false}
    if self.name != other.name {return false}
    if self.content != other.content {return false}
    if self.operate != other.operate {return false}
    if self.uuid != other.uuid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PAccountOperateLogList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PAccountOperateLogList) -> Bool {
    if self.list != other.list {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PReportInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "cTime"),
    3: .same(proto: "tID"),
    4: .same(proto: "cID"),
    5: .same(proto: "rType"),
    6: .same(proto: "content"),
    7: .same(proto: "rID"),
    8: .same(proto: "state"),
    9: .same(proto: "dispose"),
    10: .same(proto: "cName"),
    11: .same(proto: "postContent"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PReportInfo) -> Bool {
    if self.id != other.id {return false}
    if self.cTime != other.cTime {return false}
    if self.tID != other.tID {return false}
    if self.cID != other.cID {return false}
    if self.rType != other.rType {return false}
    if self.content != other.content {return false}
    if self.rID != other.rID {return false}
    if self.state != other.state {return false}
    if self.dispose != other.dispose {return false}
    if self.cName != other.cName {return false}
    if self.postContent != other.postContent {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PArrarInt64AndBool: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "status"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PArrarInt64AndBool) -> Bool {
    if self.list != other.list {return false}
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PRecommendUsers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
    2: .same(proto: "fansCounts"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PRecommendUsers) -> Bool {
    if self.users != other.users {return false}
    if self.fansCounts != other.fansCounts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

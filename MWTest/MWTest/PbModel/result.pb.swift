/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: result.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 资源类型
enum Bbproto_EResourceType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  ///文本
  case txt // = 0

  ///图片
  case img // = 1

  ///语音
  case aud // = 2

  ///本地视频
  case videoLocal // = 3

  ///第三方视频
  case videoOther // = 4

  ///长视频
  case videoHuge // = 5

  ///标题
  case title // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .txt
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .txt
    case 1: self = .img
    case 2: self = .aud
    case 3: self = .videoLocal
    case 4: self = .videoOther
    case 5: self = .videoHuge
    case 6: self = .title
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .txt: return 0
    case .img: return 1
    case .aud: return 2
    case .videoLocal: return 3
    case .videoOther: return 4
    case .videoHuge: return 5
    case .title: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 通用操作结果返回
struct Bbproto_PResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PResult"

  ///错误码：0为正确，其他均为出错
  var errorCode: Int32 = 0

  ///错误描述信息
  var errorMsg: String = String()

  ///额外信息
  var extraInfo: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.errorCode)
      case 2: try decoder.decodeSingularStringField(value: &self.errorMsg)
      case 3: try decoder.decodeSingularStringField(value: &self.extraInfo)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != 0 {
      try visitor.visitSingularInt32Field(value: self.errorCode, fieldNumber: 1)
    }
    if !self.errorMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMsg, fieldNumber: 2)
    }
    if !self.extraInfo.isEmpty {
      try visitor.visitSingularStringField(value: self.extraInfo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PJResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PJResult"

  /// 错误码
  var code: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 通信消息结构
struct Bbproto_PMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PMessage"

  ///固定为9833
  var magic: Int32 = 0

  ///data消息结构名称，如"PResult"
  var type: String = String()

  ///具体的message数据，请根据type解析
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.magic)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.magic != 0 {
      try visitor.visitSingularInt32Field(value: self.magic, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输uuid
struct Bbproto_PManyUUID: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PManyUUID"

  ///一串uuid
  var manyUuid: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.manyUuid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.manyUuid.isEmpty {
      try visitor.visitRepeatedStringField(value: self.manyUuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输errorCode
struct Bbproto_PManyErrorCode: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PManyErrorCode"

  ///一串ErrorCode
  var manyErrorCode: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.manyErrorCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.manyErrorCode.isEmpty {
      try visitor.visitPackedInt32Field(value: self.manyErrorCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输string
struct Bbproto_PStringList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStringList"

  var list: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedStringField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输int64
struct Bbproto_PInt64List: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInt64List"

  var list: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedInt64Field(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输int32
struct Bbproto_PInt32List: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInt32List"

  var list: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedInt32Field(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输bool
struct Bbproto_PBoolList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBoolList"

  var list: [Bool] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBoolField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedBoolField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 批量传输float64
struct Bbproto_PFloat64List: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFloat64List"

  var list: [Double] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedDoubleField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitPackedDoubleField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 单独传输string
struct Bbproto_PStringSingle: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStringSingle"

  var val: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.val.isEmpty {
      try visitor.visitSingularStringField(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 单独传输int64
struct Bbproto_PInt64Single: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInt64Single"

  var val: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.val != 0 {
      try visitor.visitSingularInt64Field(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 单独传输int32
struct Bbproto_PInt32Single: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PInt32Single"

  var val: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.val != 0 {
      try visitor.visitSingularInt32Field(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 单独传输bool
struct Bbproto_PBoolSingle: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBoolSingle"

  var val: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.val != false {
      try visitor.visitSingularBoolField(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 单独传输float64
struct Bbproto_PFloat64Single: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PFloat64Single"

  var val: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.val)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.val != 0 {
      try visitor.visitSingularDoubleField(value: self.val, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 带类型的二进制数据包，通过解析MsgType后再把MsgData反序列化为proto
struct Bbproto_PBinaryMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBinaryMsg"

  var msgType: Int32 = 0

  var msgData: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.msgType)
      case 2: try decoder.decodeSingularBytesField(value: &self.msgData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.msgType != 0 {
      try visitor.visitSingularInt32Field(value: self.msgType, fieldNumber: 1)
    }
    if !self.msgData.isEmpty {
      try visitor.visitSingularBytesField(value: self.msgData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note PBinaryMsg的列表
struct Bbproto_PBinaryMsgList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBinaryMsgList"

  var list: [Bbproto_PBinaryMsg] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 服务健康检查项
struct Bbproto_PHealthItem: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PHealthItem"

  ///检查项名称
  var name: String = String()

  ///状态
  var status: Int32 = 0

  var detail: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularInt32Field(value: &self.status)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.detail)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if !self.detail.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.detail, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 服务健康信息
struct Bbproto_PServiceHealth: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PServiceHealth"

  ///服务状态
  var status: Int32 = 0

  ///服务名                       
  var serviceName: String = String()

  ///健康信息
  var healInfoList: [Bbproto_PHealthItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.healInfoList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 2)
    }
    if !self.healInfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.healInfoList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 服务健康信息
struct Bbproto_PServiceHealthList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PServiceHealthList"

  ///健康信息列表
  var list: [Bbproto_PServiceHealth] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 服务健康状态
struct Bbproto_PServicesStatus: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PServicesStatus"

  ///服务状态
  var status: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///
///@note 服务心跳信息
struct Bbproto_PServiceHeartbeatInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PServiceHeartbeatInfo"

  ///token有效期
  var tokenExpiration: Int64 = 0

  ///服务总体状态。0：所有服务正常; 1：存在服务异常
  var status: Int32 = 0

  ///异常的服务id列表
  var abnormalIDList: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.tokenExpiration)
      case 2: try decoder.decodeSingularInt32Field(value: &self.status)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.abnormalIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tokenExpiration != 0 {
      try visitor.visitSingularInt64Field(value: self.tokenExpiration, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if !self.abnormalIDList.isEmpty {
      try visitor.visitPackedInt32Field(value: self.abnormalIDList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 帖子资源信息
struct Bbproto_PResource: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PResource"

  ///资源类型
  var type: Bbproto_EResourceType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  ///文本内容,资源类型为Txt时有内容
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///媒体(语音、图片、视频)的objectkey,第三方视频则填链接地址
  var mediaObjectkey: String {
    get {return _storage._mediaObjectkey}
    set {_uniqueStorage()._mediaObjectkey = newValue}
  }

  ///媒体完整url,客户端不填	
  var mediaURL: String {
    get {return _storage._mediaURL}
    set {_uniqueStorage()._mediaURL = newValue}
  }

  ///媒体长度, 单位是s
  var mediaSize: Int64 {
    get {return _storage._mediaSize}
    set {_uniqueStorage()._mediaSize = newValue}
  }

  ///资源过期时间,目前只有语音有过期时间
  var mediaExpires: Int64 {
    get {return _storage._mediaExpires}
    set {_uniqueStorage()._mediaExpires = newValue}
  }

  ///资源描述,目前只有图片有描述
  var des: String {
    get {return _storage._des}
    set {_uniqueStorage()._des = newValue}
  }

  ///缩略图的objectKey,视频帖有缩略图时,客户端要填
  var thumbObjectkey: String {
    get {return _storage._thumbObjectkey}
    set {_uniqueStorage()._thumbObjectkey = newValue}
  }

  ///缩略图完整url,客户端不填
  var thumbURL: String {
    get {return _storage._thumbURL}
    set {_uniqueStorage()._thumbURL = newValue}
  }

  ///资源标签, 目前只有图片有标签
  var tags: Bbproto_PImageTagList {
    get {return _storage._tags ?? Bbproto_PImageTagList()}
    set {_uniqueStorage()._tags = newValue}
  }
  /// Returns true if `tags` has been explicitly set.
  var hasTags: Bool {return _storage._tags != nil}
  /// Clears the value of `tags`. Subsequent reads from it will return its default value.
  mutating func clearTags() {_storage._tags = nil}

  ///图片属性. 宽、高
  var imageAttr: Bbproto_PImageAttr {
    get {return _storage._imageAttr ?? Bbproto_PImageAttr()}
    set {_uniqueStorage()._imageAttr = newValue}
  }
  /// Returns true if `imageAttr` has been explicitly set.
  var hasImageAttr: Bool {return _storage._imageAttr != nil}
  /// Clears the value of `imageAttr`. Subsequent reads from it will return its default value.
  mutating func clearImageAttr() {_storage._imageAttr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
        case 3: try decoder.decodeSingularStringField(value: &_storage._mediaObjectkey)
        case 4: try decoder.decodeSingularStringField(value: &_storage._mediaURL)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._mediaSize)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._mediaExpires)
        case 7: try decoder.decodeSingularStringField(value: &_storage._des)
        case 8: try decoder.decodeSingularStringField(value: &_storage._thumbObjectkey)
        case 9: try decoder.decodeSingularStringField(value: &_storage._thumbURL)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._tags)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._imageAttr)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != Bbproto_EResourceType.txt {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 2)
      }
      if !_storage._mediaObjectkey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaObjectkey, fieldNumber: 3)
      }
      if !_storage._mediaURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaURL, fieldNumber: 4)
      }
      if _storage._mediaSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mediaSize, fieldNumber: 5)
      }
      if _storage._mediaExpires != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mediaExpires, fieldNumber: 6)
      }
      if !_storage._des.isEmpty {
        try visitor.visitSingularStringField(value: _storage._des, fieldNumber: 7)
      }
      if !_storage._thumbObjectkey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thumbObjectkey, fieldNumber: 8)
      }
      if !_storage._thumbURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thumbURL, fieldNumber: 9)
      }
      if let v = _storage._tags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._imageAttr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 内容信息列表
struct Bbproto_PResourceList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PResourceList"

  var list: [Bbproto_PResource] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 图片的标签信息列表
struct Bbproto_PImageTagList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PImageTagList"

  var list: [Bbproto_PImageTag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 图片的标签信息
struct Bbproto_PImageTag: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PImageTag"

  /// 1是标签物品，2是标签人
  var type: Int32 = 0

  /// 标签子类型 
  var subType: Int32 = 0

  /// 标签x坐标相对图片的位置，百分比
  var x: Float = 0

  /// 标签y坐标相对图片的位置，百分比
  var y: Float = 0

  /// 标签的名称
  var name: String = String()

  /// 物品的价格
  var goodPrice: String = String()

  /// 物品的链接
  var goodLink: String = String()

  /// 人物的uuid
  var personUuid: String = String()

  /// 用户的名称
  var personName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.type)
      case 2: try decoder.decodeSingularInt32Field(value: &self.subType)
      case 3: try decoder.decodeSingularFloatField(value: &self.x)
      case 4: try decoder.decodeSingularFloatField(value: &self.y)
      case 5: try decoder.decodeSingularStringField(value: &self.name)
      case 6: try decoder.decodeSingularStringField(value: &self.goodPrice)
      case 7: try decoder.decodeSingularStringField(value: &self.goodLink)
      case 8: try decoder.decodeSingularStringField(value: &self.personUuid)
      case 9: try decoder.decodeSingularStringField(value: &self.personName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if self.subType != 0 {
      try visitor.visitSingularInt32Field(value: self.subType, fieldNumber: 2)
    }
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 3)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.goodPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.goodPrice, fieldNumber: 6)
    }
    if !self.goodLink.isEmpty {
      try visitor.visitSingularStringField(value: self.goodLink, fieldNumber: 7)
    }
    if !self.personUuid.isEmpty {
      try visitor.visitSingularStringField(value: self.personUuid, fieldNumber: 8)
    }
    if !self.personName.isEmpty {
      try visitor.visitSingularStringField(value: self.personName, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 图片属性
struct Bbproto_PImageAttr: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PImageAttr"

  ///宽
  var width: Int32 = 0

  ///高
  var high: Int32 = 0

  ///是否作为封面. 是:true; 否:false
  var isCover: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.width)
      case 2: try decoder.decodeSingularInt32Field(value: &self.high)
      case 3: try decoder.decodeSingularBoolField(value: &self.isCover)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 1)
    }
    if self.high != 0 {
      try visitor.visitSingularInt32Field(value: self.high, fieldNumber: 2)
    }
    if self.isCover != false {
      try visitor.visitSingularBoolField(value: self.isCover, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_EResourceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Txt"),
    1: .same(proto: "Img"),
    2: .same(proto: "Aud"),
    3: .same(proto: "VideoLocal"),
    4: .same(proto: "VideoOther"),
    5: .same(proto: "VideoHuge"),
    6: .same(proto: "Title"),
  ]
}

extension Bbproto_PResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "errorCode"),
    2: .same(proto: "errorMsg"),
    3: .same(proto: "extraInfo"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PResult) -> Bool {
    if self.errorCode != other.errorCode {return false}
    if self.errorMsg != other.errorMsg {return false}
    if self.extraInfo != other.extraInfo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PJResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PJResult) -> Bool {
    if self.code != other.code {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "magic"),
    2: .same(proto: "type"),
    3: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PMessage) -> Bool {
    if self.magic != other.magic {return false}
    if self.type != other.type {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PManyUUID: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ManyUUID"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PManyUUID) -> Bool {
    if self.manyUuid != other.manyUuid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PManyErrorCode: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ManyErrorCode"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PManyErrorCode) -> Bool {
    if self.manyErrorCode != other.manyErrorCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStringList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStringList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInt64List: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInt64List) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInt32List: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInt32List) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBoolList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBoolList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFloat64List: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFloat64List) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStringSingle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStringSingle) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInt64Single: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInt64Single) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PInt32Single: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PInt32Single) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBoolSingle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBoolSingle) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PFloat64Single: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Val"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PFloat64Single) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBinaryMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MsgType"),
    2: .same(proto: "MsgData"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBinaryMsg) -> Bool {
    if self.msgType != other.msgType {return false}
    if self.msgData != other.msgData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBinaryMsgList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBinaryMsgList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PHealthItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "status"),
    3: .same(proto: "detail"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PHealthItem) -> Bool {
    if self.name != other.name {return false}
    if self.status != other.status {return false}
    if self.detail != other.detail {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PServiceHealth: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "serviceName"),
    3: .same(proto: "healInfoList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PServiceHealth) -> Bool {
    if self.status != other.status {return false}
    if self.serviceName != other.serviceName {return false}
    if self.healInfoList != other.healInfoList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PServiceHealthList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PServiceHealthList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PServicesStatus: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PServicesStatus) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PServiceHeartbeatInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenExpiration"),
    2: .same(proto: "status"),
    3: .same(proto: "abnormalIdList"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PServiceHeartbeatInfo) -> Bool {
    if self.tokenExpiration != other.tokenExpiration {return false}
    if self.status != other.status {return false}
    if self.abnormalIDList != other.abnormalIDList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PResource: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Text"),
    3: .same(proto: "MediaObjectkey"),
    4: .same(proto: "MediaUrl"),
    5: .same(proto: "MediaSize"),
    6: .same(proto: "MediaExpires"),
    7: .same(proto: "Des"),
    8: .same(proto: "ThumbObjectkey"),
    9: .same(proto: "ThumbUrl"),
    10: .same(proto: "Tags"),
    11: .same(proto: "ImageAttr"),
  ]

  fileprivate class _StorageClass {
    var _type: Bbproto_EResourceType = Bbproto_EResourceType.txt
    var _text: String = String()
    var _mediaObjectkey: String = String()
    var _mediaURL: String = String()
    var _mediaSize: Int64 = 0
    var _mediaExpires: Int64 = 0
    var _des: String = String()
    var _thumbObjectkey: String = String()
    var _thumbURL: String = String()
    var _tags: Bbproto_PImageTagList? = nil
    var _imageAttr: Bbproto_PImageAttr? = nil

    init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _text = source._text
      _mediaObjectkey = source._mediaObjectkey
      _mediaURL = source._mediaURL
      _mediaSize = source._mediaSize
      _mediaExpires = source._mediaExpires
      _des = source._des
      _thumbObjectkey = source._thumbObjectkey
      _thumbURL = source._thumbURL
      _tags = source._tags
      _imageAttr = source._imageAttr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PResource) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._mediaObjectkey != other_storage._mediaObjectkey {return false}
        if _storage._mediaURL != other_storage._mediaURL {return false}
        if _storage._mediaSize != other_storage._mediaSize {return false}
        if _storage._mediaExpires != other_storage._mediaExpires {return false}
        if _storage._des != other_storage._des {return false}
        if _storage._thumbObjectkey != other_storage._thumbObjectkey {return false}
        if _storage._thumbURL != other_storage._thumbURL {return false}
        if _storage._tags != other_storage._tags {return false}
        if _storage._imageAttr != other_storage._imageAttr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PResourceList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PResourceList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PImageTagList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "List"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PImageTagList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PImageTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "SubType"),
    3: .same(proto: "X"),
    4: .same(proto: "Y"),
    5: .same(proto: "Name"),
    6: .same(proto: "GoodPrice"),
    7: .same(proto: "GoodLink"),
    8: .same(proto: "PersonUuid"),
    9: .same(proto: "PersonName"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PImageTag) -> Bool {
    if self.type != other.type {return false}
    if self.subType != other.subType {return false}
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if self.name != other.name {return false}
    if self.goodPrice != other.goodPrice {return false}
    if self.goodLink != other.goodLink {return false}
    if self.personUuid != other.personUuid {return false}
    if self.personName != other.personName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PImageAttr: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "high"),
    3: .same(proto: "isCover"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PImageAttr) -> Bool {
    if self.width != other.width {return false}
    if self.high != other.high {return false}
    if self.isCover != other.isCover {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: robot.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

/// 推送消息类型
enum Bbproto_ERobotPushType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 消息推送
  case regards // = 0

  /// 生日提醒
  case remind // = 1

  /// 现金抽奖
  case lottery // = 2

  /// 红包
  case redPacket // = 3

  /// 直播
  case stream // = 4

  /// 领奖提醒
  case lotteryRemind // = 5

  /// 抽奖过期提醒
  case lotteryExpire // = 6

  /// 领奖收货信息更新提醒
  case lotteryCourier // = 7

  /// 礼物抽奖
  case giftLottery // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .regards
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .regards
    case 1: self = .remind
    case 2: self = .lottery
    case 3: self = .redPacket
    case 4: self = .stream
    case 5: self = .lotteryRemind
    case 6: self = .lotteryExpire
    case 7: self = .lotteryCourier
    case 8: self = .giftLottery
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .regards: return 0
    case .remind: return 1
    case .lottery: return 2
    case .redPacket: return 3
    case .stream: return 4
    case .lotteryRemind: return 5
    case .lotteryExpire: return 6
    case .lotteryCourier: return 7
    case .giftLottery: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 推送消息状态
enum Bbproto_ERobotMsgState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 未读
  case unRead // = 0

  /// 已读
  case read // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unRead
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unRead
    case 1: self = .read
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unRead: return 0
    case .read: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// 网红创建的推送消息
struct Bbproto_PBRegards: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRegards"

  ///消息ID,客户端不填
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///网红用户ID,客户端不填
  var from: String {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  ///条件筛选时不填.精确选择时只填uuid.
  var to: [Bbproto_PUserBase] {
    get {return _storage._to}
    set {_uniqueStorage()._to = newValue}
  }

  ///粉丝筛选条件,精确选择时条件为空
  var filter: Bbproto_PFansFilterParam {
    get {return _storage._filter ?? Bbproto_PFansFilterParam()}
    set {_uniqueStorage()._filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  var hasFilter: Bool {return _storage._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  mutating func clearFilter() {_storage._filter = nil}

  ///消息推送的粉丝数,客户端不填
  var fansNum: Int32 {
    get {return _storage._fansNum}
    set {_uniqueStorage()._fansNum = newValue}
  }

  ///消息文本,最大长度140
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///消息语音,语音最大时长60
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  ///消息图片
  var image: Bbproto_PImage {
    get {return _storage._image ?? Bbproto_PImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_storage._image = nil}

  ///创建时间,客户端不填
  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._from)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._to)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._filter)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._fansNum)
        case 6: try decoder.decodeSingularStringField(value: &_storage._text)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._audio)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._createTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._from.isEmpty {
        try visitor.visitSingularStringField(value: _storage._from, fieldNumber: 2)
      }
      if !_storage._to.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._to, fieldNumber: 3)
      }
      if let v = _storage._filter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._fansNum != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fansNum, fieldNumber: 5)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 6)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 网红创建的推送消息
struct Bbproto_PBRegardsList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRegardsList"

  var list: [Bbproto_PBRegards] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 网红创建的生日提醒消息
struct Bbproto_PBRemind: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRemind"

  ///消息ID,客户端不填.如果消息未发送ID则为0
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///客户端不填.发送状态:0:待发送; 1:已过时间,已发送;2:已过时间,未发送
  var state: Int32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  ///网红用户ID,客户端不填,监管要填
  var from: String {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  ///提醒的目标用户uuid. 默认提醒时不填. 
  var to: Bbproto_PUserBase {
    get {return _storage._to ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  var hasTo: Bool {return _storage._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  mutating func clearTo() {_storage._to = nil}

  ///消息类型 text, audio
  var srcType: String {
    get {return _storage._srcType}
    set {_uniqueStorage()._srcType = newValue}
  }

  ///文本,最大长度140
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音,语音最大时长30
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  ///生日日期,客户端不填
  var brithday: Int64 {
    get {return _storage._brithday}
    set {_uniqueStorage()._brithday = newValue}
  }

  ///预览标记,只有客户端使用,服务端总是填false
  var isPreView: Bool {
    get {return _storage._isPreView}
    set {_uniqueStorage()._isPreView = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._state)
        case 3: try decoder.decodeSingularStringField(value: &_storage._from)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._to)
        case 5: try decoder.decodeSingularStringField(value: &_storage._srcType)
        case 6: try decoder.decodeSingularStringField(value: &_storage._text)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._audio)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._brithday)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._isPreView)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._state != 0 {
        try visitor.visitSingularInt32Field(value: _storage._state, fieldNumber: 2)
      }
      if !_storage._from.isEmpty {
        try visitor.visitSingularStringField(value: _storage._from, fieldNumber: 3)
      }
      if let v = _storage._to {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._srcType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._srcType, fieldNumber: 5)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 6)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._brithday != 0 {
        try visitor.visitSingularInt64Field(value: _storage._brithday, fieldNumber: 8)
      }
      if _storage._isPreView != false {
        try visitor.visitSingularBoolField(value: _storage._isPreView, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 网红创建的生日提醒消息模板
struct Bbproto_PBRemindTpl: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRemindTpl"

  ///int64 brithday            = 1;   //生日日期,模板ID
  var srcType: String {
    get {return _storage._srcType}
    set {_uniqueStorage()._srcType = newValue}
  }

  ///文本,最大长度140
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音,语音最大时长30
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._srcType)
        case 3: try decoder.decodeSingularStringField(value: &_storage._text)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._audio)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._srcType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._srcType, fieldNumber: 2)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 3)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 网红创建的生日提醒消息列
struct Bbproto_PBRemindList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRemindList"

  ///提醒消息列表
  var list: [Bbproto_PBRemind] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 红包消息
struct Bbproto_PBRedpacket: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRedpacket"

  ///消息ID
  var id: Int64 = 0

  ///发红包的网红用户ID
  var from: String = String()

  ///订单号
  var ordNo: String = String()

  ///红包留言
  var text: String = String()

  ///发送时间
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.from)
      case 3: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 4: try decoder.decodeSingularStringField(value: &self.text)
      case 5: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 抽奖消息
struct Bbproto_PBLottery: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBLottery"

  ///消息ID
  var id: Int64 = 0

  ///发起的网红用户ID
  var from: String = String()

  ///订单号
  var ordNo: String = String()

  ///抽奖标题
  var text: String = String()

  ///发送时间
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.from)
      case 3: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 4: try decoder.decodeSingularStringField(value: &self.text)
      case 5: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 直播消息
struct Bbproto_PBStreaming: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBStreaming"

  ///消息ID
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///发送时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  ///直播提醒信息
  var live: Bbproto_PStreamingLive {
    get {return _storage._live ?? Bbproto_PStreamingLive()}
    set {_uniqueStorage()._live = newValue}
  }
  /// Returns true if `live` has been explicitly set.
  var hasLive: Bool {return _storage._live != nil}
  /// Clears the value of `live`. Subsequent reads from it will return its default value.
  mutating func clearLive() {_storage._live = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._live)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 2)
      }
      if let v = _storage._live {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用于redis存储
struct Bbproto_PBRawMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBRawMsg"

  ///消息类型
  var msgType: Bbproto_ERobotPushType {
    get {return _storage._msgType}
    set {_uniqueStorage()._msgType = newValue}
  }

  ///推送消息
  var regards: Bbproto_PBRegards {
    get {return _storage._regards ?? Bbproto_PBRegards()}
    set {_uniqueStorage()._regards = newValue}
  }
  /// Returns true if `regards` has been explicitly set.
  var hasRegards: Bool {return _storage._regards != nil}
  /// Clears the value of `regards`. Subsequent reads from it will return its default value.
  mutating func clearRegards() {_storage._regards = nil}

  ///生日提醒消息
  var remind: Bbproto_PBRemind {
    get {return _storage._remind ?? Bbproto_PBRemind()}
    set {_uniqueStorage()._remind = newValue}
  }
  /// Returns true if `remind` has been explicitly set.
  var hasRemind: Bool {return _storage._remind != nil}
  /// Clears the value of `remind`. Subsequent reads from it will return its default value.
  mutating func clearRemind() {_storage._remind = nil}

  var redpacket: Bbproto_PBRedpacket {
    get {return _storage._redpacket ?? Bbproto_PBRedpacket()}
    set {_uniqueStorage()._redpacket = newValue}
  }
  /// Returns true if `redpacket` has been explicitly set.
  var hasRedpacket: Bool {return _storage._redpacket != nil}
  /// Clears the value of `redpacket`. Subsequent reads from it will return its default value.
  mutating func clearRedpacket() {_storage._redpacket = nil}

  var lottery: Bbproto_PBLottery {
    get {return _storage._lottery ?? Bbproto_PBLottery()}
    set {_uniqueStorage()._lottery = newValue}
  }
  /// Returns true if `lottery` has been explicitly set.
  var hasLottery: Bool {return _storage._lottery != nil}
  /// Clears the value of `lottery`. Subsequent reads from it will return its default value.
  mutating func clearLottery() {_storage._lottery = nil}

  var stream: Bbproto_PBStreaming {
    get {return _storage._stream ?? Bbproto_PBStreaming()}
    set {_uniqueStorage()._stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  var hasStream: Bool {return _storage._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  mutating func clearStream() {_storage._stream = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._msgType)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._regards)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._remind)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._redpacket)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._lottery)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._stream)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._msgType != Bbproto_ERobotPushType.regards {
        try visitor.visitSingularEnumField(value: _storage._msgType, fieldNumber: 1)
      }
      if let v = _storage._regards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._remind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._redpacket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._lottery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._stream {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 机器人全局设置
struct Bbproto_PCRobotGlobalSetting: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotGlobalSetting"

  ///机器人总开关	
  var robotEnable: Bool = false

  ///是否接收生日提醒和消息推送	
  var regardsRemind: Bool = false

  ///是否接收消息推送
  var regardsEnable: Bool = false

  ///是否接收生日提醒	
  var remindEnable: Bool = false

  ///皮肤类型.0:女; 1:男
  var skin: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.robotEnable)
      case 2: try decoder.decodeSingularBoolField(value: &self.regardsRemind)
      case 3: try decoder.decodeSingularBoolField(value: &self.regardsEnable)
      case 4: try decoder.decodeSingularBoolField(value: &self.remindEnable)
      case 5: try decoder.decodeSingularInt64Field(value: &self.skin)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.robotEnable != false {
      try visitor.visitSingularBoolField(value: self.robotEnable, fieldNumber: 1)
    }
    if self.regardsRemind != false {
      try visitor.visitSingularBoolField(value: self.regardsRemind, fieldNumber: 2)
    }
    if self.regardsEnable != false {
      try visitor.visitSingularBoolField(value: self.regardsEnable, fieldNumber: 3)
    }
    if self.remindEnable != false {
      try visitor.visitSingularBoolField(value: self.remindEnable, fieldNumber: 4)
    }
    if self.skin != 0 {
      try visitor.visitSingularInt64Field(value: self.skin, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 粉丝收到的消息推送
struct Bbproto_PCPushRegards: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCPushRegards"

  ///消息文本,最大长度140
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///消息语音,语音最大时长60
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  ///消息图片
  var image: Bbproto_PImage {
    get {return _storage._image ?? Bbproto_PImage()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_storage._image = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._text)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._audio)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._image)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 1)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 粉丝收到的提醒消息
struct Bbproto_PCPushRemind: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCPushRemind"

  ///消息类型 text, audio
  var srcType: String {
    get {return _storage._srcType}
    set {_uniqueStorage()._srcType = newValue}
  }

  ///文本,最大长度140
  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  ///语音,语音最大时长30
  var audio: Bbproto_PAudio {
    get {return _storage._audio ?? Bbproto_PAudio()}
    set {_uniqueStorage()._audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  var hasAudio: Bool {return _storage._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  mutating func clearAudio() {_storage._audio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._srcType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._audio)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._srcType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._srcType, fieldNumber: 1)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 2)
      }
      if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 粉丝收到的抽奖消息
struct Bbproto_PCPushLottery: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCPushLottery"

  ///订单号
  var ordNo: String = String()

  ///抽奖标题
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 粉丝收到的红包消息
struct Bbproto_PCPushRedPacket: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCPushRedPacket"

  ///订单号
  var ordNo: String = String()

  ///红包留言
  var text: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ordNo)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ordNo.isEmpty {
      try visitor.visitSingularStringField(value: self.ordNo, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 粉丝收到的消息
struct Bbproto_PCRobotPushMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotPushMsg"

  ///消息ID
  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  ///消息发送时间
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  ///消息类型
  var msgType: Bbproto_ERobotPushType {
    get {return _storage._msgType}
    set {_uniqueStorage()._msgType = newValue}
  }

  ///消息状态
  var state: Bbproto_ERobotMsgState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  ///网红用户信息
  var from: Bbproto_PUserBase {
    get {return _storage._from ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return _storage._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {_storage._from = nil}

  ///各类型消息
  var content: Bbproto_PCRobotPushRawMsg {
    get {return _storage._content ?? Bbproto_PCRobotPushRawMsg()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {_storage._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._msgType)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._from)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._content)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 2)
      }
      if _storage._msgType != Bbproto_ERobotPushType.regards {
        try visitor.visitSingularEnumField(value: _storage._msgType, fieldNumber: 3)
      }
      if _storage._state != Bbproto_ERobotMsgState.unRead {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 4)
      }
      if let v = _storage._from {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 粉丝收到的消息
struct Bbproto_PCRobotPushRawMsg: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotPushRawMsg"

  ///推送消息
  var regards: Bbproto_PCPushRegards {
    get {return _storage._regards ?? Bbproto_PCPushRegards()}
    set {_uniqueStorage()._regards = newValue}
  }
  /// Returns true if `regards` has been explicitly set.
  var hasRegards: Bool {return _storage._regards != nil}
  /// Clears the value of `regards`. Subsequent reads from it will return its default value.
  mutating func clearRegards() {_storage._regards = nil}

  ///生日提醒消息
  var remind: Bbproto_PCPushRemind {
    get {return _storage._remind ?? Bbproto_PCPushRemind()}
    set {_uniqueStorage()._remind = newValue}
  }
  /// Returns true if `remind` has been explicitly set.
  var hasRemind: Bool {return _storage._remind != nil}
  /// Clears the value of `remind`. Subsequent reads from it will return its default value.
  mutating func clearRemind() {_storage._remind = nil}

  ///抽奖消息,对应消息类型:Lottery、LotteryRemind、LotteryExpire、LotteryCourier
  var lottery: Bbproto_PCPushLottery {
    get {return _storage._lottery ?? Bbproto_PCPushLottery()}
    set {_uniqueStorage()._lottery = newValue}
  }
  /// Returns true if `lottery` has been explicitly set.
  var hasLottery: Bool {return _storage._lottery != nil}
  /// Clears the value of `lottery`. Subsequent reads from it will return its default value.
  mutating func clearLottery() {_storage._lottery = nil}

  ///红包消息
  var redPacket: Bbproto_PCPushRedPacket {
    get {return _storage._redPacket ?? Bbproto_PCPushRedPacket()}
    set {_uniqueStorage()._redPacket = newValue}
  }
  /// Returns true if `redPacket` has been explicitly set.
  var hasRedPacket: Bool {return _storage._redPacket != nil}
  /// Clears the value of `redPacket`. Subsequent reads from it will return its default value.
  mutating func clearRedPacket() {_storage._redPacket = nil}

  ///直播提醒消息
  var streaming: Bbproto_PStreamingLive {
    get {return _storage._streaming ?? Bbproto_PStreamingLive()}
    set {_uniqueStorage()._streaming = newValue}
  }
  /// Returns true if `streaming` has been explicitly set.
  var hasStreaming: Bool {return _storage._streaming != nil}
  /// Clears the value of `streaming`. Subsequent reads from it will return its default value.
  mutating func clearStreaming() {_storage._streaming = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._regards)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._remind)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lottery)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._redPacket)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._streaming)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._regards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._remind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._lottery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._redPacket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._streaming {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 粉丝收到的消息列表
struct Bbproto_PCRobotPushMsgList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotPushMsgList"

  var list: [Bbproto_PCRobotPushMsg] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 各类型消息数
struct Bbproto_PCRobotMsgCount: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotMsgCount"

  ///类型 ERobotPushType
  var type: Bbproto_ERobotPushType = Bbproto_ERobotPushType.regards

  ///数目
  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != Bbproto_ERobotPushType.regards {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 气泡消息队列
struct Bbproto_PCRobotBubble: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotBubble"

  ///类型 ERobotPushType
  var type: Bbproto_ERobotPushType = Bbproto_ERobotPushType.regards

  ///数目
  var count: Int32 = 0

  ///消息内容
  var list: [Bbproto_PCRobotPushMsg] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularInt32Field(value: &self.count)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != Bbproto_ERobotPushType.regards {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 心跳轮询推送信息汇总
struct Bbproto_PCRobotSummary: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCRobotSummary"

  /// 消息总数, 如果-1客户端则忽略响应
  var totalNum: Int32 = 0

  /// 消息未读数, 如果-1客户端则忽略响应
  var unReadNum: Int32 = 0

  /// 下次轮询的间隔时间(秒).0表示不等待.
  var nextDelay: Int32 = 0

  /// 是不是重连, 30秒没轮询认为重连
  var isReconect: Bool = false

  /// 气泡消息列表
  var bubbleList: [Bbproto_PCRobotBubble] = []

  /// 最后一次收到消息到当前时间的间隔,单位:秒
  var silenceTime: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.totalNum)
      case 2: try decoder.decodeSingularInt32Field(value: &self.unReadNum)
      case 3: try decoder.decodeSingularInt32Field(value: &self.nextDelay)
      case 4: try decoder.decodeSingularBoolField(value: &self.isReconect)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.bubbleList)
      case 6: try decoder.decodeSingularInt32Field(value: &self.silenceTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalNum != 0 {
      try visitor.visitSingularInt32Field(value: self.totalNum, fieldNumber: 1)
    }
    if self.unReadNum != 0 {
      try visitor.visitSingularInt32Field(value: self.unReadNum, fieldNumber: 2)
    }
    if self.nextDelay != 0 {
      try visitor.visitSingularInt32Field(value: self.nextDelay, fieldNumber: 3)
    }
    if self.isReconect != false {
      try visitor.visitSingularBoolField(value: self.isReconect, fieldNumber: 4)
    }
    if !self.bubbleList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bubbleList, fieldNumber: 5)
    }
    if self.silenceTime != 0 {
      try visitor.visitSingularInt32Field(value: self.silenceTime, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户关注的网红信息
struct Bbproto_PCCelebrity: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCCelebrity"

  ///用户信息
  var user: Bbproto_PUserBase {
    get {return _storage._user ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  ///所属VO信息
  var belongVo: Bbproto_PUserBase {
    get {return _storage._belongVo ?? Bbproto_PUserBase()}
    set {_uniqueStorage()._belongVo = newValue}
  }
  /// Returns true if `belongVo` has been explicitly set.
  var hasBelongVo: Bool {return _storage._belongVo != nil}
  /// Clears the value of `belongVo`. Subsequent reads from it will return its default value.
  mutating func clearBelongVo() {_storage._belongVo = nil}

  ///是否有未读消息
  var msgState: Bbproto_ERobotMsgState {
    get {return _storage._msgState}
    set {_uniqueStorage()._msgState = newValue}
  }

  ///是否屏蔽, 屏蔽:true, 未屏蔽:false
  var isShield: Bool {
    get {return _storage._isShield}
    set {_uniqueStorage()._isShield = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._belongVo)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._msgState)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isShield)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._belongVo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._msgState != Bbproto_ERobotMsgState.unRead {
        try visitor.visitSingularEnumField(value: _storage._msgState, fieldNumber: 3)
      }
      if _storage._isShield != false {
        try visitor.visitSingularBoolField(value: _storage._isShield, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 用户关注的网红列表
struct Bbproto_PCCelebrityGroup: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCCelebrityGroup"

  ///分组, A-Z
  var group: String = String()

  ///组内网红信息
  var list: [Bbproto_PCCelebrity] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.group)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.group.isEmpty {
      try visitor.visitSingularStringField(value: self.group, fieldNumber: 1)
    }
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 用户关注的网红列表
struct Bbproto_PCCelebrityGroupList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCCelebrityGroupList"

  var list: [Bbproto_PCCelebrityGroup] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 网红消息数限制
struct Bbproto_PBMsgNumLimit: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PBMsgNumLimit"

  ///总数
  var total: Int32 = 0

  ///剩余数
  var remain: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularInt32Field(value: &self.remain)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if self.remain != 0 {
      try visitor.visitSingularInt32Field(value: self.remain, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_ERobotPushType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Regards"),
    1: .same(proto: "Remind"),
    2: .same(proto: "Lottery"),
    3: .same(proto: "RedPacket"),
    4: .same(proto: "Stream"),
    5: .same(proto: "LotteryRemind"),
    6: .same(proto: "LotteryExpire"),
    7: .same(proto: "LotteryCourier"),
    8: .same(proto: "GiftLottery"),
  ]
}

extension Bbproto_ERobotMsgState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UnRead"),
    1: .same(proto: "Read"),
  ]
}

extension Bbproto_PBRegards: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .same(proto: "Filter"),
    5: .same(proto: "fansNum"),
    6: .same(proto: "Text"),
    7: .same(proto: "audio"),
    8: .same(proto: "image"),
    9: .same(proto: "createTime"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _from: String = String()
    var _to: [Bbproto_PUserBase] = []
    var _filter: Bbproto_PFansFilterParam? = nil
    var _fansNum: Int32 = 0
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil
    var _image: Bbproto_PImage? = nil
    var _createTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _from = source._from
      _to = source._to
      _filter = source._filter
      _fansNum = source._fansNum
      _text = source._text
      _audio = source._audio
      _image = source._image
      _createTime = source._createTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRegards) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._from != other_storage._from {return false}
        if _storage._to != other_storage._to {return false}
        if _storage._filter != other_storage._filter {return false}
        if _storage._fansNum != other_storage._fansNum {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._createTime != other_storage._createTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRegardsList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRegardsList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRemind: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "state"),
    3: .same(proto: "from"),
    4: .same(proto: "to"),
    5: .same(proto: "srcType"),
    6: .same(proto: "Text"),
    7: .same(proto: "audio"),
    8: .same(proto: "brithday"),
    9: .same(proto: "isPreView"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _state: Int32 = 0
    var _from: String = String()
    var _to: Bbproto_PUserBase? = nil
    var _srcType: String = String()
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil
    var _brithday: Int64 = 0
    var _isPreView: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _state = source._state
      _from = source._from
      _to = source._to
      _srcType = source._srcType
      _text = source._text
      _audio = source._audio
      _brithday = source._brithday
      _isPreView = source._isPreView
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRemind) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._from != other_storage._from {return false}
        if _storage._to != other_storage._to {return false}
        if _storage._srcType != other_storage._srcType {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        if _storage._brithday != other_storage._brithday {return false}
        if _storage._isPreView != other_storage._isPreView {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRemindTpl: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "srcType"),
    3: .same(proto: "Text"),
    4: .same(proto: "audio"),
  ]

  fileprivate class _StorageClass {
    var _srcType: String = String()
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil

    init() {}

    init(copying source: _StorageClass) {
      _srcType = source._srcType
      _text = source._text
      _audio = source._audio
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRemindTpl) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._srcType != other_storage._srcType {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRemindList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRemindList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRedpacket: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .standard(proto: "ord_no"),
    4: .same(proto: "text"),
    5: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRedpacket) -> Bool {
    if self.id != other.id {return false}
    if self.from != other.from {return false}
    if self.ordNo != other.ordNo {return false}
    if self.text != other.text {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBLottery: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .standard(proto: "ord_no"),
    4: .same(proto: "text"),
    5: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBLottery) -> Bool {
    if self.id != other.id {return false}
    if self.from != other.from {return false}
    if self.ordNo != other.ordNo {return false}
    if self.text != other.text {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBStreaming: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .same(proto: "live"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _time: Int64 = 0
    var _live: Bbproto_PStreamingLive? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _time = source._time
      _live = source._live
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBStreaming) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._live != other_storage._live {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBRawMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msgType"),
    2: .same(proto: "regards"),
    3: .same(proto: "remind"),
    4: .same(proto: "redpacket"),
    5: .same(proto: "lottery"),
    6: .same(proto: "stream"),
  ]

  fileprivate class _StorageClass {
    var _msgType: Bbproto_ERobotPushType = Bbproto_ERobotPushType.regards
    var _regards: Bbproto_PBRegards? = nil
    var _remind: Bbproto_PBRemind? = nil
    var _redpacket: Bbproto_PBRedpacket? = nil
    var _lottery: Bbproto_PBLottery? = nil
    var _stream: Bbproto_PBStreaming? = nil

    init() {}

    init(copying source: _StorageClass) {
      _msgType = source._msgType
      _regards = source._regards
      _remind = source._remind
      _redpacket = source._redpacket
      _lottery = source._lottery
      _stream = source._stream
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PBRawMsg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._msgType != other_storage._msgType {return false}
        if _storage._regards != other_storage._regards {return false}
        if _storage._remind != other_storage._remind {return false}
        if _storage._redpacket != other_storage._redpacket {return false}
        if _storage._lottery != other_storage._lottery {return false}
        if _storage._stream != other_storage._stream {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotGlobalSetting: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "robotEnable"),
    2: .same(proto: "regardsRemind"),
    3: .same(proto: "regardsEnable"),
    4: .same(proto: "remindEnable"),
    5: .same(proto: "skin"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotGlobalSetting) -> Bool {
    if self.robotEnable != other.robotEnable {return false}
    if self.regardsRemind != other.regardsRemind {return false}
    if self.regardsEnable != other.regardsEnable {return false}
    if self.remindEnable != other.remindEnable {return false}
    if self.skin != other.skin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCPushRegards: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Text"),
    2: .same(proto: "audio"),
    3: .same(proto: "image"),
  ]

  fileprivate class _StorageClass {
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil
    var _image: Bbproto_PImage? = nil

    init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _audio = source._audio
      _image = source._image
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCPushRegards) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        if _storage._image != other_storage._image {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCPushRemind: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "srcType"),
    2: .same(proto: "Text"),
    3: .same(proto: "audio"),
  ]

  fileprivate class _StorageClass {
    var _srcType: String = String()
    var _text: String = String()
    var _audio: Bbproto_PAudio? = nil

    init() {}

    init(copying source: _StorageClass) {
      _srcType = source._srcType
      _text = source._text
      _audio = source._audio
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCPushRemind) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._srcType != other_storage._srcType {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._audio != other_storage._audio {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCPushLottery: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ordNo"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCPushLottery) -> Bool {
    if self.ordNo != other.ordNo {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCPushRedPacket: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ordNo"),
    2: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCPushRedPacket) -> Bool {
    if self.ordNo != other.ordNo {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotPushMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .same(proto: "msgType"),
    4: .same(proto: "state"),
    5: .same(proto: "from"),
    6: .same(proto: "content"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _time: Int64 = 0
    var _msgType: Bbproto_ERobotPushType = Bbproto_ERobotPushType.regards
    var _state: Bbproto_ERobotMsgState = Bbproto_ERobotMsgState.unRead
    var _from: Bbproto_PUserBase? = nil
    var _content: Bbproto_PCRobotPushRawMsg? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _time = source._time
      _msgType = source._msgType
      _state = source._state
      _from = source._from
      _content = source._content
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotPushMsg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._msgType != other_storage._msgType {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._from != other_storage._from {return false}
        if _storage._content != other_storage._content {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotPushRawMsg: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "regards"),
    2: .same(proto: "remind"),
    3: .same(proto: "lottery"),
    4: .same(proto: "redPacket"),
    5: .same(proto: "streaming"),
  ]

  fileprivate class _StorageClass {
    var _regards: Bbproto_PCPushRegards? = nil
    var _remind: Bbproto_PCPushRemind? = nil
    var _lottery: Bbproto_PCPushLottery? = nil
    var _redPacket: Bbproto_PCPushRedPacket? = nil
    var _streaming: Bbproto_PStreamingLive? = nil

    init() {}

    init(copying source: _StorageClass) {
      _regards = source._regards
      _remind = source._remind
      _lottery = source._lottery
      _redPacket = source._redPacket
      _streaming = source._streaming
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotPushRawMsg) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._regards != other_storage._regards {return false}
        if _storage._remind != other_storage._remind {return false}
        if _storage._lottery != other_storage._lottery {return false}
        if _storage._redPacket != other_storage._redPacket {return false}
        if _storage._streaming != other_storage._streaming {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotPushMsgList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotPushMsgList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotMsgCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotMsgCount) -> Bool {
    if self.type != other.type {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotBubble: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "count"),
    3: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotBubble) -> Bool {
    if self.type != other.type {return false}
    if self.count != other.count {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCRobotSummary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalNum"),
    2: .same(proto: "unReadNum"),
    3: .same(proto: "nextDelay"),
    4: .same(proto: "isReconect"),
    5: .same(proto: "bubbleList"),
    6: .same(proto: "SilenceTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCRobotSummary) -> Bool {
    if self.totalNum != other.totalNum {return false}
    if self.unReadNum != other.unReadNum {return false}
    if self.nextDelay != other.nextDelay {return false}
    if self.isReconect != other.isReconect {return false}
    if self.bubbleList != other.bubbleList {return false}
    if self.silenceTime != other.silenceTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCCelebrity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "belongVo"),
    3: .same(proto: "msgState"),
    4: .same(proto: "isShield"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserBase? = nil
    var _belongVo: Bbproto_PUserBase? = nil
    var _msgState: Bbproto_ERobotMsgState = Bbproto_ERobotMsgState.unRead
    var _isShield: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _belongVo = source._belongVo
      _msgState = source._msgState
      _isShield = source._isShield
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PCCelebrity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._belongVo != other_storage._belongVo {return false}
        if _storage._msgState != other_storage._msgState {return false}
        if _storage._isShield != other_storage._isShield {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCCelebrityGroup: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "group"),
    2: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCCelebrityGroup) -> Bool {
    if self.group != other.group {return false}
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCCelebrityGroupList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCCelebrityGroupList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PBMsgNumLimit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "remain"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PBMsgNumLimit) -> Bool {
    if self.total != other.total {return false}
    if self.remain != other.remain {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

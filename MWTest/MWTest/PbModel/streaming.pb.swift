/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: streaming.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PStreamingWebSite: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingWebSite"

  /// 中文名称
  var name: String = String()

  /// 网站网址
  var url: String = String()

  /// 网站平台id,1-斗鱼,2-虎牙
  var id: Int64 = 0

  /// 网站平台,大图标地址
  var bigIconURL: String = String()

  /// 网站平台,小图标地址
  var smallIconURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeSingularInt64Field(value: &self.id)
      case 4: try decoder.decodeSingularStringField(value: &self.bigIconURL)
      case 5: try decoder.decodeSingularStringField(value: &self.smallIconURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    if !self.bigIconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bigIconURL, fieldNumber: 4)
    }
    if !self.smallIconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.smallIconURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///支持的第三方直播网站列表,以后简称网站列表
struct Bbproto_PStreamingWebSiteList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingWebSiteList"

  var list: [Bbproto_PStreamingWebSite] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播通知房间信息
struct Bbproto_PStreamingRoom: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingRoom"

  /// 网站(直播平台)
  var webSite: Bbproto_PStreamingWebSite {
    get {return _storage._webSite ?? Bbproto_PStreamingWebSite()}
    set {_uniqueStorage()._webSite = newValue}
  }
  /// Returns true if `webSite` has been explicitly set.
  var hasWebSite: Bool {return _storage._webSite != nil}
  /// Clears the value of `webSite`. Subsequent reads from it will return its default value.
  mutating func clearWebSite() {_storage._webSite = nil}

  /// 房间号
  var number: String {
    get {return _storage._number}
    set {_uniqueStorage()._number = newValue}
  }

  /// 房间url
  var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._webSite)
        case 2: try decoder.decodeSingularStringField(value: &_storage._number)
        case 3: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._webSite {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._number.isEmpty {
        try visitor.visitSingularStringField(value: _storage._number, fieldNumber: 2)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PStreamingRoomList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingRoomList"

  var list: [Bbproto_PStreamingRoom] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播通知直播记录
struct Bbproto_PStreamingLive: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingLive"

  /// 记录id
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 主播
  var anchor: Bbproto_PUserSupervisor {
    get {return _storage._anchor ?? Bbproto_PUserSupervisor()}
    set {_uniqueStorage()._anchor = newValue}
  }
  /// Returns true if `anchor` has been explicitly set.
  var hasAnchor: Bool {return _storage._anchor != nil}
  /// Clears the value of `anchor`. Subsequent reads from it will return its default value.
  mutating func clearAnchor() {_storage._anchor = nil}

  /// 直播房间
  var room: Bbproto_PStreamingRoom {
    get {return _storage._room ?? Bbproto_PStreamingRoom()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_storage._room = nil}

  /// 是否直播中
  var isLiving: Bool {
    get {return _storage._isLiving}
    set {_uniqueStorage()._isLiving = newValue}
  }

  /// 上一次直播时间,unix时间戳,精确到秒
  var lastLiveTime: Int64 {
    get {return _storage._lastLiveTime}
    set {_uniqueStorage()._lastLiveTime = newValue}
  }

  /// 即将直播时间,unix时间戳,精确到秒
  var nextLiveTime: Int64 {
    get {return _storage._nextLiveTime}
    set {_uniqueStorage()._nextLiveTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._anchor)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._room)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isLiving)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._lastLiveTime)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._nextLiveTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._anchor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._isLiving != false {
        try visitor.visitSingularBoolField(value: _storage._isLiving, fieldNumber: 4)
      }
      if _storage._lastLiveTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastLiveTime, fieldNumber: 5)
      }
      if _storage._nextLiveTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nextLiveTime, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PStreamingLiveList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingLiveList"

  var list: [Bbproto_PStreamingLive] = []

  /// 正在直播总数
  var livingCount: Int64 = 0

  /// 即将直播总数
  var liveCount: Int64 = 0

  /// 全部总数
  var allCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt64Field(value: &self.livingCount)
      case 3: try decoder.decodeSingularInt64Field(value: &self.liveCount)
      case 4: try decoder.decodeSingularInt64Field(value: &self.allCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.livingCount != 0 {
      try visitor.visitSingularInt64Field(value: self.livingCount, fieldNumber: 2)
    }
    if self.liveCount != 0 {
      try visitor.visitSingularInt64Field(value: self.liveCount, fieldNumber: 3)
    }
    if self.allCount != 0 {
      try visitor.visitSingularInt64Field(value: self.allCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PStreamingConfig: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingConfig"

  /// 中文名
  var chinese: String = String()

  /// 英文名
  var english: String = String()

  /// 值
  var value: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.chinese)
      case 2: try decoder.decodeSingularStringField(value: &self.english)
      case 3: try decoder.decodeSingularInt64Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chinese.isEmpty {
      try visitor.visitSingularStringField(value: self.chinese, fieldNumber: 1)
    }
    if !self.english.isEmpty {
      try visitor.visitSingularStringField(value: self.english, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播通知系统参数
struct Bbproto_PStreamingConfigList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingConfigList"

  var list: [Bbproto_PStreamingConfig] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PStreamingAnchor: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingAnchor"

  /// 基础属性
  var user: Bbproto_PUserSupervisor {
    get {return _storage._user ?? Bbproto_PUserSupervisor()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  /// 是否订阅
  var isSubscribe: Bool {
    get {return _storage._isSubscribe}
    set {_uniqueStorage()._isSubscribe = newValue}
  }

  /// 是否添加
  var isAdd: Bool {
    get {return _storage._isAdd}
    set {_uniqueStorage()._isAdd = newValue}
  }

  /// 直播房间
  var room: Bbproto_PStreamingRoom {
    get {return _storage._room ?? Bbproto_PStreamingRoom()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_storage._room = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._isSubscribe)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isAdd)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._room)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._isSubscribe != false {
        try visitor.visitSingularBoolField(value: _storage._isSubscribe, fieldNumber: 2)
      }
      if _storage._isAdd != false {
        try visitor.visitSingularBoolField(value: _storage._isAdd, fieldNumber: 3)
      }
      if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PStreamingAnchorList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingAnchorList"

  var list: [Bbproto_PStreamingAnchor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播通知粉丝信息
struct Bbproto_PStreamingFan: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingFan"

  /// 是否屏蔽全部
  var refuseAll: Bool {
    get {return _storage._refuseAll}
    set {_uniqueStorage()._refuseAll = newValue}
  }

  /// 屏蔽网站平台id列表,1-斗鱼,2-虎牙
  var refuseWebSites: [String] {
    get {return _storage._refuseWebSites}
    set {_uniqueStorage()._refuseWebSites = newValue}
  }

  /// 是否发送提醒通知
  var isSend: Bool {
    get {return _storage._isSend}
    set {_uniqueStorage()._isSend = newValue}
  }

  /// 直播房间
  var room: Bbproto_PStreamingRoom {
    get {return _storage._room ?? Bbproto_PStreamingRoom()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_storage._room = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._refuseAll)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._refuseWebSites)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isSend)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._room)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._refuseAll != false {
        try visitor.visitSingularBoolField(value: _storage._refuseAll, fieldNumber: 1)
      }
      if !_storage._refuseWebSites.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._refuseWebSites, fieldNumber: 2)
      }
      if _storage._isSend != false {
        try visitor.visitSingularBoolField(value: _storage._isSend, fieldNumber: 3)
      }
      if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PStreamingRest: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingRest"

  /// 剩余次数
  var count: Int64 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  /// 绑定的房间
  var room: Bbproto_PStreamingRoom {
    get {return _storage._room ?? Bbproto_PStreamingRoom()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_storage._room = nil}

  /// 是否开启发送提醒
  var isSend: Bool {
    get {return _storage._isSend}
    set {_uniqueStorage()._isSend = newValue}
  }

  /// 昵称
  var nick: String {
    get {return _storage._nick}
    set {_uniqueStorage()._nick = newValue}
  }

  /// 每天次数
  var dayCount: Int64 {
    get {return _storage._dayCount}
    set {_uniqueStorage()._dayCount = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._count)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._room)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isSend)
        case 4: try decoder.decodeSingularStringField(value: &_storage._nick)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._dayCount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._count != 0 {
        try visitor.visitSingularInt64Field(value: _storage._count, fieldNumber: 1)
      }
      if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._isSend != false {
        try visitor.visitSingularBoolField(value: _storage._isSend, fieldNumber: 3)
      }
      if !_storage._nick.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nick, fieldNumber: 4)
      }
      if _storage._dayCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._dayCount, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

/// 第三方直播手动提醒通知记录
struct Bbproto_PStreamingManual: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingManual"

  /// 记录id
  var id: String = String()

  /// 创建时间,unix时间戳,精确到秒
  var createTime: Int64 = 0

  /// 直播时间,unix时间戳,精确到秒
  var liveTime: Int64 = 0

  /// 提醒时间,unix时间戳,精确到秒
  var noticeTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.createTime)
      case 3: try decoder.decodeSingularInt64Field(value: &self.liveTime)
      case 4: try decoder.decodeSingularInt64Field(value: &self.noticeTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.createTime != 0 {
      try visitor.visitSingularInt64Field(value: self.createTime, fieldNumber: 2)
    }
    if self.liveTime != 0 {
      try visitor.visitSingularInt64Field(value: self.liveTime, fieldNumber: 3)
    }
    if self.noticeTime != 0 {
      try visitor.visitSingularInt64Field(value: self.noticeTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PStreamingManualList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingManualList"

  var list: [Bbproto_PStreamingManual] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播手动主播(服务内部用)
struct Bbproto_PStreamingAnchorInside: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingAnchorInside"

  /// 编号uuid
  var uuid: String = String()

  /// 头像网址
  var imageURL: String = String()

  /// 昵称
  var nick: String = String()

  /// 平台图标
  var iconThumb: String = String()

  /// 房间号
  var room: String = String()

  /// 状态
  var isEnable: Bool = false

  /// 直播次数
  var liveCount: Int64 = 0

  /// 用户名
  var username: String = String()

  /// 手机号
  var cellphone: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.imageURL)
      case 3: try decoder.decodeSingularStringField(value: &self.nick)
      case 4: try decoder.decodeSingularStringField(value: &self.iconThumb)
      case 5: try decoder.decodeSingularStringField(value: &self.room)
      case 6: try decoder.decodeSingularBoolField(value: &self.isEnable)
      case 7: try decoder.decodeSingularInt64Field(value: &self.liveCount)
      case 8: try decoder.decodeSingularStringField(value: &self.username)
      case 9: try decoder.decodeSingularStringField(value: &self.cellphone)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 2)
    }
    if !self.nick.isEmpty {
      try visitor.visitSingularStringField(value: self.nick, fieldNumber: 3)
    }
    if !self.iconThumb.isEmpty {
      try visitor.visitSingularStringField(value: self.iconThumb, fieldNumber: 4)
    }
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 5)
    }
    if self.isEnable != false {
      try visitor.visitSingularBoolField(value: self.isEnable, fieldNumber: 6)
    }
    if self.liveCount != 0 {
      try visitor.visitSingularInt64Field(value: self.liveCount, fieldNumber: 7)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 8)
    }
    if !self.cellphone.isEmpty {
      try visitor.visitSingularStringField(value: self.cellphone, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PStreamingAnchorInsideList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingAnchorInsideList"

  var list: [Bbproto_PStreamingAnchorInside] = []

  /// 主播总数
  var count: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// 第三方直播手动直播(服务内部用)
struct Bbproto_PStreamingLiveInside: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingLiveInside"

  /// 记录id
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// 主播
  var anchor: Bbproto_PStreamingAnchorInside {
    get {return _storage._anchor ?? Bbproto_PStreamingAnchorInside()}
    set {_uniqueStorage()._anchor = newValue}
  }
  /// Returns true if `anchor` has been explicitly set.
  var hasAnchor: Bool {return _storage._anchor != nil}
  /// Clears the value of `anchor`. Subsequent reads from it will return its default value.
  mutating func clearAnchor() {_storage._anchor = nil}

  /// 点击人数
  var clickCount: Int64 {
    get {return _storage._clickCount}
    set {_uniqueStorage()._clickCount = newValue}
  }

  /// unix时间戳,精确到秒
  var liveTime: Int64 {
    get {return _storage._liveTime}
    set {_uniqueStorage()._liveTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._anchor)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._clickCount)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._liveTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._anchor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._clickCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._clickCount, fieldNumber: 3)
      }
      if _storage._liveTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._liveTime, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PStreamingLiveInsideList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PStreamingLiveInsideList"

  var list: [Bbproto_PStreamingLiveInside] = []

  /// 直播总数
  var count: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.list)
      case 2: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PStreamingWebSite: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .same(proto: "id"),
    4: .same(proto: "bigIconUrl"),
    5: .same(proto: "smallIconUrl"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingWebSite) -> Bool {
    if self.name != other.name {return false}
    if self.url != other.url {return false}
    if self.id != other.id {return false}
    if self.bigIconURL != other.bigIconURL {return false}
    if self.smallIconURL != other.smallIconURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingWebSiteList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingWebSiteList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "webSite"),
    2: .same(proto: "Number"),
    3: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _webSite: Bbproto_PStreamingWebSite? = nil
    var _number: String = String()
    var _url: String = String()

    init() {}

    init(copying source: _StorageClass) {
      _webSite = source._webSite
      _number = source._number
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingRoom) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._webSite != other_storage._webSite {return false}
        if _storage._number != other_storage._number {return false}
        if _storage._url != other_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingRoomList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingRoomList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingLive: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "anchor"),
    3: .same(proto: "room"),
    4: .same(proto: "isLiving"),
    5: .same(proto: "lastLiveTime"),
    6: .same(proto: "nextLiveTime"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _anchor: Bbproto_PUserSupervisor? = nil
    var _room: Bbproto_PStreamingRoom? = nil
    var _isLiving: Bool = false
    var _lastLiveTime: Int64 = 0
    var _nextLiveTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _anchor = source._anchor
      _room = source._room
      _isLiving = source._isLiving
      _lastLiveTime = source._lastLiveTime
      _nextLiveTime = source._nextLiveTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingLive) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._anchor != other_storage._anchor {return false}
        if _storage._room != other_storage._room {return false}
        if _storage._isLiving != other_storage._isLiving {return false}
        if _storage._lastLiveTime != other_storage._lastLiveTime {return false}
        if _storage._nextLiveTime != other_storage._nextLiveTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingLiveList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "livingCount"),
    3: .same(proto: "liveCount"),
    4: .same(proto: "allCount"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingLiveList) -> Bool {
    if self.list != other.list {return false}
    if self.livingCount != other.livingCount {return false}
    if self.liveCount != other.liveCount {return false}
    if self.allCount != other.allCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingConfig: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chinese"),
    2: .same(proto: "english"),
    3: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingConfig) -> Bool {
    if self.chinese != other.chinese {return false}
    if self.english != other.english {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingConfigList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingConfigList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingAnchor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "isSubscribe"),
    3: .same(proto: "isAdd"),
    4: .same(proto: "room"),
  ]

  fileprivate class _StorageClass {
    var _user: Bbproto_PUserSupervisor? = nil
    var _isSubscribe: Bool = false
    var _isAdd: Bool = false
    var _room: Bbproto_PStreamingRoom? = nil

    init() {}

    init(copying source: _StorageClass) {
      _user = source._user
      _isSubscribe = source._isSubscribe
      _isAdd = source._isAdd
      _room = source._room
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingAnchor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._user != other_storage._user {return false}
        if _storage._isSubscribe != other_storage._isSubscribe {return false}
        if _storage._isAdd != other_storage._isAdd {return false}
        if _storage._room != other_storage._room {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingAnchorList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingAnchorList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingFan: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "refuseAll"),
    2: .same(proto: "refuseWebSites"),
    3: .same(proto: "isSend"),
    4: .same(proto: "room"),
  ]

  fileprivate class _StorageClass {
    var _refuseAll: Bool = false
    var _refuseWebSites: [String] = []
    var _isSend: Bool = false
    var _room: Bbproto_PStreamingRoom? = nil

    init() {}

    init(copying source: _StorageClass) {
      _refuseAll = source._refuseAll
      _refuseWebSites = source._refuseWebSites
      _isSend = source._isSend
      _room = source._room
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingFan) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._refuseAll != other_storage._refuseAll {return false}
        if _storage._refuseWebSites != other_storage._refuseWebSites {return false}
        if _storage._isSend != other_storage._isSend {return false}
        if _storage._room != other_storage._room {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingRest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "room"),
    3: .same(proto: "isSend"),
    4: .same(proto: "nick"),
    5: .same(proto: "dayCount"),
  ]

  fileprivate class _StorageClass {
    var _count: Int64 = 0
    var _room: Bbproto_PStreamingRoom? = nil
    var _isSend: Bool = false
    var _nick: String = String()
    var _dayCount: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _count = source._count
      _room = source._room
      _isSend = source._isSend
      _nick = source._nick
      _dayCount = source._dayCount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingRest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._count != other_storage._count {return false}
        if _storage._room != other_storage._room {return false}
        if _storage._isSend != other_storage._isSend {return false}
        if _storage._nick != other_storage._nick {return false}
        if _storage._dayCount != other_storage._dayCount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingManual: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createTime"),
    3: .same(proto: "liveTime"),
    4: .same(proto: "noticeTime"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingManual) -> Bool {
    if self.id != other.id {return false}
    if self.createTime != other.createTime {return false}
    if self.liveTime != other.liveTime {return false}
    if self.noticeTime != other.noticeTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingManualList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingManualList) -> Bool {
    if self.list != other.list {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingAnchorInside: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "imageUrl"),
    3: .same(proto: "nick"),
    4: .same(proto: "iconThumb"),
    5: .same(proto: "room"),
    6: .same(proto: "isEnable"),
    7: .same(proto: "liveCount"),
    8: .same(proto: "username"),
    9: .same(proto: "cellphone"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingAnchorInside) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.imageURL != other.imageURL {return false}
    if self.nick != other.nick {return false}
    if self.iconThumb != other.iconThumb {return false}
    if self.room != other.room {return false}
    if self.isEnable != other.isEnable {return false}
    if self.liveCount != other.liveCount {return false}
    if self.username != other.username {return false}
    if self.cellphone != other.cellphone {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingAnchorInsideList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingAnchorInsideList) -> Bool {
    if self.list != other.list {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingLiveInside: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "anchor"),
    3: .same(proto: "clickCount"),
    4: .same(proto: "liveTime"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _anchor: Bbproto_PStreamingAnchorInside? = nil
    var _clickCount: Int64 = 0
    var _liveTime: Int64 = 0

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _anchor = source._anchor
      _clickCount = source._clickCount
      _liveTime = source._liveTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingLiveInside) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._anchor != other_storage._anchor {return false}
        if _storage._clickCount != other_storage._clickCount {return false}
        if _storage._liveTime != other_storage._liveTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PStreamingLiveInsideList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "list"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PStreamingLiveInsideList) -> Bool {
    if self.list != other.list {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

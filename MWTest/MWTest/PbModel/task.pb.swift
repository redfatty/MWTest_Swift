/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: task.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Bbproto_PTaskUserBasic: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskUserBasic"

  /// 经验等级（1-9依次为：新手、菜鸟、青铜、白银、黄金、白金、钻石、大师、王者）
  var level: Int32 = 0

  /// 经验等级名称（预留）
  var levelName: String = String()

  /// 经验值
  var exp: Int64 = 0

  /// 下一个经验等级（如果=level表示已是最高等级）
  var nextLevel: Int32 = 0

  /// 下一个经验等级名称（预留）
  var nextLevelName: String = String()

  /// 下一个经验等级的最低经验值
  var nextLevelExp: Int64 = 0

  /// 用户昵称
  var nickname: String = String()

  /// 用户头像url
  var headimg: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.level)
      case 2: try decoder.decodeSingularStringField(value: &self.levelName)
      case 3: try decoder.decodeSingularInt64Field(value: &self.exp)
      case 4: try decoder.decodeSingularInt32Field(value: &self.nextLevel)
      case 5: try decoder.decodeSingularStringField(value: &self.nextLevelName)
      case 6: try decoder.decodeSingularInt64Field(value: &self.nextLevelExp)
      case 7: try decoder.decodeSingularStringField(value: &self.nickname)
      case 8: try decoder.decodeSingularStringField(value: &self.headimg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 1)
    }
    if !self.levelName.isEmpty {
      try visitor.visitSingularStringField(value: self.levelName, fieldNumber: 2)
    }
    if self.exp != 0 {
      try visitor.visitSingularInt64Field(value: self.exp, fieldNumber: 3)
    }
    if self.nextLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.nextLevel, fieldNumber: 4)
    }
    if !self.nextLevelName.isEmpty {
      try visitor.visitSingularStringField(value: self.nextLevelName, fieldNumber: 5)
    }
    if self.nextLevelExp != 0 {
      try visitor.visitSingularInt64Field(value: self.nextLevelExp, fieldNumber: 6)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 7)
    }
    if !self.headimg.isEmpty {
      try visitor.visitSingularStringField(value: self.headimg, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PTaskList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskList"

  /// 用户基础信息
  var userBasic: Bbproto_PTaskUserBasic {
    get {return _storage._userBasic ?? Bbproto_PTaskUserBasic()}
    set {_uniqueStorage()._userBasic = newValue}
  }
  /// Returns true if `userBasic` has been explicitly set.
  var hasUserBasic: Bool {return _storage._userBasic != nil}
  /// Clears the value of `userBasic`. Subsequent reads from it will return its default value.
  mutating func clearUserBasic() {_storage._userBasic = nil}

  /// 任务总数（包括日常和主线）
  var taskTotal: Int32 {
    get {return _storage._taskTotal}
    set {_uniqueStorage()._taskTotal = newValue}
  }

  /// 日常任务总数
  var dailyTaskTotal: Int32 {
    get {return _storage._dailyTaskTotal}
    set {_uniqueStorage()._dailyTaskTotal = newValue}
  }

  /// 已完成日常任务数
  var dailyTaskCompleteTotal: Int32 {
    get {return _storage._dailyTaskCompleteTotal}
    set {_uniqueStorage()._dailyTaskCompleteTotal = newValue}
  }

  /// 主线任务列表
  var mainTask: [Bbproto_PTaskInfo] {
    get {return _storage._mainTask}
    set {_uniqueStorage()._mainTask = newValue}
  }

  /// 日常任务列表
  var dailyTask: [Bbproto_PTaskInfo] {
    get {return _storage._dailyTask}
    set {_uniqueStorage()._dailyTask = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._userBasic)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._taskTotal)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._dailyTaskTotal)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._dailyTaskCompleteTotal)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._mainTask)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._dailyTask)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userBasic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._taskTotal != 0 {
        try visitor.visitSingularInt32Field(value: _storage._taskTotal, fieldNumber: 2)
      }
      if _storage._dailyTaskTotal != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dailyTaskTotal, fieldNumber: 3)
      }
      if _storage._dailyTaskCompleteTotal != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dailyTaskCompleteTotal, fieldNumber: 4)
      }
      if !_storage._mainTask.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mainTask, fieldNumber: 5)
      }
      if !_storage._dailyTask.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dailyTask, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PTaskInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskInfo"

  /// 任务ID
  var taskid: Int32 = 0

  /// 任务完成经验值
  var exp: Int64 = 0

  /// 任务状态（0-未接受，1-进行中，2-可领奖，3-已完成）
  var state: Int32 = 0

  /// 任务类型
  var type: Int32 = 0

  /// 已完成数量
  var complete: Int32 = 0

  /// 任务总数量
  var num: Int32 = 0

  /// 任务描述
  var desc: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.taskid)
      case 2: try decoder.decodeSingularInt64Field(value: &self.exp)
      case 3: try decoder.decodeSingularInt32Field(value: &self.state)
      case 4: try decoder.decodeSingularInt32Field(value: &self.type)
      case 5: try decoder.decodeSingularInt32Field(value: &self.complete)
      case 6: try decoder.decodeSingularInt32Field(value: &self.num)
      case 7: try decoder.decodeSingularStringField(value: &self.desc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.taskid != 0 {
      try visitor.visitSingularInt32Field(value: self.taskid, fieldNumber: 1)
    }
    if self.exp != 0 {
      try visitor.visitSingularInt64Field(value: self.exp, fieldNumber: 2)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 3)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 4)
    }
    if self.complete != 0 {
      try visitor.visitSingularInt32Field(value: self.complete, fieldNumber: 5)
    }
    if self.num != 0 {
      try visitor.visitSingularInt32Field(value: self.num, fieldNumber: 6)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PTaskLevelList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskLevelList"

  /// 用户基础信息
  var userBasic: Bbproto_PTaskUserBasic {
    get {return _storage._userBasic ?? Bbproto_PTaskUserBasic()}
    set {_uniqueStorage()._userBasic = newValue}
  }
  /// Returns true if `userBasic` has been explicitly set.
  var hasUserBasic: Bool {return _storage._userBasic != nil}
  /// Clears the value of `userBasic`. Subsequent reads from it will return its default value.
  mutating func clearUserBasic() {_storage._userBasic = nil}

  /// 等级列表
  var taskLevel: [Bbproto_PTaskLevel] {
    get {return _storage._taskLevel}
    set {_uniqueStorage()._taskLevel = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._userBasic)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._taskLevel)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userBasic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._taskLevel.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._taskLevel, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PTaskLevel: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskLevel"

  /// 等级ID
  var id: Int32 = 0

  /// 等级名称
  var name: String = String()

  /// 经验值范围（小）
  var minExp: Int64 = 0

  /// 经验值范围（大）
  var maxExp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularInt64Field(value: &self.minExp)
      case 4: try decoder.decodeSingularInt64Field(value: &self.maxExp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.minExp != 0 {
      try visitor.visitSingularInt64Field(value: self.minExp, fieldNumber: 3)
    }
    if self.maxExp != 0 {
      try visitor.visitSingularInt64Field(value: self.maxExp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PTaskUserPk: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PTaskUserPk"

  /// 用户基础信息
  var userBasic: Bbproto_PTaskUserBasic {
    get {return _storage._userBasic ?? Bbproto_PTaskUserBasic()}
    set {_uniqueStorage()._userBasic = newValue}
  }
  /// Returns true if `userBasic` has been explicitly set.
  var hasUserBasic: Bool {return _storage._userBasic != nil}
  /// Clears the value of `userBasic`. Subsequent reads from it will return its default value.
  mutating func clearUserBasic() {_storage._userBasic = nil}

  /// 对方用户基础信息
  var pkUserBasic: Bbproto_PTaskUserBasic {
    get {return _storage._pkUserBasic ?? Bbproto_PTaskUserBasic()}
    set {_uniqueStorage()._pkUserBasic = newValue}
  }
  /// Returns true if `pkUserBasic` has been explicitly set.
  var hasPkUserBasic: Bool {return _storage._pkUserBasic != nil}
  /// Clears the value of `pkUserBasic`. Subsequent reads from it will return its default value.
  mutating func clearPkUserBasic() {_storage._pkUserBasic = nil}

  /// 自己已完成任务总数
  var userTaskTotol: Int32 {
    get {return _storage._userTaskTotol}
    set {_uniqueStorage()._userTaskTotol = newValue}
  }

  /// 对方已完成任务总数
  var pkUserTaskTotol: Int32 {
    get {return _storage._pkUserTaskTotol}
    set {_uniqueStorage()._pkUserTaskTotol = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._userBasic)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pkUserBasic)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._userTaskTotol)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._pkUserTaskTotol)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userBasic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._pkUserBasic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._userTaskTotol != 0 {
        try visitor.visitSingularInt32Field(value: _storage._userTaskTotol, fieldNumber: 3)
      }
      if _storage._pkUserTaskTotol != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pkUserTaskTotol, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Bbproto_PExpLevelList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PExpLevelList"

  /// 等级列表
  var expLevel: [Bbproto_PExpLevel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.expLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.expLevel.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.expLevel, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PExpLevel: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PExpLevel"

  /// 等级ID
  var id: Int32 = 0

  /// 等级中文繁体
  var titleSc: String = String()

  /// 等级中文简体
  var titleTc: String = String()

  /// 等级英文
  var titleEn: String = String()

  /// 等级韩文
  var titleKr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.titleSc)
      case 3: try decoder.decodeSingularStringField(value: &self.titleTc)
      case 4: try decoder.decodeSingularStringField(value: &self.titleEn)
      case 5: try decoder.decodeSingularStringField(value: &self.titleKr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.titleSc.isEmpty {
      try visitor.visitSingularStringField(value: self.titleSc, fieldNumber: 2)
    }
    if !self.titleTc.isEmpty {
      try visitor.visitSingularStringField(value: self.titleTc, fieldNumber: 3)
    }
    if !self.titleEn.isEmpty {
      try visitor.visitSingularStringField(value: self.titleEn, fieldNumber: 4)
    }
    if !self.titleKr.isEmpty {
      try visitor.visitSingularStringField(value: self.titleKr, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PSubscribeArray: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSubscribeArray"

  var subscribe: [Bbproto_PSubscribe] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.subscribe)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscribe.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscribe, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PSubscribe: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PSubscribe"

  /// 用户uuid
  var uuid: String = String()

  /// 消息ID
  var msgid: Int32 = 0

  /// 消息有效时间（-1表示永久，0表示取消订阅，其它表示失效时间的时间戳）
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.msgid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.msgid != 0 {
      try visitor.visitSingularInt32Field(value: self.msgid, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCallbackArray: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCallbackArray"

  var callback: [Bbproto_PCallback] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.callback)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.callback.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.callback, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Bbproto_PCallback: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PCallback"

  /// 用户uuid
  var uuid: String = String()

  /// 消息ID
  var msgid: Int32 = 0

  /// 消息时间（时间戳）
  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.msgid)
      case 3: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.msgid != 0 {
      try visitor.visitSingularInt32Field(value: self.msgid, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bbproto"

extension Bbproto_PTaskUserBasic: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "levelName"),
    3: .same(proto: "exp"),
    4: .same(proto: "nextLevel"),
    5: .same(proto: "nextLevelName"),
    6: .same(proto: "nextLevelExp"),
    7: .same(proto: "nickname"),
    8: .same(proto: "headimg"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskUserBasic) -> Bool {
    if self.level != other.level {return false}
    if self.levelName != other.levelName {return false}
    if self.exp != other.exp {return false}
    if self.nextLevel != other.nextLevel {return false}
    if self.nextLevelName != other.nextLevelName {return false}
    if self.nextLevelExp != other.nextLevelExp {return false}
    if self.nickname != other.nickname {return false}
    if self.headimg != other.headimg {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTaskList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userBasic"),
    2: .same(proto: "taskTotal"),
    3: .same(proto: "dailyTaskTotal"),
    4: .same(proto: "dailyTaskCompleteTotal"),
    5: .same(proto: "mainTask"),
    6: .same(proto: "dailyTask"),
  ]

  fileprivate class _StorageClass {
    var _userBasic: Bbproto_PTaskUserBasic? = nil
    var _taskTotal: Int32 = 0
    var _dailyTaskTotal: Int32 = 0
    var _dailyTaskCompleteTotal: Int32 = 0
    var _mainTask: [Bbproto_PTaskInfo] = []
    var _dailyTask: [Bbproto_PTaskInfo] = []

    init() {}

    init(copying source: _StorageClass) {
      _userBasic = source._userBasic
      _taskTotal = source._taskTotal
      _dailyTaskTotal = source._dailyTaskTotal
      _dailyTaskCompleteTotal = source._dailyTaskCompleteTotal
      _mainTask = source._mainTask
      _dailyTask = source._dailyTask
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskList) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userBasic != other_storage._userBasic {return false}
        if _storage._taskTotal != other_storage._taskTotal {return false}
        if _storage._dailyTaskTotal != other_storage._dailyTaskTotal {return false}
        if _storage._dailyTaskCompleteTotal != other_storage._dailyTaskCompleteTotal {return false}
        if _storage._mainTask != other_storage._mainTask {return false}
        if _storage._dailyTask != other_storage._dailyTask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTaskInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "taskid"),
    2: .same(proto: "exp"),
    3: .same(proto: "state"),
    4: .same(proto: "type"),
    5: .same(proto: "complete"),
    6: .same(proto: "num"),
    7: .same(proto: "desc"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskInfo) -> Bool {
    if self.taskid != other.taskid {return false}
    if self.exp != other.exp {return false}
    if self.state != other.state {return false}
    if self.type != other.type {return false}
    if self.complete != other.complete {return false}
    if self.num != other.num {return false}
    if self.desc != other.desc {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTaskLevelList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userBasic"),
    2: .same(proto: "taskLevel"),
  ]

  fileprivate class _StorageClass {
    var _userBasic: Bbproto_PTaskUserBasic? = nil
    var _taskLevel: [Bbproto_PTaskLevel] = []

    init() {}

    init(copying source: _StorageClass) {
      _userBasic = source._userBasic
      _taskLevel = source._taskLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskLevelList) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userBasic != other_storage._userBasic {return false}
        if _storage._taskLevel != other_storage._taskLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTaskLevel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "minExp"),
    4: .same(proto: "maxExp"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskLevel) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.minExp != other.minExp {return false}
    if self.maxExp != other.maxExp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PTaskUserPk: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userBasic"),
    2: .same(proto: "pkUserBasic"),
    3: .same(proto: "userTaskTotol"),
    4: .same(proto: "pkUserTaskTotol"),
  ]

  fileprivate class _StorageClass {
    var _userBasic: Bbproto_PTaskUserBasic? = nil
    var _pkUserBasic: Bbproto_PTaskUserBasic? = nil
    var _userTaskTotol: Int32 = 0
    var _pkUserTaskTotol: Int32 = 0

    init() {}

    init(copying source: _StorageClass) {
      _userBasic = source._userBasic
      _pkUserBasic = source._pkUserBasic
      _userTaskTotol = source._userTaskTotol
      _pkUserTaskTotol = source._pkUserTaskTotol
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bbproto_PTaskUserPk) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._userBasic != other_storage._userBasic {return false}
        if _storage._pkUserBasic != other_storage._pkUserBasic {return false}
        if _storage._userTaskTotol != other_storage._userTaskTotol {return false}
        if _storage._pkUserTaskTotol != other_storage._pkUserTaskTotol {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PExpLevelList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "expLevel"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PExpLevelList) -> Bool {
    if self.expLevel != other.expLevel {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PExpLevel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "titleSc"),
    3: .same(proto: "titleTc"),
    4: .same(proto: "titleEn"),
    5: .same(proto: "titleKr"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PExpLevel) -> Bool {
    if self.id != other.id {return false}
    if self.titleSc != other.titleSc {return false}
    if self.titleTc != other.titleTc {return false}
    if self.titleEn != other.titleEn {return false}
    if self.titleKr != other.titleKr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSubscribeArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscribe"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSubscribeArray) -> Bool {
    if self.subscribe != other.subscribe {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PSubscribe: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "msgid"),
    3: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PSubscribe) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.msgid != other.msgid {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCallbackArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "callback"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCallbackArray) -> Bool {
    if self.callback != other.callback {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bbproto_PCallback: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "msgid"),
    3: .same(proto: "time"),
  ]

  func _protobuf_generated_isEqualTo(other: Bbproto_PCallback) -> Bool {
    if self.uuid != other.uuid {return false}
    if self.msgid != other.msgid {return false}
    if self.time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
